2018-10-31T13:38:14 #rust-wasm <logbot> channel logging requested by fitzgen: https://mozilla.logbot.info/rust-wasm
2018-10-31T19:27:24 #rust-wasm <drager> Not sure who should review my PR; https://github.com/rustwasm/wasm-pack/pull/415 but maybe could you do it fitzgen? I mean, since I'm adding tests to code you have written (as I understand it).
2018-10-31T19:29:09 #rust-wasm <drager> I appreciete everyones input though :)
2018-10-31T19:30:27 #rust-wasm <fitzgen> drager: I requested ag_dubs's review, since she was bully on pulling the binary installation out to its own crate
2018-10-31T19:38:59 #rust-wasm <drager> Yeah great :)
2018-10-31T19:42:47 #rust-wasm <ag_dubs> i can take a look tonight probably! at a speaker dinner atm!
2018-10-31T19:43:07 #rust-wasm <ag_dubs> overall it looked good to me so i would only expect nits- ill look soon tho
2018-10-31T19:49:00 #rust-wasm <drager> No rush though, if you're busy just take it another day :)
2018-10-31T21:41:01 #rust-wasm <soarh> is this the right channel to ask about wasm-bindgen internals?
2018-10-31T21:44:42 #rust-wasm <acrichto> soarh: it is indeed!
2018-10-31T21:51:16 #rust-wasm <soarh> yay! so i'm hacking on the editor to output typescript types for tagged unions. i got most of it working, but hit a wall with Context::describe. i think i misunderstand what self.interpreter.interpret_descriptor does and what the key is for
2018-10-31T21:51:58 #rust-wasm <soarh> i'm skipping all rust code generation and just outputting typescript strings, so i assume i am not doing something with ast::StructField that i should be doing.
2018-10-31T21:54:18 #rust-wasm <soarh> i may have missed a markdown file on the Interpreter or the describe() interface
2018-10-31T21:57:26 #rust-wasm <acrichto> soarh: oh so anything related to descriptors and interpreters you can probably skip
2018-10-31T21:57:32 #rust-wasm <acrichto> none of that should be related to the typescript generation
2018-10-31T22:32:45 #rust-wasm <soarh> gotcha. I assume those are probably for the struct field code path that uses like getters/setters?
2018-10-31T22:33:18 #rust-wasm <soarh> I just need to output the JS type from a rust field so I can narrow my search do doing that
2018-11-01T02:05:17 #rust-wasm <soarh> got it working, somehow. looks like i needed the right descriptor to be generated for each field
2018-11-01T16:57:33 #rust-wasm <fitzgen> ag_dubs: are you going to make todays meeting?
2018-11-01T17:00:23 #rust-wasm <ag_dubs> i cant im stuck at the conf and the wifi is terrible
2018-11-01T17:00:46 #rust-wasm <fitzgen> cool
2018-11-01T17:00:49 #rust-wasm <fitzgen> no worries
2018-11-01T17:00:50 #rust-wasm <ag_dubs> it took 4 tries to get that send :/
2018-11-01T17:01:11 #rust-wasm <fitzgen> Please use this zoom meeting room today: https://zoom.us/j/796499157
2018-11-01T17:18:44 #rust-wasm <jrl> For the zoom meetings is the chat typically in the irc channel or the zoom chat?
2018-11-01T17:19:46 #rust-wasm <FreeMasen> Sorry to post this in multiple places but I am still getting a Please Wait message, is there something wrong on my end or has the meeting not started yet?
2018-11-01T17:21:51 #rust-wasm <jrl> FreeMasen the zoom link changed. They added it to the github issue. I'll find the link for your. One sec
2018-11-01T17:22:16 #rust-wasm <jrl> https://zoom.us/j/796499157
2018-11-01T17:22:24 #rust-wasm <FreeMasen> Got it, thanks!
2018-11-02T06:30:52 #rust-wasm <drager> I unfortunately couldn't make the meeting yesterday... Time here has changed this week so the meeting is 1 hour earlier for me now :P Hoping to attend next week though :)
2018-11-04T23:29:44 #rust-wasm <Diggsey> is `#[wasm_bindgen(js_name = ...)]` expected to work on exported Rust types?
2018-11-04T23:30:04 #rust-wasm <Diggsey> I'm trying to use it but it just exports under the original name
2018-11-05T20:58:27 #rust-wasm <drager> Ohoh, this is not great for my pr :/ https://github.com/rustwasm/wasm-pack/commit/dac12d3e340c977413e1076ac5b2391293ebc756
2018-11-05T21:33:49 #rust-wasm <acrichto> drager: if you need help w/ rebasing or anything just lemme know
2018-11-05T21:33:57 #rust-wasm <acrichto> sorry didn't realize it would break your so much!
2018-11-06T00:16:21 #rust-wasm <mlkshaker1> Do any editors/ides support completion for things like web-sys ? intellij with rust plugin can't discover any parts of the create other than web_sys::window even with the features turned on.
2018-11-06T00:17:56 #rust-wasm <mlkshaker1> Also following the wasm book, what is the difference between web_sys::console::log and the first example using extern fn alert. Do they equate to the same things, just different ways of doing it ?
2018-11-06T00:19:16 #rust-wasm <mlkshaker1> Also trying to visit the source from the web-sys api pages is destroying my machine heh
2018-11-06T00:19:59 #rust-wasm <mlkshaker1> page is 80mb html, jesus :O 
2018-11-06T06:21:43 #rust-wasm <drager> acrichto: Thanks for offering! Appreceite it! I will look more closely at changes tonight and ping you if I need some help :)
2018-11-06T07:05:21 #rust-wasm <mldbdlwhb> hello
2018-11-06T07:06:51 #rust-wasm <mldbdlwhb> new rust-wasm user
2018-11-06T07:09:26 #rust-wasm <drager> Hey
2018-11-06T07:12:48 #rust-wasm <mldbdlwhb> I look for tutorial similar to Conway-game-of-life
2018-11-06T13:09:15 #rust-wasm <mldbdlwhb> hey
2018-11-06T18:25:55 #rust-wasm <fitzgen> acrichto: ping
2018-11-06T18:27:15 #rust-wasm <fitzgen> acrichto: we've talked of adding wasm-pack specific bits to the [package.metadata] before
2018-11-06T18:27:49 #rust-wasm <fitzgen> acrichto: we've also talked for a while about the "three build modes" for wasm: 1. debugging, 2. profiling, 3. production
2018-11-06T18:28:03 #rust-wasm <fitzgen> acrichto: which seem *sort of* like cargo profiles
2018-11-06T18:28:19 #rust-wasm <fitzgen> acrichto: and I'm wondering how we mary these thigns together, essentially
2018-11-06T18:28:19 #rust-wasm <acrichto> indeed
2018-11-06T18:28:27 #rust-wasm <fitzgen> marry*
2018-11-06T18:28:52 #rust-wasm <acrichto> debugging/production fall well into `build` and `build --release`
2018-11-06T18:29:01 #rust-wasm <acrichto> profiling is the weird one where you want debug symbols in relesae mode
2018-11-06T18:29:06 #rust-wasm <acrichto> (but not debug assertions and such)
2018-11-06T18:29:14 #rust-wasm <fitzgen> debug = no opt + debug info; profiling = opt + wasm-opt + debug info; production = opt + wasm-opt + wasm-snip + no debug info
2018-11-06T18:29:18 #rust-wasm <acrichto> it's sort of nto great in cargo today so it seems fine for wasm-pack to not go too far out of its way
2018-11-06T18:29:43 #rust-wasm <acrichto> I think it's fine for wasm-pack to not require/enforce debuginfo in profiling basially
2018-11-06T18:29:49 #rust-wasm <acrichto> where wasm-pack would just tell cargo release mode or not
2018-11-06T18:29:52 #rust-wasm <acrichto> and then configure tools later
2018-11-06T18:30:07 #rust-wasm <acrichto> and we'd have docs for the best profiling experience to include debuginfo (in theory, it doesn't actually matter today)
2018-11-06T18:30:23 #rust-wasm <fitzgen> it does matter, to get function names
2018-11-06T18:30:29 #rust-wasm <fitzgen> instead of wasm-function[123]
2018-11-06T18:31:06 #rust-wasm <acrichto> but rustc always emits that
2018-11-06T18:31:13 #rust-wasm <acrichto> you can't tell rustc to not emit the names section
2018-11-06T18:31:18 #rust-wasm <fitzgen> are you advocating for matching cargo profiles, not havign a "profiling" build, and then just documenting the things you need to do to have good profiling?
2018-11-06T18:31:38 #rust-wasm <acrichto> for debuginfo specifically yeah
2018-11-06T18:31:44 #rust-wasm <fitzgen> well wasm-bindgen (via wasm-gc) will remove it
2018-11-06T18:31:45 #rust-wasm <acrichto> where it just tweaks what wasm-pack runs afterwards
2018-11-06T18:31:58 #rust-wasm <acrichto> wasm-bindgen removes dwarf sections
2018-11-06T18:32:00 #rust-wasm <acrichto> but not the names section
2018-11-06T18:32:06 #rust-wasm <acrichto> (automatically at least)
2018-11-06T18:32:14 #rust-wasm <acrichto> afaik wasm-opt is the only one that removes it by default
2018-11-06T18:32:54 #rust-wasm <fitzgen> I'm still a little unclear
2018-11-06T18:33:06 #rust-wasm <fitzgen> are you in favor of completely removing the idea of a profiling build?
2018-11-06T18:33:12 #rust-wasm <acrichto> lol
2018-11-06T18:33:17 #rust-wasm <acrichto> I don't have a strong feeling either way
2018-11-06T18:33:26 #rust-wasm <fitzgen> or are you in favor of wasm-pack having a profiling build that is only for the post-build tools?
2018-11-06T18:33:28 #rust-wasm <acrichto> but it seems like the only major difference between prod and profiling is wasm-snip
2018-11-06T18:33:39 #rust-wasm <fitzgen> prod also wants to remove the names section
2018-11-06T18:33:46 #rust-wasm <acrichto> ah right, that too
2018-11-06T18:33:58 #rust-wasm <acrichto> but these just seems like configurations of the tools after cargo
2018-11-06T18:34:07 #rust-wasm <acrichto> wasm-snip/wasm-opt/etc
2018-11-06T18:34:18 #rust-wasm <fitzgen> basically, I don't want to have to write python scripts to run all these tools anymore, I just want wasm-pack to do it for me, since that is supposed to be its job
2018-11-06T18:34:35 #rust-wasm <acrichto> right
2018-11-06T18:34:56 #rust-wasm <fitzgen> configurations: yes
2018-11-06T18:35:02 #rust-wasm <fitzgen> but I want to say something like this:
2018-11-06T18:35:33 #rust-wasm <fitzgen> [package.metadata.wasm-pack.profile.production]
2018-11-06T18:35:33 #rust-wasm <fitzgen> wasm-snip = "... flags ..."
2018-11-06T18:35:33 #rust-wasm <fitzgen> wasm-opt = "... flags ..."
2018-11-06T18:35:49 #rust-wasm <fitzgen> and then only run `wasm-pack build --production`
2018-11-06T18:36:18 #rust-wasm <acrichto> that makes sense to me yeah
2018-11-06T18:36:26 #rust-wasm <fitzgen> and I guess my question is ultimately: how do we want this config to look like, and what exact key(s) in the cargo toml
2018-11-06T18:37:04 #rust-wasm <acrichto> for tools like wasm-opt/wasm-snip
2018-11-06T18:37:14 #rust-wasm <acrichto> I'd recommend `$tool = false | string | vec<String>
2018-11-06T18:37:28 #rust-wasm <acrichto> or rather, I'd imagine something like that
2018-11-06T18:37:33 #rust-wasm <fitzgen> right
2018-11-06T18:37:36 #rust-wasm <fitzgen> ok
2018-11-06T18:37:39 #rust-wasm <acrichto> and tbh wasm-bindgen is probably the same
2018-11-06T18:37:50 #rust-wasm <acrichto> and then there's reasonable defaults for each section
2018-11-06T18:37:57 #rust-wasm <fitzgen> well people shouldnt be running wbg cli by hand really
2018-11-06T18:38:06 #rust-wasm <acrichto> oh right
2018-11-06T18:38:08 #rust-wasm <acrichto> just to configure it
2018-11-06T18:38:08 #rust-wasm <fitzgen> or at least, if you are doing that, we don't really care about the ergonomics
2018-11-06T18:38:15 #rust-wasm <fitzgen> yeah
2018-11-06T18:38:17 #rust-wasm <acrichto> er sorry, I mean configuration in toml for was-bindgen
2018-11-06T18:38:23 #rust-wasm <fitzgen> gotcha
2018-11-06T18:38:26 #rust-wasm <acrichto> wasm-bindgen = false # always an error
2018-11-06T18:38:32 #rust-wasm <acrichto> wasm-bindgen = '--keep-debug' # don't throw away dwarf
2018-11-06T18:38:44 #rust-wasm <fitzgen> only an error *if* wbg is in your locjkfile
2018-11-06T18:38:56 #rust-wasm <acrichto> oh sure yeah
2018-11-06T18:39:03 #rust-wasm <acrichto> oh that's an interesting idea
2018-11-06T18:39:07 #rust-wasm <acrichto> wasm-pack but w/o wasm-bindgen
2018-11-06T18:39:26 #rust-wasm <fitzgen> I kind of wish that cargo just had fully general hooks + dependencies for re-running those hooks
2018-11-06T18:39:34 #rust-wasm <fitzgen> and we could move all of wasm-pack into that
2018-11-06T18:39:36 #rust-wasm <fitzgen> sigh
2018-11-06T18:39:50 #rust-wasm <acrichto> one of these days!
2018-11-06T18:39:54 #rust-wasm <fitzgen> yeah
2018-11-06T18:39:57 #rust-wasm <fitzgen> anyways
2018-11-06T18:41:17 #rust-wasm <acrichto> I feel like we should probable take over wasm-opt builds ourselves btw
2018-11-06T18:41:28 #rust-wasm <acrichto> it seems like upstream builds are moving at a glacial pace
2018-11-06T18:41:33 #rust-wasm <acrichto> (adding ci configuration for that)
2018-11-06T18:45:55 #rust-wasm <fitzgen> word
2018-11-06T18:55:03 #rust-wasm <fitzgen> acrichto: oh one more thing
2018-11-06T18:55:24 #rust-wasm <fitzgen> acrichto: does it make sense to call these things profiles and have `--profile production|debug|profiling`
2018-11-06T18:55:47 #rust-wasm <fitzgen> or do you think that will cause impedance mismatches with cargo profiles
2018-11-06T18:58:10 #rust-wasm <acrichto> fitzgen: hm yeah
2018-11-06T18:58:15 #rust-wasm <acrichto> I would stick to cargo's terminology
2018-11-06T18:58:18 #rust-wasm <acrichto> so like --release vs not
2018-11-06T18:58:22 #rust-wasm <acrichto> and s/debug/dev/
2018-11-06T18:58:27 #rust-wasm <fitzgen> sure
2018-11-06T18:58:34 #rust-wasm <acrichto> maybe like `wasm-pack build --profiling` ?
2018-11-06T18:58:46 #rust-wasm <acrichto> that one's fine to do w/e with as cargo doesn't do anything today
2018-11-06T19:00:15 #rust-wasm <fitzgen> right now wasm-pack defaults to release builds, and it should probably match cargo's default of dev
2018-11-06T19:00:20 #rust-wasm <fitzgen> I'll file an issue
2018-11-06T19:01:47 #rust-wasm <acrichto> fitzgen: oh I wouldn't mind going either way on that
2018-11-06T19:01:57 #rust-wasm <acrichto> fitzgen: it may actually be correct to default to --release
2018-11-06T19:02:06 #rust-wasm <acrichto> although I can also write out this on an issue
2018-11-06T19:02:10 #rust-wasm <acrichto> and we can have others weigh in too!
2018-11-06T19:02:38 #rust-wasm <fitzgen> https://github.com/rustwasm/wasm-pack/issues/437
2018-11-06T19:10:46 #rust-wasm <drager> acrichto: I checked out your commit now, you removed most of the code so I guess my tests I wrote is meaningless. Most of moving of the code into own modules as well, so I guess I will just merge master into my branch and take all the code from master and move it into the new crate instead.
2018-11-06T19:11:41 #rust-wasm <acrichto> drager: ah ok!
2018-11-06T19:13:22 #rust-wasm <drager> Do you think that sound like a good plan? 
2018-11-06T19:17:02 #rust-wasm <drager> I mean, there's not anything from my branch worth saving I guess
2018-11-06T19:24:49 #rust-wasm <acrichto> drager: oh I don't have too many thoughts on a plan one way or the other
2018-11-06T19:25:04 #rust-wasm <acrichto> w/e works is fine by me
2018-11-06T19:26:31 #rust-wasm <drager> acrichto: Alright, sounds good. Thanks!
2018-11-06T19:26:46 #rust-wasm <drager> I think I can get something it done tonight 
2018-11-06T19:27:10 #rust-wasm <drager> -it
2018-11-06T19:46:57 #rust-wasm <drager> Alright, I think I'm done: https://github.com/rustwasm/wasm-pack/pull/415 Less to review now :)
2018-11-06T19:51:16 #rust-wasm * acrichto looks
2018-11-06T20:19:11 #rust-wasm <acrichto> lol if you visit https://github.com/rustwasm/wasm-pack/tree/master/src github renders `readme.rs` as the README
2018-11-06T20:20:37 #rust-wasm <drager> Yeah, I noticed that before when I was navigating in the file tree :P
2018-11-06T20:30:52 #rust-wasm <drager> acrichto: Resolved the issues in the PR
2018-11-06T20:31:31 #rust-wasm * acrichto looks
2018-11-06T20:34:54 #rust-wasm <drager> Someone is working too fast, getting conflicts every push/pull ;)
2018-11-06T20:36:03 #rust-wasm <acrichto> lol
2018-11-06T20:36:13 #rust-wasm <acrichto> fitzgen: you're working on toml configuration?
2018-11-06T20:38:26 #rust-wasm <fitzgen> acrichto: yeah
2018-11-06T20:39:13 #rust-wasm <acrichto> kk
2018-11-06T21:27:34 #rust-wasm <fitzgen> acrichto: https://github.com/rustwasm/wasm-pack/pull/440
2018-11-06T21:28:55 #rust-wasm <fitzgen> acrichto: once we actually have different config in the toml profiles, I'm imagining some sort of method on CrateData like `fn with_profile(&self, profile: BuildProfile, f: &mut FnMut(&CargoWasmPackProfile) -> T) -> T`
2018-11-06T21:29:15 #rust-wasm <acrichto> fitzgen: sounds like a plan to me
2018-11-06T21:29:36 #rust-wasm <fitzgen> I opted not to make debug info, assertions, and optimizations part of the wasm-pack profiles because it would be redundant with cargo's config
2018-11-06T21:30:05 #rust-wasm <acrichto> yeah that makes sense to me
2018-11-06T21:30:09 #rust-wasm <acrichto> also hard for wasm-pack to control it
2018-11-07T09:32:28 #rust-wasm <astrid> Hey! Is it possible to link to a C crate with wasm32-unknown-unknown somehow?
2018-11-07T09:33:11 #rust-wasm <astrid> Somehow configure Cargo to compile the C code into LLVM bitcode and then link that with the main Rust code afterwards?
2018-11-07T09:35:28 #rust-wasm <astrid> What I need to do works fine with the Emscripten backend but I'd really prefer not to pull in all that overhead just for a small C library I need. I know clang/LLVM can do wasm compilation without wasm, and I think lld can handle it, too.
2018-11-07T18:35:52 #rust-wasm <Devin> Hi there, I've been having an amazing time with the wasm-bindgen & pack workflow, but I recently hit a snag where an imported function triggers an unreachable in the wasm module, when it works fine on the regular system. If someone has any insights for this please let me know, I've tried to capture the issue in this paste https://pastebin.com/PN2NAQNZ
2018-11-07T18:45:16 #rust-wasm <acrichto> Devin: oh we'd recommend using the `console_error_panic_hook` crate to get a better panic message
2018-11-07T18:45:32 #rust-wasm <acrichto> Devin: and that'll likely point to the fact that `rand` doesn't work with wasm-bindgen yet (it uses syscalls that aren't implemented for the wasm target)
2018-11-07T18:46:01 #rust-wasm <acrichto> support for this is available in the `wasm-bindgen` feature of the `rand` crate, but that historically hasn't been published to crates.i
2018-11-07T18:46:03 #rust-wasm <acrichto> crates.io
2018-11-07T20:01:16 #rust-wasm <Devin> acrichto: Aha! Yes I'll get into the panic err hook, but could you say once more how I can get a working rand crate?
2018-11-07T20:01:54 #rust-wasm <acrichto> Devin: in theory it's `rand = { features = ['wasm-bindgen'], version = "..." }`
2018-11-07T20:01:59 #rust-wasm <acrichto> and that should be all you need to do
2018-11-07T20:02:05 #rust-wasm <acrichto> but in practice I don't think that's enbled on crates.io yet
2018-11-07T20:02:09 #rust-wasm <acrichto> so you'll need to depend on a git version
2018-11-07T20:02:11 #rust-wasm <acrichto> (of the rand crate)
2018-11-07T21:03:20 #rust-wasm <drager> #415 should be good to go now :)
2018-11-07T21:06:14 #rust-wasm <Devin> acrichto: i see, I'll give it a try this evening, but thanks so much for quickly diagnosing the immediate issue, and giving me heads up as to what I should do in the future to find out more about the unreachable exception.
2018-11-07T21:30:35 #rust-wasm <acrichto> drager: ok cool! I'll let others take a look to make sure it's good to go
2018-11-07T21:30:39 #rust-wasm <acrichto> Devin: glad I could help!
2018-11-07T21:31:55 #rust-wasm <drager> acrichto: Awesome, thanks!
2018-11-08T06:51:37 #rust-wasm <Devin> acrichto: It looks like the distribution::Range struct went away at the upgrade of rand 0.5.5 to 0.6. Unfortunately my ndarray-rand library seems to not have trait satisfaction when I use Uniform instead as is suggested in the rand Documentation. If you'd like me to create an issue with this info let me know. This could also be out of your hands and into the ndarray-rand folks territory 
2018-11-08T06:51:43 #rust-wasm <Devin> https://pastebin.com/pDXTMV6f
2018-11-08T14:04:03 #rust-wasm <acrichto> Devin: oh that I'm not so sure about, I don't maintain the rand crate and am pretty unfamiliar with its api nowadays
2018-11-08T16:55:32 #rust-wasm <fitzgen> ag_dubs: are you able to make today's meeting, or should I create a new zoom room?
2018-11-08T17:00:08 #rust-wasm <acrichto> fitzgen: sounds like a new room
2018-11-08T17:01:40 #rust-wasm <fitzgen> hrm, I am having a hard time logging in on this machine
2018-11-08T17:01:48 #rust-wasm <fitzgen> acrichto: could you create a room?
2018-11-08T17:01:58 #rust-wasm <acrichto> sure
2018-11-08T17:02:02 #rust-wasm <acrichto> I've never done this before, how's the way to do it?
2018-11-08T17:02:17 #rust-wasm <fitzgen> there should be a button on the zoom app
2018-11-08T17:02:21 #rust-wasm <fitzgen> that's a big +
2018-11-08T17:02:39 #rust-wasm <acrichto> I probably nee dto sign up first...
2018-11-08T17:03:47 #rust-wasm <acrichto> https://mozilla.zoom.us/j/727615547
2018-11-08T17:44:59 #rust-wasm <acrichto> the recording is now processing...
2018-11-08T17:45:02 #rust-wasm <fitzgen> acrichto: did we file an issue for the generalized error
2018-11-08T17:45:02 #rust-wasm <fitzgen> ?
2018-11-08T17:45:08 #rust-wasm <acrichto> yoshuawuyts: fitzgen: nah we don't have an issue yet for that
2018-11-08T17:45:18 #rust-wasm <acrichto> but it came up a few days ago in a different context too
2018-11-08T17:45:20 #rust-wasm <fitzgen> ok, I'll file something
2018-11-08T17:45:27 #rust-wasm <acrichto> I think we can make the error story bridging much nicer for sure
2018-11-08T17:45:38 #rust-wasm <acrichto> and ideall you just `?` your failure::Error into an exception in JS
2018-11-08T17:45:44 #rust-wasm <acrichto> (a nice descriptive exception)
2018-11-08T17:47:19 #rust-wasm <fitzgen> acrichto: yoshuawuyts: https://github.com/rustwasm/wasm-bindgen/issues/1017
2018-11-08T17:48:48 #rust-wasm <yoshuawuyts> fitzgen: would there also need to be an issue for "document error (conversion) patterns", or is there already an issue for that?
2018-11-08T17:49:13 #rust-wasm <fitzgen> yoshuawuyts: we don't have an issue for that in particular
2018-11-08T17:49:26 #rust-wasm <fitzgen> we also have https://rustwasm.github.io/wasm-bindgen/reference/types/result.html
2018-11-08T17:54:14 #rust-wasm <yoshuawuyts> fitzgen: oh nice! Yeah, that's helpful!
2018-11-08T17:55:50 #rust-wasm <fitzgen> great :)
2018-11-08T18:07:21 #rust-wasm <fitzgen> acrichto: https://github.com/rustwasm/wasm-bindgen/issues/1018
2018-11-08T18:08:02 #rust-wasm <acrichto> fitzgen: :+1:
2018-11-08T18:10:09 #rust-wasm <acrichto> fitzgen: btw, how should I handle the video recording?
2018-11-08T18:10:40 #rust-wasm <fitzgen> acrichto: send to ashley eventually, she has the youtube credentials
2018-11-08T18:11:13 #rust-wasm <acrichto> mk
2018-11-08T18:29:24 #rust-wasm <Devin> Hi folks, is there a faster way to build a vector from a UIntClampedArray than the for_each method provided by js_sys?
2018-11-08T18:32:50 #rust-wasm <fitzgen> Devin: in the general case, I don't think so; maybe using Reflect::get is faster than for each
2018-11-08T18:33:18 #rust-wasm <fitzgen> Devin: if you can skip the UintClampedArray completely and just work with slices in linear memory, that is likely faster
2018-11-08T18:59:37 #rust-wasm <Devin> fitzgen: the Uint is coming from canvas data, but perhaps this can be fed into the linear memory, and then I can use the slices method?
2018-11-08T21:36:59 #rust-wasm <fitzgen> Devin: not sure I follow, would need to see an example
2018-11-08T21:37:28 #rust-wasm <fitzgen> acrichto: using --no-demangle as an initial config option, do you have opinions on how to test this
2018-11-08T21:37:29 #rust-wasm <fitzgen> ?
2018-11-08T21:38:08 #rust-wasm <fitzgen> acrichto: only ways I can think up to test whether this is actually respected is if we pull in wasm-nm or something
2018-11-08T21:42:55 #rust-wasm <acrichto> fitzgen: hm I'd actually test it by passing `--not-an-argument`
2018-11-08T21:43:01 #rust-wasm <acrichto> and then asserting the error has `--no-an-argument` somewhere in it
2018-11-08T21:45:04 #rust-wasm <fitzgen> acrichto: hm. so this would work if we were doing an escape hatch array of CLI args
2018-11-08T21:45:15 #rust-wasm <fitzgen> acrichto: what I have been doing is a structured object
2018-11-08T21:45:35 #rust-wasm <acrichto> ?
2018-11-08T21:46:24 #rust-wasm <fitzgen> acrichto: https://gist.github.com/fitzgen/61df3d6d7894701e1daf7cc8db75fb6d
2018-11-08T21:46:59 #rust-wasm <acrichto> hm...
2018-11-08T21:47:07 #rust-wasm <acrichto> you don't think we should do strings?
2018-11-08T21:47:14 #rust-wasm <acrichto> (I liked that idea for the other tools)
2018-11-08T21:47:27 #rust-wasm <acrichto> although I could see how structured makes more sense for wasm-bindgen which has a much more restricted set of options
2018-11-08T21:47:45 #rust-wasm <acrichto> with structured objects, I'd test this via the --debug flag
2018-11-08T21:47:54 #rust-wasm <acrichto> by doing the opposite and violating it
2018-11-08T21:47:58 #rust-wasm <acrichto> and making sure the right error shows up
2018-11-08T21:48:12 #rust-wasm <acrichto> like turn off debug in the dev profile and then run `wasm-pack test` and assure a debug violation passes
2018-11-08T21:48:41 #rust-wasm <fitzgen> I am generally pro structured obejcts for common config but with escape hatch for random things we don't support
2018-11-08T21:49:00 #rust-wasm <acrichto> eh seems fine by me
2018-11-08T21:49:04 #rust-wasm <acrichto> we can always support everything if we want
2018-11-08T22:31:22 #rust-wasm <fitzgen> acrichto: so the --no-demangle flag is def broken
2018-11-08T22:31:25 #rust-wasm <fitzgen> we always demangle
2018-11-08T22:34:30 #rust-wasm <fitzgen> actually you know what
2018-11-08T22:34:33 #rust-wasm <fitzgen> this is rustc doing this
2018-11-08T22:53:18 #rust-wasm <fitzgen> acrichto: tiny pr for you: https://github.com/rustwasm/wasm-bindgen/pull/1020
2018-11-08T22:56:18 #rust-wasm <acrichto> fitzgen: r=me
2018-11-08T22:56:27 #rust-wasm <acrichto> also weird about no-demangle, I don't think rustc does any of that
2018-11-08T22:56:31 #rust-wasm <acrichto> in that rustc shouldn't demangle for you
2018-11-08T22:56:41 #rust-wasm <acrichto> I'll try to take a look
2018-11-08T22:56:46 #rust-wasm <acrichto> I wouldn't be surprised if wasm-bindgen's option didn't work
2018-11-08T22:57:20 #rust-wasm <fitzgen> acrichto: I can repro demangled name sesctions with just `cargo build --target w32-u-u`
2018-11-08T22:57:40 #rust-wasm <acrichto> wtf
2018-11-08T22:57:48 #rust-wasm <acrichto> omg
2018-11-08T22:57:51 #rust-wasm <acrichto> that's not good
2018-11-08T22:57:55 #rust-wasm <acrichto> that means lld is demangling
2018-11-08T22:58:00 #rust-wasm <acrichto> we don't want that
2018-11-08T22:58:05 #rust-wasm <acrichto> b/c lld only implements C++ demangling
2018-11-08T22:58:10 #rust-wasm <acrichto> oh dear, I'll look more into this
2018-11-08T23:10:42 #rust-wasm <acrichto> fitzgen: hm so lld has a --no-demangle option
2018-11-08T23:10:48 #rust-wasm <acrichto> and it does not appear to prevent demangling
2018-11-08T23:11:07 #rust-wasm <fitzgen> sbc100: ^ do you happen to know if a bug is already on file?
2018-11-08T23:16:59 #rust-wasm <acrichto> ah it looks like this is missing a guard -- https://github.com/llvm-mirror/lld/blob/4925db16408f6438a5dc275482b256ccf10e50e1/wasm/Writer.cpp#L557-L558
2018-11-08T23:17:33 #rust-wasm <acrichto> unlike this -- https://github.com/llvm-mirror/lld/blob/4925db16408f6438a5dc275482b256ccf10e50e1/wasm/Symbols.cpp#L229-L231
2018-11-08T23:18:17 #rust-wasm <fitzgen> acrichto: I can whip up a patch really quick if you don't have a checkout available
2018-11-08T23:18:42 #rust-wasm <acrichto> fitzgen: oh lemme test one out
2018-11-08T23:18:53 #rust-wasm <acrichto> I never really quite figured out how to submit a patch though
2018-11-08T23:36:13 #rust-wasm <acrichto> fitzgen: sbc100: https://reviews.llvm.org/D54279
2018-11-08T23:36:23 #rust-wasm <fitzgen> acrichto++
2018-11-09T09:03:03 #rust-wasm <mldbdlwhb> what's up
2018-11-09T18:45:59 #rust-wasm <Devin> fitzgen: hi, sorry for the confusing message. this paste (https://pastebin.com/Yzv0TN4g) should help demonstrate what I'm currently doing with the canvas data. I think I need to read up on the ideas surrounding wasm-memory, and perhaps then I'll be able to connect the dots.
2018-11-09T20:44:50 #rust-wasm <fitzgen> Devin: have you seen https://rustwasm.github.io/wasm-bindgen/reference/types/number-slices.html ? I think you should be able to just treat the inputs as slices in the rust functions youre exporting
2018-11-09T20:57:01 #rust-wasm <quarkstone> Hey folks. Just wondering if there's something similar to stdweb js! macro in wasm-bindgen
2018-11-09T20:58:08 #rust-wasm <quarkstone> Also, what's the best strategy to inherit an es6 class that's defined in javascript?
2018-11-09T21:01:03 #rust-wasm <quarkstone> asically, I'd like to inherit HTMLElement and write a Custom Element, with the standard "connectedCallback", "attributesChanged" etc, methods.. I'm wondering how to do this in rust.
2018-11-09T21:01:07 #rust-wasm <quarkstone> *Basically
2018-11-09T21:04:48 #rust-wasm <acrichto> quarkstone: hello! currently there's no js! alternative to write inline-js in wasm-bindgen right now, but it in theory should be possible to build externally! (we've talked about hoping to build stdweb on top of wasm-bindgen in the long run)
2018-11-09T21:05:22 #rust-wasm <acrichto> in the meantime there's also unofrtunately no way to inherit from a JS class with your exported JS class from rust, and that's tracked by https://github.com/rustwasm/wasm-bindgen/issues/210
2018-11-09T21:05:35 #rust-wasm <acrichto> fitzgen has thought about the custom element support pieces before though too!
2018-11-09T21:07:00 #rust-wasm <fitzgen> quarkstone: for custom elements, you probably want to actually have the subclass of the html element be a JS thing, have its onConnect hook instantiate a rust+wasm struct, and have its onDisconnect hook destroy and free that rust+wasm struct
2018-11-09T21:07:17 #rust-wasm <fitzgen> instead of having the rust+wasm struct be the thing that actually subclasses the html element
2018-11-09T21:07:53 #rust-wasm <fitzgen> till: do you happen to have that hello world custom element we made around? could you throw it in a gist or something?
2018-11-09T21:09:12 #rust-wasm <quarkstone> acrichto: thanks for the quick response! That's interesting. I'm also curious as to how it's actually implemented in stdweb, and what sort of a performance the language boundary takes, since js! macro is used everywhere in stdweb currently. 
2018-11-09T21:09:48 #rust-wasm <quarkstone> fitzgen: thanks! that makes sense. And yes, would be great to see the sample!
2018-11-09T21:09:51 #rust-wasm <quarkstone> :)
2018-11-09T21:10:38 #rust-wasm <acrichto> quarkstone: fwiw from historical measurements I've seen the js! macro has a pretty significant overhead wrt the boundary in both js and rust
2018-11-09T21:11:38 #rust-wasm <quarkstone> Basically, I just wrote this Custom Elements wrapper in js: https://github.com/prasannavl/litecomponent#api -- I'm trying to see if I could implement the same model in rust, so I can have the custom component purely inside rust. 
2018-11-09T21:13:14 #rust-wasm <quarkstone> So, the best strategy so far, is to implement a wrapper class in js, and then call into rust for each of it's methods? Am I correcting in assuming as probably the most reasonable impl at this time? 
2018-11-09T21:14:33 #rust-wasm <fitzgen> quarkstone: yes, thats the best strategy; it is also nice because the lifecycle hooks are perfect for managing the rust+wasm struct's lifetime
2018-11-09T21:16:42 #rust-wasm <quarkstone> Is there a better way to call js "super" methods from the rust side, without writing more wrapper to pass them as a closure?
2018-11-09T21:18:04 #rust-wasm <quarkstone> acrichto: what makes me curious is: https://stefankrause.net/js-frameworks-benchmark8/table.html -- this has stdweb as one of the top performers
2018-11-09T21:20:45 #rust-wasm <quarkstone> I'm was so surprised that I wasn't sure if it was indeed the same stdweb benchmark -- but looks like it is, and it seems on par with vanilla js.
2018-11-09T21:21:45 #rust-wasm <quarkstone> or may the actual rust/wasm execution is so fast that it compensates for the boundary hits.. 
2018-11-09T21:34:06 #rust-wasm <fitzgen> acrichto: how do you feel about "debug-assertions" instead of "debug-js-glue"?
2018-11-09T21:35:34 #rust-wasm <quarkstone> --offtopic: rust-wasm irc doesn't have logs?
2018-11-09T21:36:57 #rust-wasm <quarkstone> just quickly restarted my system and came back to read past, but looks like there's no link to logs, which most other rust irc I've used has it. 
2018-11-09T21:37:05 #rust-wasm <fitzgen> quarkstone: there is logbot which goes somewhere...
2018-11-09T21:38:02 #rust-wasm <fitzgen> https://mozilla.logbot.info/rust-wasm
2018-11-09T21:38:56 #rust-wasm <quarkstone> ah. was just about to suggest that topic change. 
2018-11-09T21:54:48 #rust-wasm <fitzgen> acrichto: I'm not sure I follow your comment about serde, traits, and local_function
2018-11-09T22:03:04 #rust-wasm <acrichto> fitzgen: lol I'm not a great explainer, lemme make a gist
2018-11-09T22:03:22 #rust-wasm <fitzgen> acrichto: nvm, I think I got it after reading the serde docs a bit more
2018-11-09T22:09:02 #rust-wasm <acrichto> fitzgen: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=0bd40b7c239e54b2140e82759ac39637
2018-11-09T22:12:08 #rust-wasm <fitzgen> acrichto: oo thats nice to split it into two structs, I was just adding methods to hide `unwrap`s
2018-11-09T22:14:07 #rust-wasm <fitzgen> acrichto: hm but that doesn't really work super well for nested structs
2018-11-09T22:14:25 #rust-wasm <fitzgen> acrichto: because you lose info on whether you are dev vs profiling vs release at that level
2018-11-09T22:14:38 #rust-wasm <fitzgen> so I think maybe hiding unwraps actually is the way to go
2018-11-09T22:20:06 #rust-wasm <acrichto> wut
2018-11-09T22:20:09 #rust-wasm <acrichto> hiding unwraps?
2018-11-09T22:20:49 #rust-wasm <acrichto> oh I se
2018-11-09T22:20:57 #rust-wasm <acrichto> nah yeah I really like that about the way the patch is today
2018-11-09T22:21:05 #rust-wasm <acrichto> how there's no Option to unwrap anywhere and it's always a valid config
2018-11-09T22:21:12 #rust-wasm <fitzgen> acrichto: https://gist.github.com/fitzgen/af9e979b962bbcd38a1c1583d6f329dc
2018-11-09T22:21:53 #rust-wasm <acrichto> ah yeah
2018-11-09T22:22:03 #rust-wasm <acrichto> oh and in my gist
2018-11-09T22:22:05 #rust-wasm <acrichto> instead of let config = ProfileConfigToml::deserialize(d)?;
2018-11-09T22:22:13 #rust-wasm <acrichto> you'll want let config = <Option<ProfileConfigToml>>::deserialize(d)?;
2018-11-09T22:22:24 #rust-wasm <acrichto> to avoid the need for #[serde(deafult)] on each field I think
2018-11-09T22:22:32 #rust-wasm <acrichto> (b/c the default should be calculated by the function)
2018-11-09T22:22:49 #rust-wasm <acrichto> but you could then .unwrap_or(ProfileConfigToml::deafult()) which has a lot of NOne in it
2018-11-10T21:55:03 #rust-wasm <Devin> fitzgen: Reading the number slices document now! Looks like its on the right track for my purpose. Ty for the referral
2018-11-10T22:10:04 #rust-wasm <Devin> fitzgen: that was the tiniest change ever and my package just sped up by about 500x. I think you might have made my day hahaha. 
2018-11-10T22:11:30 #rust-wasm <Devin> thhanks!
2018-11-11T00:22:40 #rust-wasm <toph> hey guys, what's the recommended way to generate both a js package and a rust crate?
2018-11-11T00:39:54 #rust-wasm <toph> nvm I found the relevant docs here: https://rustwasm.github.io/book/reference/add-wasm-support-to-crate.html
2018-11-11T09:49:04 #rust-wasm <dakom> I have `extern crate web_sys;` in my lib.rs and then I try and use `use web_sys::console` in game.rs but it doesn't find it...
2018-11-11T10:21:08 #rust-wasm <drager> dakom: Show some more code :) 
2018-11-11T10:27:26 #rust-wasm <dakom> ah thought this channel was idle so just raised it in #rust-beginners
2018-11-11T10:27:55 #rust-wasm <dakom> it's really just erroring out on `use web_sys::console` as well as `let window = web_sys::window().unwrap();`
2018-11-11T10:28:25 #rust-wasm <dakom> Cargo.toml has [dependencies] wasm-bindgen = "0.2.27" web-sys = "0.3.4" js-sys = "0.3.4"
2018-11-11T10:32:10 #rust-wasm <drager> Edition 2015? No edition = 2018 in your Cargo.toml?
2018-11-11T10:35:54 #rust-wasm <dakom> just set "edition = '2018'" to Cargo.toml ... still doesn't work
2018-11-11T10:36:34 #rust-wasm <drager> No, I was just wondering which version you were on. I.e. 2015 or 2018
2018-11-11T10:36:51 #rust-wasm <drager> But if you didn't have any edition = 2018 in your Cargo.toml, then you're on 2015
2018-11-11T10:37:05 #rust-wasm <drager> Do you have any repo somewhere?
2018-11-11T10:37:29 #rust-wasm <dakom> Sure I can push latest changes... one min
2018-11-11T10:38:26 #rust-wasm <dakom> in an in-between stage but you'll get the idea: https://github.com/dakom/web-menorah
2018-11-11T10:38:54 #rust-wasm <dakom> for example this is an error: https://github.com/dakom/web-menorah/blob/master/src/lib.rs#L10
2018-11-11T10:39:09 #rust-wasm * drager looks
2018-11-11T10:41:03 #rust-wasm <dakom> sorry it's not a quick clone because I committed the blender file... I'll probably totally wipe the repo and start from scratch once I get the basics working ;)
2018-11-11T10:42:52 #rust-wasm <drager> No worries
2018-11-11T10:49:06 #rust-wasm <drager> dakom: To use web_sys::window() you need to have the "Window" feature
2018-11-11T10:49:22 #rust-wasm <drager> Like this: [dependencies.web-sys]
2018-11-11T10:49:33 #rust-wasm <drager> features = ["Window"]
2018-11-11T10:49:47 #rust-wasm <dakom> interesting... same for console?
2018-11-11T10:51:08 #rust-wasm <drager> Not sure yet about console
2018-11-11T10:52:41 #rust-wasm <dakom> ok but cool - I see an example here: https://gitlab.com/medusacle/wasm-game-of-life/blob/master/Cargo.toml
2018-11-11T10:52:44 #rust-wasm <dakom> thanks!
2018-11-11T10:57:40 #rust-wasm <drager> Right, so you need "console" as well :)
2018-11-11T10:59:25 #rust-wasm <dakom> +1
2018-11-11T11:01:50 #rust-wasm <drager> Good luck with your project and feel free to ask more questions here if you're wondering something :)
2018-11-11T11:02:27 #rust-wasm <dakom> :D
2018-11-11T11:05:03 #rust-wasm <drager> ag_dubs, fitzgen, acrichto: Any issue that needs help that I could work on since my PR is done?
2018-11-11T11:24:57 #rust-wasm <dakom> sorta meta-question but what are you using as an editor? VSCode with the official (rls-based) extension is soo slow...
2018-11-11T11:36:05 #rust-wasm <drager> I switched from that to nvim with https://github.com/autozimu/LanguageClient-neovim
2018-11-11T11:42:58 #rust-wasm <dakom> hah I had recently switched from neovim to vscode for typescript stuff. Happy to be back in neovim...
2018-11-11T11:43:14 #rust-wasm <dakom> you get autocomplete and doc references and all that?
2018-11-11T12:49:06 #rust-wasm <drager> dakom: Yeah I do get those
2018-11-11T12:49:20 #rust-wasm <drager> "hover" for types as well
2018-11-11T12:49:45 #rust-wasm <drager> hover without the mouse that is
2018-11-11T12:50:56 #rust-wasm <drager> dakom: I use LanguageClient with typescript as well
2018-11-11T12:52:50 #rust-wasm <dakom> cool installing now :)
2018-11-11T15:04:14 #rust-wasm <fitzgen> drager: the serde_ignore issue could be a good one!
2018-11-11T15:04:26 #rust-wasm <fitzgen> drager: https://github.com/rustwasm/wasm-pack/issues/443
2018-11-11T15:07:17 #rust-wasm <dakom> can I convert a JsValue to a struct like `pub struct Area {width: f64, height: f64}` ?
2018-11-11T15:17:39 #rust-wasm <dakom> oh I see that is actually with serde :)
2018-11-11T15:26:55 #rust-wasm <drager> fitzgen: Will take a look, thanks!
2018-11-12T17:13:29 #rust-wasm <acrichto> fitzgen: lemme know when you got a sec and we can chat wasm-pack test and wasm-bindgen-test-runner stuff
2018-11-12T17:13:34 #rust-wasm <acrichto> node/browsers/etc
2018-11-12T20:47:50 #rust-wasm <drager> fitzgen: Got a PR up for #443 https://github.com/rustwasm/wasm-pack/pull/446
2018-11-12T20:48:06 #rust-wasm <drager> If that was what you had in mind
2018-11-13T19:22:59 #rust-wasm <mirac> hello... i´m new to rust an wasm... just playing and can´t find any information about some kind of wasm-modules...
2018-11-13T19:24:16 #rust-wasm <mirac> in sense splitting the .wasm in different files and fetch the parts when needed
2018-11-13T19:25:16 #rust-wasm <mirac> or to loading different filters for pictures as example
2018-11-13T19:25:27 #rust-wasm <mirac> ...wasm-filters...
2018-11-13T19:25:40 #rust-wasm <mirac> is something like this possible?
2018-11-13T19:57:45 #rust-wasm <drager> acrichto: I saw your comment about tests and I also want's to add some. I refactored the code a bit and wrote one test case that makes sense. However, I'm unused about making the structs public and using #[doc(hidden)] (I would appreceite your input here).
2018-11-13T19:58:00 #rust-wasm <drager> I'm unsure*
2018-11-13T19:58:17 #rust-wasm <drager> also, this function I added; https://github.com/rustwasm/wasm-pack/pull/446/files#diff-5c2320fb5a3ba8e4f25788039d44a109R285
2018-11-13T19:58:29 #rust-wasm <drager> I'm not sure how I would add a test case for that function...
2018-11-13T20:01:09 #rust-wasm <acrichto> drager: eh I think it's ok to not have a test for now
2018-11-13T20:01:21 #rust-wasm <acrichto> in genral wasm-pack doesn't have manhy tests for its cli output right now 
2018-11-13T20:01:22 #rust-wasm <drager> mirac: Hey! IIRC it's not possible to split into more modules
2018-11-13T20:01:24 #rust-wasm <acrichto> so adding a new one is tough
2018-11-13T20:02:11 #rust-wasm <drager> Yeah, I looked through some other tests and couldn't find much that did that kind of testing.
2018-11-13T20:02:19 #rust-wasm <acrichto> right yeah
2018-11-13T20:02:24 #rust-wasm <acrichto> it's ok to skip the test for now
2018-11-13T20:02:29 #rust-wasm <acrichto> when the infrastructure is in place we can circle back
2018-11-13T20:02:35 #rust-wasm <drager> Ok cool!
2018-11-13T20:05:10 #rust-wasm <drager> Ah, now I get your comment about "at this time easily do that". I thought you meant the code I added :D (Which was hard to test)
2018-11-13T20:05:37 #rust-wasm <acrichto> oh sorry yeah
2018-11-13T20:06:23 #rust-wasm <drager> No problem, it needed some refactoring, so it was good! :)
2018-11-13T20:11:42 #rust-wasm <mirac> drager: thx.
2018-11-13T20:51:08 #rust-wasm <drager> acrichto: I saw your comment. Would it be suitable to bring a crate in or should I try to write something from scratch for typo checking?
2018-11-13T20:52:19 #rust-wasm <acrichto> drager: looks like something along the lines of https://crates.io/crates/edit-distance could suffice
2018-11-13T20:52:36 #rust-wasm <acrichto> or maybe https://crates.io/crates/strsim
2018-11-13T20:54:23 #rust-wasm <drager> Yeah, I can bring in strsim. What would be a appropriate number to warn about?
2018-11-13T20:55:48 #rust-wasm <acrichto> I don't know myself, but some local testing should probably shows a small number is all that's needed
2018-11-13T20:57:28 #rust-wasm <drager> Alright, will try it out. Thanks
2018-11-13T21:01:47 #rust-wasm <drager> Yeah, 1 will probably due 
2018-11-13T21:45:43 #rust-wasm <drager> Last push for tonight, hope that was somewhat what you were thinking acrichto 
2018-11-13T21:46:09 #rust-wasm <drager> (in the latest commit that is)
2018-11-14T10:14:04 #rust-wasm <aep4> yo. whats an efficient way of sharing alot of data between a worker and the main thread?
2018-11-14T17:06:10 #rust-wasm <frehberg> hi, can somebody explain me, why the start-component is no longer added to the wasm-output?? Input is a new project of "crate new "
2018-11-14T17:38:11 #rust-wasm <frehberg> Hi, it seems, the rust-nightly does not add a start-component into the wasm-output , although input-file is an app with main-function!! Any idea!?
2018-11-14T17:39:35 #rust-wasm <frehberg> I am expecting a start-component in the wasm-file pointing to the root-function to start with exection
2018-11-14T17:41:05 #rust-wasm <drager> acrichto: I'm not really sure I understand this comment correctly; https://github.com/rustwasm/wasm-pack/pull/446#discussion_r233311804
2018-11-14T17:42:37 #rust-wasm <drager> Could you elaborate?
2018-11-14T17:55:03 #rust-wasm <frehberg> drager: the start-issue?
2018-11-14T17:59:16 #rust-wasm <drager> frehberg: It was meant to acrichto 
2018-11-14T20:36:52 #rust-wasm <acrichto> drager: it looks like by setting a boolean some ignored keys are dropped on the floor and not warned about, or the exact key isn't recorded to be warned about, I think it'd be better to keep a vector of all unused keys and warn about all of them, regardless of what they are or whether they're close to `wasm-pack` or exact
2018-11-14T20:39:40 #rust-wasm <drager> Hmm, but we should only warn about all the keys that are specified for `wasm-pack`, right? I.e: [package.metadata.wasm-pack.xxx]
2018-11-14T20:42:12 #rust-wasm <drager> I mean, we can't warn about the keys that are the following? [package.metadata.wasmPACK.xxx] In this case we can only warn about typo
2018-11-14T20:44:11 #rust-wasm <acrichto> drager: sorry I think what I'm saying is being misinterpreted
2018-11-14T20:44:31 #rust-wasm <acrichto> so the original patch which warns about all unused keys can't land because it warns about metdaata sections for other tools
2018-11-14T20:45:01 #rust-wasm <acrichto> I would personally start off by largely just ignoring all other sections and not doing string similarity or trying to catch `wasm_pack` for example
2018-11-14T20:45:06 #rust-wasm <acrichto> we can see how much of a problem it is in practice
2018-11-14T20:45:14 #rust-wasm <acrichto> it sounds, though, like you want to handle this case where `wasm_pack` is warned about
2018-11-14T20:45:25 #rust-wasm <acrichto> if that's the case, then we should warn about everything uniformly
2018-11-14T20:45:41 #rust-wasm <acrichto> there doesn't need to be a one-off special path for warning for misspelled things and another for keys under `wasm-pack`
2018-11-14T20:46:47 #rust-wasm <drager> Oh I see what you mean now
2018-11-14T20:48:47 #rust-wasm <drager> Might have been me that was slow and did not follow what you were saying :P
2018-11-14T20:49:39 #rust-wasm <drager> But, would string similarity be a good approach or should I go another direction?
2018-11-14T20:50:43 #rust-wasm <acrichto> having it is fine, I just wouldn't personally include it to start off with
2018-11-14T20:50:47 #rust-wasm <acrichto> if you want to though there's nothing wrong with that
2018-11-14T20:54:03 #rust-wasm <drager> Alright
2018-11-14T20:54:37 #rust-wasm <drager> Appreceite the feedback and help acrichto
2018-11-14T21:00:19 #rust-wasm <drager> Now I think I got something that should work as discussed
2018-11-15T08:03:18 #rust-wasm <drager> I wonder when these bots will stop trying? Same behavior and phrase almost every time...
2018-11-15T10:54:29 #rust-wasm <frehberg> please, can anybody tell me plans for repo wasmtime? will it become a jitting library frontend for cranelift?
2018-11-15T16:09:10 #rust-wasm <frehberg> hi, does anybody know about future of wasmtime, will it become library wrapper of cranelift?
2018-11-15T16:40:18 #rust-wasm <sunfish> frehberg: yes, the plan is to build a standalone wasm runner built on cranelift
2018-11-15T16:40:44 #rust-wasm <sunfish> usable as either a library or executable
2018-11-15T16:55:27 #rust-wasm <acrichto> join us in 5 minutes for the rustwasm working group meeting at https://zoom.us/j/625862582 !
2018-11-15T16:57:40 #rust-wasm <drager> 🙏
2018-11-15T17:23:05 #rust-wasm <drager> I forgot to ask during the meeting but what's the status for this PR? https://github.com/rustwasm/wasm-pack/pull/415
2018-11-15T20:08:55 #rust-wasm <soarh> hi! i'm looking for some guidance on a wasm-bindgen fork i made. it lets you use wasm-bindgen to export a typescript type definition of a complex enum, without generating any corresponding JS. this makes serializing/deserializing with serde type-safe and easy.
2018-11-15T20:09:06 #rust-wasm <soarh> idk if irc strips urls, but here is the example: https://gist.github.com/tcr/9984ab3755c8a40788c985dc85d7ef18
2018-11-15T20:10:07 #rust-wasm <soarh> it works, it uses the made up annotation "tagged_union" which can be changed, is there interest upstream for an annotation just for exporting type definitions?
2018-11-16T13:39:20 #rust-wasm <heeen> hi, can someone enlighten me how wasm-bindgen and stdweb relate
2018-11-16T13:39:59 #rust-wasm <heeen> are they different implementations of the same thing, does one build on top of the other, which is more lighweight or more fully featured or mature
2018-11-16T13:41:02 #rust-wasm <heeen> also, when using target wasm32-unknown-unknown does it still use emscripten? at least when using stdweb and built without the target param it links with cc and is missing some emscripten symbols
2018-11-16T13:42:10 #rust-wasm <heeen> I am trying to build a web app from some native framework that hosts the wasm client side part and is built from the same source tree
2018-11-16T13:42:10 #rust-wasm <sebk> no
2018-11-16T13:42:25 #rust-wasm <sebk> wasm32-unknown-unknown requires nothing else
2018-11-16T13:42:50 #rust-wasm <sebk> stdweb however might assume emscripten
2018-11-16T13:42:58 #rust-wasm * sebk does not know
2018-11-16T13:43:08 #rust-wasm <heeen> so my target is browser, not node. do I still need wasm-pack?
2018-11-16T13:44:09 #rust-wasm <sebk> afaik no…
2018-11-16T13:44:20 #rust-wasm <sebk> but I am most definitly  not up to date
2018-11-16T17:02:20 #rust-wasm <soarh> you don't need wasm-pack for the browser
2018-11-16T17:02:32 #rust-wasm <soarh> @heeen i recommend webpack for sure
2018-11-16T17:04:00 #rust-wasm <soarh> i haven't used stdweb (only js-sys and web-sys) but its README claims wasm32-unknown-unknown is supported, but only when using something called cargo-web
2018-11-16T17:04:15 #rust-wasm <soarh> wasm-bindgen out of the box does not link to emscripten at all afaik
2018-11-17T19:12:14 #rust-wasm <heeen> how come my wasm output is hundreds of kilobytes to over a megabyte for debug
2018-11-17T19:12:19 #rust-wasm <heeen> it only has one function
2018-11-17T19:13:12 #rust-wasm <heeen> the docs say it should be less than 1kb
2018-11-17T19:13:30 #rust-wasm <heeen> https://rustwasm.github.io/wasm-bindgen/examples/add.html
2018-11-17T21:38:01 #rust-wasm <cab> is there some way to represent "userdata"? aka something similar to "Arbitary Data with Serde", but I want to pass along methods as well?
2018-11-17T21:40:24 #rust-wasm <cab> in other words, if i have "#[wasm_bindgen] impl MyImpl", is there some way to have an extern binding that accepts any type (that has bindings)?
2018-11-18T01:07:02 #rust-wasm <gsthv> hi, someone here is from brazil?
2018-11-18T01:07:10 #rust-wasm <gsthv> ?
2018-11-18T02:22:52 #rust-wasm <cab> i overlooked the obvious solution, heh -- <T: Into<JsValue>> bounds solves it
2018-11-18T16:31:53 #rust-wasm <heeen> how do I set a dom callback that provides a parameter
2018-11-18T16:32:11 #rust-wasm <heeen> such as websocket.set_onerror
2018-11-18T21:18:25 #rust-wasm <heeen> how can I figure out the signature of a closure I can assign to a event handler
2018-11-18T21:18:44 #rust-wasm <heeen> like WebSocket set_onerror or set_onmessage
2018-11-18T21:30:23 #rust-wasm <heeen> where can I find all types that have the trait FromWasmAbi implemented
2018-11-19T18:13:36 #rust-wasm <soarh> heeen Honestly this is probably the easiest way https://github.com/rustwasm/wasm-bindgen/search?q=impl+FromWasmAbi&unscoped_q=impl+FromWasmAbi
2018-11-19T22:28:56 #rust-wasm <Armen138> hi
2018-11-19T22:33:39 #rust-wasm <Armen138> I'm playing around with wasm-pack, and I am wondering if there is a way to generate output that works with recent browser's native es6 module support. It seems the generated js uses import wasm from "wasmfile.wasm", which fails in chrome/firefox. I've found a way to do this by doing "wasm-pack build --target no-modules"
2018-11-19T22:33:51 #rust-wasm <Armen138> and then wrapping the result in an es6 module, but that can't be the "right" way, can it?
2018-11-20T00:14:45 #rust-wasm <Raticide> Strange lady bots
2018-11-20T06:22:54 #rust-wasm <drager> I'm happy to help out with anything if you need help with something. Just ping/assign me to let me know :)
2018-11-20T15:38:37 #rust-wasm <heeen> do Closures support other types than numbers by now?
2018-11-20T17:15:10 #rust-wasm <tyhuj>  https://www.youtube.com/watch?v=eAixvmgiwEw 
2018-11-20T17:15:14 #rust-wasm <tyhuj> impostor
2018-11-20T17:17:07 #rust-wasm <tyhuj> https://ballotpedia.org/Main_Page , http://www.forbes.com/billionaires/list/ , https://en.wikipedia.org/wiki/Royal_family#Royal_houses_and_dynasties , https://citymayors.com/ , http://www.tv.com/ , https://www.ibdb.com/ , https://www.sports-reference.com/
2018-11-20T17:17:49 #rust-wasm <tyhuj> https://wn.com/ , http://allafrica.com/ , https://news.google.com/ , https://www.africa.com/ , https://en.wikipedia.org/wiki/Category:Media_in_Africa
2018-11-20T17:19:29 #rust-wasm <tyhuj> http://50crime.com/Arizona , https://www.jailexchange.com/ , http://criminalfaces.com/ , https://www.policearrests.com/ , http://bustedmugshots.com/ , https://jailalert.com/updates/, https://arizona.arrests.org/ , http://www.bustedoffenders.com/ , http://www.mugshotsonline.com/ , https://www.policeone.com/ , http://www.rapsheets.org/
2018-11-20T17:20:48 #rust-wasm <tyhuj> Robert Morning, Anthony Warner, Jabrile Williams, Jan Gregor, Grant Olsen, Ellis Hawes, Bryant Moore, Lucas Field, Molly Sides, Whitney Petty, Ben Camp, Howard Cohen, Peter Griffiths
2018-11-20T18:55:20 #rust-wasm <stefanzo> Hello! I'm starting to tinker around with rust+wasm and will probably be asking a bunch of questions here -- hope that's okay!
2018-11-20T18:56:24 #rust-wasm <drager> Hey, that's totally okey!
2018-11-20T18:56:45 #rust-wasm <drager> Feel free to ask anything
2018-11-20T19:01:20 #rust-wasm <stefanzo> Thanks! First question -- does rust+wasm support the std::ops::Generator trait yet? I'd love to be able to export a struct that implements that trait so I can yield values that can get iterated over in JSland.
2018-11-20T19:02:40 #rust-wasm <stefanzo> (I just came across the Generator trait just now and I see that it's currently in nightly, so I think that answers my question.)
2018-11-20T19:19:18 #rust-wasm <drager> stefanzo: I'm not sure, sorry
2018-11-20T19:20:17 #rust-wasm <stefanzo> No worries! I was able to find some resources to help me understand the state of generators in Rust.
2018-11-20T19:21:43 #rust-wasm <drager> Great!
2018-11-20T20:10:43 #rust-wasm <stefanzo> Hello!
2018-11-20T20:16:36 #rust-wasm <drager> stefanzo: Most of them that just joins and types "Hi", "Hello", "Hey" or something like that and uses Mibbit are bots
2018-11-20T20:16:51 #rust-wasm <stefanzo> Ah, thanks.
2018-11-20T22:01:07 #rust-wasm <RustafaRAII> hey. where can i  find the doc about `start`? it seems to be used instead of `main` for wasm apps? https://github.com/utkarshkukreti/draco/blob/master/examples/counter.rs#L37-L38
2018-11-20T22:01:18 #rust-wasm <RustafaRAII> https://github.com/utkarshkukreti/draco/blob/master/src/app.rs#L72
2018-11-20T22:01:26 #rust-wasm <RustafaRAII> where is specified that THIS is the entry point?
2018-11-20T22:01:47 #rust-wasm <RustafaRAII> (not in draco)
2018-11-20T22:01:51 #rust-wasm <RustafaRAII> in wasm_bindgen?
2018-11-20T22:05:31 #rust-wasm <RustafaRAII> hm, why is the main function called `run` here? https://github.com/rustwasm/wasm-bindgen/blob/master/examples/console_log/src/lib.rs#L6-L7
2018-11-20T22:12:01 #rust-wasm <Alexendoo> RustafaRAII: It's just a name they chose as their entry point - https://github.com/utkarshkukreti/draco/blob/master/examples/jfb.html#L11 and https://github.com/rustwasm/wasm-bindgen/blob/master/examples/console_log/index.js#L6
2018-11-20T22:12:07 #rust-wasm <RustafaRAII> ah: https://github.com/rustwasm/wasm-bindgen/issues/74#issue-308083300  "Currently, the only way to execute rust code is via exposing a function and then calling it on js side."
2018-11-20T22:12:22 #rust-wasm <RustafaRAII> https://github.com/utkarshkukreti/draco-starter/blob/master/index.html#L10
2018-11-20T22:12:47 #rust-wasm <RustafaRAII> Alexendoo: thanks!
2018-11-20T22:13:47 #rust-wasm <RustafaRAII> Alexendoo: and where is specified that a <foo>_bg.wasm file should be generated instead of <foo>.wasm?
2018-11-20T22:21:14 #rust-wasm <Alexendoo> RustafaRAII: I'm not sure, maybe something to do with that rake file
2018-11-20T22:21:36 #rust-wasm <RustafaRAII> Alexendoo: which rake file?
2018-11-20T22:22:32 #rust-wasm <Alexendoo> https://github.com/utkarshkukreti/draco/blob/master/Rakefile
2018-11-20T22:23:40 #rust-wasm <RustafaRAII> Alexendoo: that just generates the index.html files for all examples, no?
2018-11-20T22:23:52 #rust-wasm <RustafaRAII> it's not executed when building draco-starter
2018-11-20T22:24:19 #rust-wasm <RustafaRAII> btw, do you know how draco compares to ruukh currently?
2018-11-20T22:24:26 #rust-wasm <RustafaRAII> https://github.com/csharad/ruukh
2018-11-20T22:24:30 #rust-wasm <Alexendoo> I haven't used either myself
2018-11-20T22:24:56 #rust-wasm <RustafaRAII> Alexendoo: are you aware of other rust wasm frontend frameworks other than yew?
2018-11-20T22:25:28 #rust-wasm <Alexendoo> Depends if you count stdweb as a framework or not
2018-11-20T22:25:34 #rust-wasm <RustafaRAII> not really
2018-11-20T22:25:49 #rust-wasm <RustafaRAII> i count it as a library
2018-11-20T22:27:38 #rust-wasm <Alexendoo> Oh wait the _bg.wasm comes from wasm bindgen
2018-11-20T22:27:44 #rust-wasm <RustafaRAII> ah
2018-11-20T22:27:58 #rust-wasm <RustafaRAII> is it the streaming version of the wasm file?
2018-11-20T22:28:04 #rust-wasm <RustafaRAII> streamingly compiled
2018-11-20T22:30:34 #rust-wasm <Alexendoo> It's the result of running wasm bindgen, typically you would load the js file it emits that loads the wasm file for you, but they're using --no-modules which I guess works differently
2018-11-20T22:31:28 #rust-wasm <Alexendoo> Streaming compilation is how the browser loads it, e.g. compared to waiting until the whole file is downloaded, not a property of wasm files themselves
2018-11-20T22:50:22 #rust-wasm <RustafaRAII> Alexendoo: but will the resulting wasm file be streamingly compiled by default when generated by wasm-bindgen?
2018-11-20T22:50:54 #rust-wasm <RustafaRAII> iow,  would this use streaming compilation? https://github.com/utkarshkukreti/draco-starter/blob/master/index.html#L10
2018-11-20T22:52:31 #rust-wasm <Alexendoo> That depends on what the DracoStarter function does
2018-11-20T22:52:51 #rust-wasm <RustafaRAII> Alexendoo: https://github.com/utkarshkukreti/draco-starter/blob/master/Makefile#L3
2018-11-20T22:54:43 #rust-wasm <Alexendoo> I'm not at a thing with rust on it right now, but if you run the demo and look in the generated JS look for WebAssembly.instantiateStreaming or WebAssembly.compileStreaming
2018-11-20T22:55:06 #rust-wasm <RustafaRAII> ok, thanks!
2018-11-20T22:55:10 #rust-wasm <Alexendoo> Those are the streaming variants, the non streaming ones are WebAssembly.compile and WebAssembly.instantiate
2018-11-20T22:56:04 #rust-wasm <RustafaRAII> ok
2018-11-21T04:51:23 #rust-wasm <Devin> Hi there! I hit a good productive stride with these wasm tools recently, but now have experienced memory leak problems for the first time. My first suspicion is this is due to the return of Box<f32> from one of my impl methods. Is there a free command that I should be calling? I didn't post code because this just seemed like the most likely suspect. If anyone chimes in that I should begin looking else 
2018-11-21T04:51:29 #rust-wasm <Devin> where, I'll get back to y'all with a pastebin link. Thanks as always folks!
2018-11-21T05:01:28 #rust-wasm <Raticide> Shouldn't be possible to leak memory unless you're using `unsafe`
2018-11-21T06:16:49 #rust-wasm <drager> Devin: What makes you suspect memory leaks?
2018-11-21T18:16:55 #rust-wasm <dbrgn> hi all. how would I keep a state object on the rust side? can I return an opaque pointer to JS somehow?
2018-11-21T18:33:38 #rust-wasm <dbrgn> ah, I found https://github.com/jakedeichert/wasm-astar/issues/3. I think that helps.
2018-11-21T21:11:07 #rust-wasm <Devin> Raticide: hmm, that's good to know. 
2018-11-21T21:12:50 #rust-wasm <Devin> drager: just watching top while the program runs in the browser shows a steady increase in memory until the computer locks up. When I remove the places where my wasm module is getting used, the program holds pretty level at about 2-3% memory use for the WebContent process.
2018-11-21T21:24:35 #rust-wasm <Raticide> Well, you can always leak by holding onto a Vec or something that is getting constantly pushed onto, but it shouldn't be possible to leak memory you don't have a reference to.
2018-11-22T06:55:28 #rust-wasm <drager> Devin: I see. There's some tips here that are good; https://rustwasm.github.io/book/game-of-life/time-profiling.html
2018-11-22T09:40:40 #rust-wasm <dbrgn> I'm currently trying to write a "textarea with emoji support" by using a contenteditable div, sending the "keydown" event to rust through wasm, calculating the new state and then updating the DOM. is that a good approach?
2018-11-22T09:41:06 #rust-wasm <dbrgn> I thought about using a virtual dom library with diffing / patching support. I only found virtual-dom-rs so far. Is that a good choice? Are there others?
2018-11-22T11:35:58 #rust-wasm <chicoxyzzy> https://github.com/DenisKolodin/yew seems to be very popular
2018-11-22T18:14:15 #rust-wasm <mstange> fitzgen: is there documentation for how to use rust with wasm without wasm_bindgen? i.e. just the raw extern "C" <-> wasm parts?
2018-11-22T18:17:26 #rust-wasm <mstange> oh, it's thanksgiving in the US
2018-11-22T18:47:22 #rust-wasm <sebk> mstange: it is not actually difficult
2018-11-22T18:47:35 #rust-wasm <sebk> just … write the extern C parts as normal and compile it
2018-11-22T18:47:40 #rust-wasm <mstange> sebk: I'm not expecting it to be difficult :)
2018-11-22T18:47:58 #rust-wasm * sebk might have example…
2018-11-22T18:47:58 #rust-wasm <mstange> sebk: I'm mostly looking for a list of the supported types and what they map to, and about information on what happens if you don't use one of those types
2018-11-22T18:48:14 #rust-wasm <mstange> like, what happens if I try to return a repr(C) struct
2018-11-22T18:48:17 #rust-wasm <mstange> I could just try it
2018-11-22T18:48:33 #rust-wasm <sebk> u8/i8 … i32/u32
2018-11-22T18:48:39 #rust-wasm <sebk> you can't
2018-11-22T18:48:42 #rust-wasm <sebk> lol
2018-11-22T18:48:50 #rust-wasm <mstange> all right :)
2018-11-22T18:49:01 #rust-wasm <sebk> well. you *can*
2018-11-22T18:49:16 #rust-wasm <sebk> if you allocate space on the VM stack and pass a pointer to it…
2018-11-22T18:49:19 #rust-wasm <mstange> right
2018-11-22T18:49:31 #rust-wasm <sebk> but that requires knowing the calling convention and doing half of it manually
2018-11-22T18:49:33 #rust-wasm <sebk> -> no fun
2018-11-22T18:49:39 #rust-wasm <mstange> yeah
2018-11-22T18:50:03 #rust-wasm <sebk> wasm can only return numbers, really
2018-11-22T18:50:43 #rust-wasm <mstange> if I return a rust bool, does that become a wasm i32?
2018-11-22T18:50:58 #rust-wasm <sebk> dunno
2018-11-22T18:51:05 #rust-wasm <mstange> ok
2018-11-22T18:51:16 #rust-wasm <mstange> that's the type of information I was curious about
2018-11-22T18:51:41 #rust-wasm <sebk> it will do whatever rust thinks is appropriate…
2018-11-23T10:09:44 #rust-wasm <RustafaRAII> Alexendoo: if a rust crate links to a c lib, can it still be compiled to wasm?
2018-11-23T15:26:53 #rust-wasm <hoganhogan> hi all! I'm failing to compile some C++ code into a wasm-unknown-unknown cdylib. my build.rs does:
2018-11-23T15:26:53 #rust-wasm <hoganhogan>    cc::Build::new().cpp(true).file("foo.cpp").compile("libcpplib.a")
2018-11-23T15:26:53 #rust-wasm <hoganhogan> but when running 'cargo build --target wasm32-unknown-unknown' I get:
2018-11-23T15:26:53 #rust-wasm <hoganhogan>   rust-lld: error: unable to find library -lstdc++
2018-11-23T15:26:53 #rust-wasm <hoganhogan> there is a '-l stdc++ in the arguments of the rust-ldd invocation. am I being too stupid or is this unsupported or is this a bug? 
2018-11-25T05:15:17 #rust-wasm <guest28> is it possible to load the modules generated by wasm-bindgen without npm/webpack/other_js_build_system?
2018-11-25T05:16:45 #rust-wasm <guest28> I've got a .wasm produced by wasm-bindgen which when I wasm-objdump looks right, but the info I'm finding tends to handwave through the "run it" part stright to the "integrate it with your existing JS tooling", which in this case, I don't have, and don't really want.
2018-11-25T05:24:12 #rust-wasm <guest28> the generated shim seems to have 'import * as wasm from './n2_bg.wasm';
2018-11-25T05:24:23 #rust-wasm <guest28> which AIUI isn't a real way to load wasm
2018-11-25T05:26:42 #rust-wasm <guest28> where 'n2' is the name of the project
2018-11-25T07:03:41 #rust-wasm <fabrice> guest28: yes it's possible. See https://rustwasm.github.io/wasm-bindgen/examples/no-modules.html
2018-11-26T04:44:35 #rust-wasm <Devin> drager: thanks for the suggestion! It made me think to check the memory tab, and it looks like the arraybuffer for the wasm module's memory only increases. I see that the bindgen provides a free method on my wasm struct, but im not sure if its supposed to be used explicitly.
2018-11-26T14:31:28 #rust-wasm <frehberg> sunfish: now, with fuzz disabled, the script test-all.sh runs without error, but are there any tests being tested now?
2018-11-26T14:31:45 #rust-wasm <sunfish> no, there's not a lot being tested yet
2018-11-26T14:33:00 #rust-wasm <sunfish> i'm starting to work on getting actual tests running now
2018-11-26T14:33:53 #rust-wasm <sunfish> well, i'm working on wiring up a trap handler first, but then i want to look at tests
2018-11-26T19:21:07 #rust-wasm <stefanzo> Hello! Can anyone recommend any good resources/articles that detail how wasm execution fits into the browser rendering lifecycle?
2018-11-26T19:22:50 #rust-wasm <stefanzo> And does it seem practical to use a JS library like React to schedule/execute/coordinate Rust code exeuction so that the browser can efficiently render updates?
2018-11-26T19:53:28 #rust-wasm <mstallmo> So this might be kind of a weird question but does anyone know of a way to use a crate that has a lib-c dependency when targeting wasm?
2018-11-26T20:05:37 #rust-wasm <stefanzo> @mstallmo: The docs state that isn't supported at the moent: https://rustwasm.github.io/book/reference/which-crates-work-with-wasm.html#c-and-system-library-dependencies. You may be able to take that C library and compile it to wasm via Emscripten and call that wasm module from your code: https://rustwasm.github.io/wasm-bindgen/examples/wasm-in-wasm.html
2018-11-26T20:07:54 #rust-wasm <mstallmo> @stefanzo thanks for the links! I saw that it wasn't supported yet but was hoping for something that might be a work around. The Emscripten route seems interesting, thanks!
2018-11-26T20:51:06 #rust-wasm <fitzgen> ag_dubs: hey, any chance you could review this PR? https://github.com/rustwasm/create-wasm-app/pull/39 thanks :)
2018-11-26T20:51:37 #rust-wasm <ag_dubs> yeah totally! looking at it now
2018-11-26T20:52:32 #rust-wasm <fitzgen> thanks
2018-11-26T20:53:38 #rust-wasm <ag_dubs> lgtm!
2018-11-26T20:53:44 #rust-wasm <ag_dubs> want me to merge for u?
2018-11-26T20:53:50 #rust-wasm <fitzgen> ag_dubs: sure thing, thanks
2018-11-26T20:53:55 #rust-wasm <ag_dubs> :)
2018-11-26T23:32:51 #rust-wasm <luke> https://speakerdeck.com/_rvidal/the-road-to-webassembly-is-paved-with-rust
2018-11-27T03:58:47 #rust-wasm <solodolo> HELP
2018-11-27T04:51:50 #rust-wasm <mstange> fitzgen: you may find https://phabricator.services.mozilla.com/D13005 interesting - I'm using wasm to dynamically add a piece of functionality that most users don't need, so that I don't have to increase Firefox's download size
2018-11-27T19:06:45 #rust-wasm <acrichto> fitzgen: https://github.com/rust-lang/rust/issues/56292
2018-11-27T19:09:47 #rust-wasm <fitzgen> acrichto: so the stabilized *function* will still require that the memory argument be const?
2018-11-27T19:09:57 #rust-wasm <fitzgen> acrichto: that seems a little weird
2018-11-27T19:10:00 #rust-wasm <acrichto> fitzgen: correct yeah
2018-11-27T19:10:06 #rust-wasm <acrichto> it matches what we have for a lot of x86 intrinsics
2018-11-27T19:10:11 #rust-wasm <acrichto> right now it's done through some hackery in rustc
2018-11-27T19:10:20 #rust-wasm <acrichto> buteventually we'd like to flag it as `const x: i32` or something like that
2018-11-27T19:10:28 #rust-wasm <acrichto> the webassembly spec requires them to be constant though
2018-11-27T19:10:39 #rust-wasm <fitzgen> why not `trait Memory { const MEMORY_INDEX: usize; }`?
2018-11-27T19:10:41 #rust-wasm <acrichto> (b/c it's encoded into the instruction)
2018-11-27T19:10:54 #rust-wasm <acrichto> not a bad idea!
2018-11-27T19:11:04 #rust-wasm <fitzgen> I guess errors would be caught post-monomorphization
2018-11-27T19:11:06 #rust-wasm <acrichto> this is for now just matching x86/x86_64 
2018-11-27T19:11:13 #rust-wasm <acrichto> we could make it a sealed trait though
2018-11-27T19:11:31 #rust-wasm <fitzgen> I guess if this matches the other arch stuff, then whatever
2018-11-27T19:11:41 #rust-wasm <fitzgen> it seems weird to have this exception for certain functions
2018-11-27T19:11:51 #rust-wasm <acrichto> lol
2018-11-27T19:11:56 #rust-wasm <acrichto> "you're not wrong"
2018-11-27T19:12:00 #rust-wasm <fitzgen> indeed ;)
2018-11-27T19:12:11 #rust-wasm <fitzgen> acrichto: btw, I got Vec working on top of bumpalo
2018-11-27T19:12:12 #rust-wasm <acrichto> the spirit of these functions is that they're pretty low level so weirdness is semi-ok
2018-11-27T19:12:15 #rust-wasm <acrichto> oh nice
2018-11-27T19:12:54 #rust-wasm <fitzgen> it makes sense for intrinsics, not for actual functions, IMO; but I am happy to defer to relevant teams especially since x86 arch functions already have this behaviro
2018-11-27T19:14:15 #rust-wasm <acrichto> kk, may be worth comenting though!
2018-11-27T22:34:33 #rust-wasm <guest28> Is there a tutorial/example somewhere for registering callbacks with web-sys?
2018-11-27T22:40:04 #rust-wasm <Alexendoo> There's a couple in https://rustwasm.github.io/wasm-bindgen/examples/closures.html guest28 
2018-11-27T22:48:24 #rust-wasm <acrichto> fitzgen: long-term I think we need to remove `JsValue::NULL` and `JsValue::null()` in favor of `pub static JSVALUE_NULL: JsValue = ...;`
2018-11-27T22:48:38 #rust-wasm <acrichto> fitzgen: I'm realizing that we have a lot of hacks in the dtors to avoid running destructors for these values
2018-11-27T22:48:52 #rust-wasm <fitzgen> acrichto: sgtm
2018-11-27T22:48:54 #rust-wasm <acrichto> in that we should only run `JsValue::drop` for true heap values
2018-11-28T13:28:00 #rust-wasm <mvlabat> Hello everyone! Is current master version of wasm-bindgen working correctly? I want to make a contribution, but can’t test it on my project. The latest build (wirhout my changes) fails on crates/cli-support/src/decode.rs:8 assertion
2018-11-28T15:03:55 #rust-wasm <acrichto> mvlabat: hello! the master version should always be working but you have to depend on the git wasm-bindgen crate plus use the git wasm-bindgen  cli
2018-11-28T15:04:01 #rust-wasm <acrichto> (can't use the crates.io cli with the git crate)
2018-11-28T15:05:22 #rust-wasm <mvlabat> Thank! Yes, just discovered that myself as well ) I assume I have to do `cargo install wasm-bindgen-cli --path …`
2018-11-28T15:05:47 #rust-wasm <acrichto> mvlabat: yeah that can work, or just `cargo run --manifest-path ...`
2018-11-28T15:07:08 #rust-wasm <mvlabat> Yeah.. But as I’m testing it with parcel, I’m not sure I can do that )
2018-11-28T15:10:09 #rust-wasm <mvlabat> Btw, today I looked into https://github.com/rustwasm/wasm-bindgen/issues/1006
2018-11-28T15:10:28 #rust-wasm <mvlabat> I didn’t get `#[wasm_bindgen(js_name = default)]` applied to types working
2018-11-28T15:11:50 #rust-wasm <mvlabat> So I started working on possible fix. Wrote some code, that (as I expect) can fix the problem, but right now struggling with testing it )
2018-11-28T15:19:47 #rust-wasm <acrichto> mvlabat: ah ok! in that case yeah installing the cli should do the trick
2018-11-28T16:31:41 #rust-wasm <mvlabat> Oh… Parcel hangs on trying to build the compiled wasm. Though wasm-bindgen-cli seems to be working now
2018-11-28T16:32:32 #rust-wasm <mvlabat> Have no idea why that happens and how to debug it
2018-11-28T18:56:29 #rust-wasm <acrichto> fitzgen: ping
2018-11-28T18:58:02 #rust-wasm <fitzgen> acrichto: yo
2018-11-28T18:58:18 #rust-wasm <acrichto> fitzgen: do you feel like you've got a solid grasp on ES modules and initialization?
2018-11-28T18:58:28 #rust-wasm <acrichto> b/c I'm trying to add #[wasm_bindgen(start)] and it's... nontrivial
2018-11-28T18:58:34 #rust-wasm <fitzgen> not the phases of initialization, no
2018-11-28T18:58:40 #rust-wasm <acrichto> lol bah
2018-11-28T18:58:46 #rust-wasm <acrichto> midn being a rubber duck?
2018-11-28T18:58:49 #rust-wasm <fitzgen> acrichto: I'd ping linclark about it
2018-11-28T18:58:52 #rust-wasm <fitzgen> sure thing
2018-11-28T18:59:05 #rust-wasm <acrichto> so we have a fundamental circular relationship between the js glue and wasm 
2018-11-28T18:59:13 #rust-wasm <acrichto> where js wants to import the wasm to wrap the functions it exports
2018-11-28T18:59:16 #rust-wasm <fitzgen> wait
2018-11-28T18:59:22 #rust-wasm <fitzgen> it isn't fundamental
2018-11-28T18:59:25 #rust-wasm <acrichto> oh?
2018-11-28T18:59:30 #rust-wasm <fitzgen> we *could* emit two js glue files
2018-11-28T18:59:39 #rust-wasm <fitzgen> one for imports and one for exports
2018-11-28T18:59:41 #rust-wasm <fitzgen> right?
2018-11-28T18:59:51 #rust-wasm <acrichto> hm...
2018-11-28T18:59:54 #rust-wasm <acrichto> https://github.com/rustwasm/wasm-bindgen/issues/32#issuecomment-370113659
2018-11-28T18:59:59 #rust-wasm <acrichto> I'm trying to remember why I made that diagram
2018-11-28T19:00:05 #rust-wasm <acrichto> oh right
2018-11-28T19:00:09 #rust-wasm <acrichto> so let's say you call an imported function
2018-11-28T19:00:12 #rust-wasm <acrichto> which takes a string
2018-11-28T19:00:22 #rust-wasm <acrichto> the shim that we import in wasm also needsto reference the wasm's memory
2018-11-28T19:00:49 #rust-wasm <fitzgen> ah, yes
2018-11-28T19:00:57 #rust-wasm <acrichto> so clearly this makes initialization hard
2018-11-28T19:00:57 #rust-wasm <fitzgen> ok, there is fundamental circularity
2018-11-28T19:01:08 #rust-wasm <acrichto> and we've gotten away with it historically b/c there's barely any initialization
2018-11-28T19:01:13 #rust-wasm <acrichto> but let's say we want to bind the `start` function of wasm
2018-11-28T19:01:18 #rust-wasm <fitzgen> k
2018-11-28T19:01:19 #rust-wasm <acrichto> there's a question of when that aactually executes
2018-11-28T19:01:30 #rust-wasm <acrichto> becuause we can't really add a `start` function if all imports are inoperable
2018-11-28T19:01:43 #rust-wasm <acrichto> so I tweaked a few things
2018-11-28T19:01:47 #rust-wasm <acrichto> and I'm hitting a wall with webpack right now
2018-11-28T19:01:55 #rust-wasm <acrichto> and a possible wall with other systems
2018-11-28T19:02:07 #rust-wasm <acrichto> but in any case, the behavior I'm seeing is that you import the JS file
2018-11-28T19:02:12 #rust-wasm <acrichto> so that imports the wasm file
2018-11-28T19:02:19 #rust-wasm <acrichto> and then the wasm initialization runs (before the js initialization)
2018-11-28T19:02:31 #rust-wasm <acrichto> so then everything dies when you call imports because our cachedTextDecoder (for example) isn't initialized
2018-11-28T19:02:43 #rust-wasm <acrichto> but if we ran the JS initialization first (setting up those global env vars and such) it would work
2018-11-28T19:02:53 #rust-wasm <fitzgen> acrichto: so IIRC there was discussion at TPAC about webpack not being spec compliant (or expected spec compliant) wrt the start function
2018-11-28T19:02:57 #rust-wasm <acrichto> so we have a circular problem, but if JS is guaranteed to run first I think we're ok
2018-11-28T19:03:04 #rust-wasm <acrichto> oh right
2018-11-28T19:03:10 #rust-wasm <acrichto> maybe this is just a flat out webpack bug
2018-11-28T19:03:14 #rust-wasm <fitzgen> potentially
2018-11-28T19:03:33 #rust-wasm <acrichto> https://github.com/webpack/webpack/issues?q=is%3Aopen+is%3Aissue+label%3A%22Web+Assembly%22
2018-11-28T19:03:37 #rust-wasm <fitzgen> we could make the *actual* start function do something like this:
2018-11-28T19:03:39 #rust-wasm <acrichto> https://github.com/webpack/webpack/issues/8144
2018-11-28T19:03:41 #rust-wasm <acrichto> maybe?
2018-11-28T19:04:02 #rust-wasm <fitzgen> Promise.resolve().then(callTheActualUserSuppliedStartFunction)
2018-11-28T19:04:09 #rust-wasm <fitzgen> and maybe that would do the trick?
2018-11-28T19:04:18 #rust-wasm <acrichto> oh hm
2018-11-28T19:04:26 #rust-wasm <fitzgen> that issue looks very relevant
2018-11-28T19:04:47 #rust-wasm <acrichto> hm ok so let's expand this a bit
2018-11-28T19:04:55 #rust-wasm <acrichto> let me also explain an alternate strategy for --no-modules
2018-11-28T19:05:06 #rust-wasm <acrichto> so for something like --no-modules this was a relatively easy fix
2018-11-28T19:05:18 #rust-wasm <acrichto> which was to un-start the start function, and then call it manually after the exports are wired up
2018-11-28T19:05:32 #rust-wasm <acrichto> aka replacing this line -- https://github.com/rustwasm/wasm-bindgen/blob/master/crates/cli-support/src/js/mod.rs#L581
2018-11-28T19:05:37 #rust-wasm <acrichto> with the start function,if it exists
2018-11-28T19:05:49 #rust-wasm <fitzgen> right
2018-11-28T19:06:03 #rust-wasm <acrichto> so just to make sure I understand
2018-11-28T19:06:07 #rust-wasm <acrichto> you're thinking we could unstart the start function
2018-11-28T19:06:15 #rust-wasm <acrichto> and then at the bottom of the js glue we Promise.resolve().then(thing)
2018-11-28T19:06:19 #rust-wasm <acrichto> right?
2018-11-28T19:06:25 #rust-wasm <fitzgen> something like that, yes
2018-11-28T19:06:33 #rust-wasm <acrichto> hm ok
2018-11-28T19:06:41 #rust-wasm <acrichto> I think that'd work, for everything other than the wasm2es6js use case
2018-11-28T19:06:46 #rust-wasm <fitzgen> maybe auto-import Promise.resolve and then and emit a new start function taht does that call for us
2018-11-28T19:06:47 #rust-wasm <acrichto> which is already an incompatible hack really
2018-11-28T19:07:07 #rust-wasm <acrichto> oh
2018-11-28T19:07:10 #rust-wasm <acrichto> er
2018-11-28T19:07:15 #rust-wasm <acrichto> so like ad a new start function
2018-11-28T19:07:18 #rust-wasm <acrichto> which calls an import
2018-11-28T19:07:21 #rust-wasm <acrichto> that does the defer?
2018-11-28T19:07:32 #rust-wasm <fitzgen> yeah, either way
2018-11-28T19:07:36 #rust-wasm <acrichto> I think that'd work yeah
2018-11-28T19:07:44 #rust-wasm <acrichto> b/c functions seem to work even though initialization hasn't run
2018-11-28T19:07:46 #rust-wasm <acrichto> it's just the globals
2018-11-28T19:08:01 #rust-wasm <acrichto> ok cool yeah I think that'll work
2018-11-28T19:08:16 #rust-wasm <fitzgen> neat
2018-11-28T19:08:21 #rust-wasm <acrichto> this'll probably break for someone lol
2018-11-28T19:08:30 #rust-wasm <acrichto> or well wait
2018-11-28T19:08:34 #rust-wasm <acrichto> you probably know the answer to this
2018-11-28T19:08:39 #rust-wasm * fitzgen goes to lunch; will check back scroll
2018-11-28T19:08:44 #rust-wasm <acrichto> so --no-modules and wasm2es6js rely on returning a promise
2018-11-28T19:08:53 #rust-wasm <acrichto> so this means that instantiateStreaming resolves
2018-11-28T19:09:00 #rust-wasm <acrichto> and we execute a Promise.resolve().then(...)
2018-11-28T19:09:22 #rust-wasm <acrichto> but so let's say someone put a separate .then(foo) on the end of the wasm instantiation
2018-11-28T19:09:31 #rust-wasm <acrichto> would the wasm start or the user's `foo` run first?
2018-11-28T19:09:49 #rust-wasm <fitzgen> they are FIFO
2018-11-28T19:10:18 #rust-wasm <acrichto> ok, so probably not
2018-11-28T19:10:34 #rust-wasm <acrichto> eh, sounds like a bug for someone to discover later
2018-11-28T19:10:39 #rust-wasm <acrichto> and get truly fixed when webpack is fixed
2018-11-28T19:10:44 #rust-wasm <fitzgen> also, this is new functionality
2018-11-28T19:10:50 #rust-wasm <fitzgen> can't use the start function yet
2018-11-28T19:10:52 #rust-wasm <fitzgen> so no breakage
2018-11-28T19:10:54 #rust-wasm <acrichto> true yeah
2018-11-28T19:12:27 #rust-wasm <linclark> acrichto: just saw the notification from Nick's message. I'm walking rn but if you still have questions I can take a look when I get back to my comp
2018-11-28T19:15:26 #rust-wasm <acrichto> linclark: ah ok no worries! the general question is that we have a js/wasm file with a circular dependence between each other and I've always meant to sit down w/ the esm spec for wasm and make sure it's ok, it's somewhat broken right now but it may be webpack bugs
2018-11-28T19:15:36 #rust-wasm <acrichto> nothing urgent!
2018-11-28T23:17:31 #rust-wasm <fitzgen> acrichto: lol: https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.MouseEvent.html#method.init_mouse_event_with_can_bubble_arg_and_cancelable_arg_and_view_arg_and_detail_arg_and_screen_x_arg_and_screen_y_arg_and_client_x_arg_and_client_y_arg_and_ctrl_key_arg_and_alt_key_arg_and_shift_key_arg_and_meta_key_arg_and_button_arg_and_related_target_arg
2018-11-28T23:17:50 #rust-wasm <acrichto> wut
2018-11-28T23:18:02 #rust-wasm <acrichto> that seems like we're legit approaching browser url limits
2018-11-28T23:18:23 #rust-wasm <fitzgen> so beautiful
2018-11-28T23:18:27 #rust-wasm <acrichto> to be fair it's a 16 argument method
2018-11-28T23:19:05 #rust-wasm <acrichto> protip, if you click on [src] your browser basically crashes
2018-11-28T23:19:23 #rust-wasm <fitzgen> ahahha
2018-11-28T23:19:52 #rust-wasm <acrichto> lol 84MB of html
2018-11-29T05:57:44 #rust-wasm <drager> Meeting today?
2018-11-29T12:59:23 #rust-wasm <SIMD-Lauper> where can i get the wasm2js tool for windows?
2018-11-29T13:39:26 #rust-wasm <yury> SIMD-Lauper: so far the current process is building of binaryen locally
2018-11-29T13:39:54 #rust-wasm <SIMD-Lauper> yury: but isn't wasm2js a separate tool?
2018-11-29T13:40:50 #rust-wasm <yury> yes, and it can be built without the rest of tools included in the binaryen
2018-11-29T13:41:05 #rust-wasm <SIMD-Lauper> yury: how can i build wasm2js on windows?
2018-11-29T13:41:47 #rust-wasm <yury> there is cmake for windows
2018-11-29T13:42:44 #rust-wasm <yury> start from there, then you may need to install some version of visual studio, if you don't have it already
2018-11-29T13:42:46 #rust-wasm <SIMD-Lauper> yury: i have cmake-3.5.1
2018-11-29T13:42:54 #rust-wasm <SIMD-Lauper> i have VS 2015
2018-11-29T13:43:16 #rust-wasm <yury> https://github.com/WebAssembly/binaryen#visual-c
2018-11-29T13:43:52 #rust-wasm <SIMD-Lauper> yury: in which dir should i execute it?
2018-11-29T13:44:42 #rust-wasm <yury> based on script in step 2, it is the "build" subdirectory of the directory where you cloned the project
2018-11-29T13:45:05 #rust-wasm <SIMD-Lauper> ok
2018-11-29T13:45:29 #rust-wasm <SIMD-Lauper> yury: but i don't need to install "Visual C++ tools for CMake" component?
2018-11-29T13:45:35 #rust-wasm <SIMD-Lauper> because i already have cmake?
2018-11-29T13:45:41 #rust-wasm * yury not sure
2018-11-29T13:46:32 #rust-wasm <SIMD-Lauper> ok
2018-11-29T13:46:41 #rust-wasm <yury> it is easier to follow the instructions than fixing in later
2018-11-29T13:48:18 #rust-wasm <yury> i'm sure there more ways to finish the same task
2018-11-29T13:50:44 #rust-wasm <SIMD-Lauper> yury: i'm doing `msbuild wasm2js.vcxproj`, will it build for debug or release?
2018-11-29T13:51:37 #rust-wasm <yury> AFAIK cmake has options to configure that (msbuild shall have that too)
2018-11-29T13:52:15 #rust-wasm <yury> e.g. cmake -DCMAKE_BUILD_TYPE=Release ..
2018-11-29T13:52:35 #rust-wasm <SIMD-Lauper> ok, it finished building it. how can i check if it's the release version?
2018-11-29T13:53:03 #rust-wasm <yury> see if large .pdb present
2018-11-29T13:53:39 #rust-wasm <SIMD-Lauper> binaryen\build\bin\wasm2js.pdb is 104 MB
2018-11-29T13:54:05 #rust-wasm <yury> try in Release configuration
2018-11-29T13:54:32 #rust-wasm <SIMD-Lauper> ah, /p:Configuration=Release
2018-11-29T13:54:40 #rust-wasm <SIMD-Lauper> ok, it's running
2018-11-29T13:56:13 #rust-wasm <SIMD-Lauper> yury: so after i compile my yew frontend.wasm file to js, how do i have to load it differently? (currently i'm doing `cargo web deploy` which generates a .js file that loads the wasm file)
2018-11-29T13:58:13 #rust-wasm <yury> if produced js is esm module, use bundler (e.g. webpack) to use it as a part of the web app
2018-11-29T13:59:46 #rust-wasm <SIMD-Lauper> > Switching to "almost asm" mode, reason: grow_memory op
2018-11-29T14:00:10 #rust-wasm <SIMD-Lauper> what does that mean?
2018-11-29T14:00:51 #rust-wasm <yury> means that it will not be pure asm.js 
2018-11-29T14:01:02 #rust-wasm <SIMD-Lauper> ok
2018-11-29T14:01:15 #rust-wasm <SIMD-Lauper> but it generated a ESM module?
2018-11-29T14:02:03 #rust-wasm <SIMD-Lauper> https://github.com/WebAssembly/binaryen/pull/1642
2018-11-29T14:02:24 #rust-wasm <yury> sure, did you try <script type="module">import * as Frontend from './frontend.js';....</script>
2018-11-29T14:03:12 #rust-wasm <SIMD-Lauper> not yet.. 
2018-11-29T14:03:28 #rust-wasm <SIMD-Lauper> like this? <script type="module">import * as Frontend from './frontend.js'; Frontend.main();</script> 
2018-11-29T14:03:51 #rust-wasm <SIMD-Lauper> or this? `import {main} from './utils.mjs'; main();`
2018-11-29T14:04:51 #rust-wasm <SIMD-Lauper> oh but IE11 doesn't support ES modules?
2018-11-29T14:05:08 #rust-wasm <SIMD-Lauper> the whole reason why i'm compiling to js is to be able to support IE
2018-11-29T14:05:09 #rust-wasm <yury> nope, hence bundler
2018-11-29T14:05:31 #rust-wasm <SIMD-Lauper> so with webpack i need to use babel to transpile it to ES5 first?
2018-11-29T14:06:14 #rust-wasm <yury> right, I tried to do something like this in the past https://yurydelendik.github.io/sqlite-playground/src/playground-js.html
2018-11-29T14:06:44 #rust-wasm <yury> SIMD-Lauper: https://github.com/yurydelendik/sqlite-playground/blob/master/Makefile#L51-L64
2018-11-29T14:07:20 #rust-wasm <yury> though https://github.com/WebAssembly/binaryen/pull/1690 not landed yet
2018-11-29T14:08:32 #rust-wasm <yury> SIMD-Lauper: babel command at https://github.com/yurydelendik/sqlite-playground/blob/master/Makefile#L58-L60 might be useful to you
2018-11-29T14:08:32 #rust-wasm <SIMD-Lauper> when i run wasm2js --help, it doesn't show those cmd line options
2018-11-29T14:08:38 #rust-wasm <SIMD-Lauper> thanks!
2018-11-29T14:08:46 #rust-wasm <SIMD-Lauper> i have only used parcel bundler before
2018-11-29T14:10:21 #rust-wasm <SIMD-Lauper> so UMD works in IE?
2018-11-29T14:11:18 #rust-wasm <yury> UMD's third branch will be executed if script is loaded via <script> tag
2018-11-29T14:11:42 #rust-wasm <SIMD-Lauper> what do you mean by third branch?
2018-11-29T14:12:32 #rust-wasm <yury> there are several branches in UMD header/script: one for AMD, one for CommonJS, third for plain old JS
2018-11-29T14:12:59 #rust-wasm <yury> make one, you will see :)
2018-11-29T14:16:05 #rust-wasm <SIMD-Lauper> yury: ok. and what's the --module-id arg for?
2018-11-29T14:17:04 #rust-wasm <yury> since it is loading in global object via <script>, window.<module-id> is where it will be found
2018-11-29T14:17:42 #rust-wasm <yury> notice that imports are found at window.env (imported from "env" module)
2018-11-29T14:18:38 #rust-wasm <SIMD-Lauper> yury: babel complains about @ https://paste.centos.org/view/630c5ca8
2018-11-29T14:20:03 #rust-wasm <SIMD-Lauper> do i need to do `npm install -g @babel/plugin-transform-modules-umd` first?
2018-11-29T14:20:06 #rust-wasm <yury> npm install @babel/plugin-transform-modules-umd @bablel/preset-env
2018-11-29T14:20:12 #rust-wasm <yury> or that
2018-11-29T14:20:18 #rust-wasm <SIMD-Lauper> ok
2018-11-29T14:20:38 #rust-wasm <SIMD-Lauper> https://www.irccloud.com/pastebin/VJMY83DA/
2018-11-29T14:21:05 #rust-wasm <SIMD-Lauper> ah typo :)
2018-11-29T14:21:10 #rust-wasm <SIMD-Lauper> bablel
2018-11-29T14:21:40 #rust-wasm <SIMD-Lauper> hm, i installed both, but get the same error
2018-11-29T14:22:53 #rust-wasm <yury> did you use -g? if not use `npm install babel` and run it from `npm bin`/babel
2018-11-29T14:23:13 #rust-wasm <yury> or use -g
2018-11-29T14:23:28 #rust-wasm <SIMD-Lauper> i used -g for babel and for both plugins
2018-11-29T14:23:44 #rust-wasm <yury> no luck?
2018-11-29T14:23:51 #rust-wasm <SIMD-Lauper> no, same error
2018-11-29T14:24:12 #rust-wasm <yury> never tried with "-g"
2018-11-29T14:25:07 #rust-wasm * yury usually installs everything in local dir: `npm init`, `npm install ...` and runs from node_modules/.bin/
2018-11-29T14:25:44 #rust-wasm <SIMD-Lauper> yury: https://paste.centos.org/view/728dfdef
2018-11-29T14:26:26 #rust-wasm <yury> it says "attempted to resolve relative to "."" - not sure what it means
2018-11-29T14:30:13 #rust-wasm <SIMD-Lauper> yury: ok i installed it locally now. but: https://paste.centos.org/view/5725b268
2018-11-29T14:30:20 #rust-wasm <SIMD-Lauper> is babel not designed to work on windows, too?
2018-11-29T14:31:13 #rust-wasm <drager> babel should work on windows
2018-11-29T14:31:29 #rust-wasm <SIMD-Lauper> hm, it also doesn't work in sh.exe
2018-11-29T14:31:42 #rust-wasm <yury> weird, try `node babel` ?
2018-11-29T14:32:32 #rust-wasm <yury> hmm
2018-11-29T14:32:50 #rust-wasm <SIMD-Lauper> that doesn't find babel. but when i do `node ./node_modules/.bin/babel` i get the same error
2018-11-29T14:35:58 #rust-wasm <yury> does ./node_modules/.bin/babel work?
2018-11-29T14:36:01 #rust-wasm <drager> Do you have to run `node ...`? Doesn't just ./node_modules/.bin/babel work?
2018-11-29T14:36:25 #rust-wasm <drager> (I have no experience with windows though)
2018-11-29T14:36:28 #rust-wasm <SIMD-Lauper> yury: yes!
2018-11-29T14:36:42 #rust-wasm <yury> node run for --max-old-space-size=16384 options
2018-11-29T14:37:11 #rust-wasm <yury> you can skip "node --max-old-space-size=16384" for your stuff, I think
2018-11-29T14:37:18 #rust-wasm <SIMD-Lauper> drager: same error https://paste.centos.org/view/4f400fa9
2018-11-29T14:38:53 #rust-wasm <SIMD-Lauper> someone has a similar error here https://github.com/webpack/webpack/issues/1866
2018-11-29T14:41:36 #rust-wasm <drager> SIMD-Lauper: Do you have all the latest versions of babel? 
2018-11-29T14:41:52 #rust-wasm <SIMD-Lauper> 6.26.0 (babel-core 6.26.3)
2018-11-29T14:43:13 #rust-wasm <drager> SIMD-Lauper: Try 7.x this works for me; https://paste.rs/8hV.json
2018-11-29T14:43:45 #rust-wasm <SIMD-Lauper> drager: but i just isntalled it, why didnt it take the latest version?
2018-11-29T14:43:52 #rust-wasm <SIMD-Lauper> i did: npm install babel-cli
2018-11-29T14:43:53 #rust-wasm <drager> How did you install it?
2018-11-29T14:43:56 #rust-wasm <drager> babel-cli is old
2018-11-29T14:44:08 #rust-wasm <drager> The new packages is namespaced under @babel
2018-11-29T14:44:20 #rust-wasm <SIMD-Lauper> ah
2018-11-29T14:44:38 #rust-wasm <drager> babel-cli is one year since last publish :P
2018-11-29T14:48:59 #rust-wasm <SIMD-Lauper> drager: i now have https://paste.centos.org/view/db2ddba2 but same error!
2018-11-29T14:49:32 #rust-wasm <drager> Did you remove your node_modules and re-ran `yarn` or `npm i`?
2018-11-29T14:50:31 #rust-wasm <SIMD-Lauper> yes!
2018-11-29T14:50:34 #rust-wasm <SIMD-Lauper> same error
2018-11-29T14:51:36 #rust-wasm <SIMD-Lauper> node_modules\.bin\babel -V
2018-11-29T14:51:37 #rust-wasm <SIMD-Lauper> 7.1.5 (@babel/core 7.1.6)
2018-11-29T14:51:44 #rust-wasm <SIMD-Lauper> so why doesn't it work?
2018-11-29T14:52:12 #rust-wasm <SIMD-Lauper> btw, there is also this file node_modules\@babel\cli\bin\babel.js
2018-11-29T14:52:43 #rust-wasm <SIMD-Lauper> `node node_modules\@babel\cli\bin\babel.js -V` works
2018-11-29T14:52:45 #rust-wasm <drager> what node version do you have?
2018-11-29T14:53:17 #rust-wasm <SIMD-Lauper> now running `node --max-old-space-size=16384 node_modules\@babel\cli\bin\babel.js --plugins @babel/transform-modules-umd --presets @babel/preset-env wasm.jsm -o wasm.js -s true --module-id meow`
2018-11-29T14:53:35 #rust-wasm <SIMD-Lauper> 8.9.4
2018-11-29T14:54:07 #rust-wasm <drager> Alright, so pretty old
2018-11-29T14:54:09 #rust-wasm <SIMD-Lauper> [BABEL] Note: The code generator has deoptimised the styling of D:\projects\myproject\target\deploy\wasm.jsm as it exceeds the max of 500KB.
2018-11-29T14:54:28 #rust-wasm <SIMD-Lauper> does it mean my styling will be screwed?
2018-11-29T14:54:58 #rust-wasm <yury> sure, do you need pretty generated code? :)
2018-11-29T14:55:15 #rust-wasm <SIMD-Lauper> i mean the styling of the UI
2018-11-29T14:55:35 #rust-wasm <SIMD-Lauper> does it make sense to uglify the resulting js file now? or is it already minified?
2018-11-29T14:56:06 #rust-wasm <yury> babel just performs translation
2018-11-29T14:59:23 #rust-wasm <SIMD-Lauper> yury: ok, but it doesn't load in the browser: https://paste.centos.org/view/e9430cf1
2018-11-29T14:59:49 #rust-wasm <SIMD-Lauper> in <head> i have <script src="wasm.js"></script> and in <body> i have <script src="frontend-asm.js"></script>
2018-11-29T14:59:58 #rust-wasm <SIMD-Lauper> that one contains: window.meow.main();
2018-11-29T15:02:38 #rust-wasm <yury> SIMD-Lauper: alright, that's out of my realm, I'
2018-11-29T15:03:20 #rust-wasm <yury> m not familiar how wasm from generated, but it needs dependencies
2018-11-29T15:03:26 #rust-wasm <yury> imports
2018-11-29T15:03:48 #rust-wasm <SIMD-Lauper> where is this documented?
2018-11-29T15:04:13 #rust-wasm <yury> __extjs_2a605af80d3bf7b1e87195871b3be78c13f26ec8 maybe points to wasm-bindgen?
2018-11-29T15:04:49 #rust-wasm <SIMD-Lauper> how could it, i'm using cargo web, not wasm-bindgen
2018-11-29T15:05:38 #rust-wasm * yury leaves that to the good "cargo web" people
2018-11-29T15:05:58 #rust-wasm <SIMD-Lauper> yury: so with your sqlite playground, it works?
2018-11-29T15:06:39 #rust-wasm <yury> C code compiled with only trivial dependencies
2018-11-29T15:07:03 #rust-wasm <SIMD-Lauper> do i need this file? https://yurydelendik.github.io/sqlite-playground/misc/wasm.js
2018-11-29T15:07:40 #rust-wasm <yury> you will probably need add additional imports from other files cargo web generated
2018-11-29T15:08:18 #rust-wasm <yury> can you check what is at wasm.jsm:175369 ?
2018-11-29T15:08:25 #rust-wasm <SIMD-Lauper> ah yes, it generated a frontend.js file that contains a function called __extjs_2a605af80d3bf7b1e87195871b3be78c13f26ec8
2018-11-29T15:08:50 #rust-wasm <SIMD-Lauper> https://paste.centos.org/view/f4564c81
2018-11-29T15:08:52 #rust-wasm <yury> is frontend.js UMD or ESM?
2018-11-29T15:08:53 #rust-wasm <SIMD-Lauper> this is the whole file
2018-11-29T15:08:56 #rust-wasm <SIMD-Lauper> how do i link it?
2018-11-29T15:09:34 #rust-wasm <yury> add script before <script src="wasm"
2018-11-29T15:10:09 #rust-wasm <SIMD-Lauper> but this script tries to load/compile the wasm file
2018-11-29T15:10:14 #rust-wasm <SIMD-Lauper> and then calls its main()
2018-11-29T15:10:43 #rust-wasm <yury> time to splice and dice it?
2018-11-29T15:11:13 #rust-wasm <SIMD-Lauper> but in which way? :)
2018-11-29T15:13:57 #rust-wasm <yury> so line 42 function creates "instance"
2018-11-29T15:15:10 #rust-wasm <yury> remove lines 19-41, and iterate instance.imports object and assign these to global one
2018-11-29T15:15:36 #rust-wasm <yury> for (var i in instance.imports) window[i] = instance.imports[i];
2018-11-29T15:16:18 #rust-wasm <SIMD-Lauper> ok
2018-11-29T15:17:50 #rust-wasm <yury> the initialize function @ 734 needs to be called after meow is loaded
2018-11-29T15:19:56 #rust-wasm <yury> (so in line 20, add `window.__initialize = instance.initialize;`, and in frontend-asm.js `window.__initialize(window.meow)`)
2018-11-29T15:20:11 #rust-wasm <yury> SIMD-Lauper: I hope the above makes sense
2018-11-29T15:21:59 #rust-wasm <SIMD-Lauper> yury: wouldn't this work too? https://paste.centos.org/view/6ef80948#L43
2018-11-29T15:22:31 #rust-wasm <yury> browser does not know about require
2018-11-29T15:22:44 #rust-wasm <SIMD-Lauper> or with fetch() ?
2018-11-29T15:23:17 #rust-wasm <SIMD-Lauper> fetching the js file instead of the wasm file
2018-11-29T15:23:17 #rust-wasm <yury> it needs eval then
2018-11-29T15:23:34 #rust-wasm <SIMD-Lauper> ok
2018-11-29T15:24:11 #rust-wasm <yury> though you can do require() but you will need use bundler
2018-11-29T15:24:23 #rust-wasm <SIMD-Lauper> ok
2018-11-29T15:24:32 #rust-wasm <yury> it will be more messy
2018-11-29T15:24:37 #rust-wasm <SIMD-Lauper> i can use parcel
2018-11-29T15:24:42 #rust-wasm <SIMD-Lauper> it's simple to use
2018-11-29T15:24:58 #rust-wasm <SIMD-Lauper> i prefer it instead of breaking up the init code into separate files
2018-11-29T15:25:27 #rust-wasm <yury> don't forget to feed proper imports to wasm.jsm module
2018-11-29T15:25:56 #rust-wasm <SIMD-Lauper> how?
2018-11-29T15:26:00 #rust-wasm * yury is not even sure how
2018-11-29T15:26:13 #rust-wasm <SIMD-Lauper> i thought it reads from window now?
2018-11-29T15:26:43 #rust-wasm <yury> not if it's CommonJS or AMD
2018-11-29T15:27:03 #rust-wasm <SIMD-Lauper> but i used babel to transpile it to umd
2018-11-29T15:27:16 #rust-wasm <SIMD-Lauper> to make it work in IE
2018-11-29T15:27:18 #rust-wasm <yury> UMD is CommonJS and AMD
2018-11-29T15:27:22 #rust-wasm <SIMD-Lauper> ah
2018-11-29T15:27:44 #rust-wasm <yury> try splitting initialize first
2018-11-29T15:28:50 #rust-wasm <SIMD-Lauper> ok
2018-11-29T15:30:15 #rust-wasm <SIMD-Lauper> yury: now i get this https://paste.centos.org/view/03bf410f
2018-11-29T15:30:55 #rust-wasm <yury> :)
2018-11-29T15:31:02 #rust-wasm <SIMD-Lauper> (:
2018-11-29T15:31:15 #rust-wasm <SIMD-Lauper> in `initialize` it has `Object.defineProperty( Module, 'web_malloc', { value: Module.instance.exports.__web_malloc } );`
2018-11-29T15:31:36 #rust-wasm <yury> try `window.__initialize({exports: window.meow});`
2018-11-29T15:31:59 #rust-wasm <SIMD-Lauper> oh wow
2018-11-29T15:32:11 #rust-wasm <SIMD-Lauper> it loads the UI
2018-11-29T15:32:48 #rust-wasm <SIMD-Lauper> BUT i get an error after that: https://paste.centos.org/view/7af724bd
2018-11-29T15:35:57 #rust-wasm <yury> SIMD-Lauper: I think wasm2js is missing tables support
2018-11-29T15:36:09 #rust-wasm <SIMD-Lauper> what tables? <table> ?
2018-11-29T15:36:22 #rust-wasm <yury> and meow does not do __web_table
2018-11-29T15:36:34 #rust-wasm <SIMD-Lauper> but `initialize` has `Object.defineProperty( Module, 'web_table', { value: Module.instance.exports.__web_table } );`
2018-11-29T15:36:50 #rust-wasm <yury> see if __web_table present in wasm.js
2018-11-29T15:36:58 #rust-wasm <yury> present / exports
2018-11-29T15:37:17 #rust-wasm <SIMD-Lauper> it's not
2018-11-29T15:38:12 #rust-wasm <yury> I can look into that
2018-11-29T15:38:18 #rust-wasm <SIMD-Lauper> thanks :)
2018-11-29T15:39:17 #rust-wasm <SIMD-Lauper> btw, what is web table? is it <table>?
2018-11-29T15:39:40 #rust-wasm <SIMD-Lauper> can't be
2018-11-29T15:42:48 #rust-wasm <yury> SIMD-Lauper: minimal test is at https://paste.centos.org/view/631490b5
2018-11-29T15:43:37 #rust-wasm <yury> the idea is function pointers can be stored in the table
2018-11-29T15:43:47 #rust-wasm <SIMD-Lauper> is it a function jump table?
2018-11-29T15:43:54 #rust-wasm <SIMD-Lauper> ok
2018-11-29T15:44:08 #rust-wasm <yury> looks like wasm2js forgets to export FUNCTION_TABLE_v
2018-11-29T15:44:33 #rust-wasm <yury> SIMD-Lauper: try adding that manually as export in the wasm.js
2018-11-29T15:45:06 #rust-wasm <yury> eh, you may need to export object with "get" function
2018-11-29T15:45:12 #rust-wasm <yury> not array
2018-11-29T15:45:25 #rust-wasm <SIMD-Lauper> how do you mean?
2018-11-29T15:45:30 #rust-wasm <yury> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table/get
2018-11-29T15:47:40 #rust-wasm <SIMD-Lauper> what should i do with that? :)
2018-11-29T15:48:48 #rust-wasm <yury> so something along `_exports.__web_table = {get: function (i) { return FUNCTION_TABLE_v[i] || ....; },};
2018-11-29T15:49:14 #rust-wasm <yury> there will be lots of FUNCTION_TABLE_ thingys
2018-11-29T15:50:06 #rust-wasm <SIMD-Lauper> they all use `FUNCTION_TABLE_vi`
2018-11-29T15:50:18 #rust-wasm <yury> use that
2018-11-29T15:50:21 #rust-wasm <SIMD-Lauper> ok
2018-11-29T15:50:47 #rust-wasm <SIMD-Lauper> and what for "..."?
2018-11-29T15:51:24 #rust-wasm <yury> my example has FUNCTION_TABLE_v FUNCTION_TABLE_vi FUNCTION_TABLE_vii
2018-11-29T15:52:00 #rust-wasm <SIMD-Lauper> why are there different ones?
2018-11-29T15:52:03 #rust-wasm <yury> so if there are several of them, the get needs to try them all
2018-11-29T15:52:16 #rust-wasm <yury> _v function signatures I guess
2018-11-29T15:52:20 #rust-wasm <yury> v void
2018-11-29T15:52:25 #rust-wasm <yury> vi void (int)
2018-11-29T15:52:43 #rust-wasm <SIMD-Lauper> i also have up to FUNCTION_TABLE_viiiiii
2018-11-29T15:53:08 #rust-wasm <yury> so FUNCTION_TABLE_vi[i] || FUNCTION_TABLE_viiiiii[i][
2018-11-29T15:53:15 #rust-wasm <yury> so FUNCTION_TABLE_vi[i] || FUNCTION_TABLE_viiiiii[i] || ..more..
2018-11-29T15:53:17 #rust-wasm <SIMD-Lauper> does that mean there are none with more 'i's? if the one with the number of 'i's  +1 doesn't occur?
2018-11-29T15:53:36 #rust-wasm <SIMD-Lauper> or do i have to search for even higher number of 'i's?
2018-11-29T15:53:55 #rust-wasm <yury> grep all FUNCTION_TABLE_ names you have
2018-11-29T15:54:27 #rust-wasm <SIMD-Lauper> notepad++ only shows all matches in the same line 1
2018-11-29T15:54:31 #rust-wasm <SIMD-Lauper> not helpful
2018-11-29T15:55:05 #rust-wasm <yury> small node.js regexp :)
2018-11-29T15:56:16 #rust-wasm <SIMD-Lauper> do you know how to do it with rg?
2018-11-29T15:56:20 #rust-wasm <SIMD-Lauper> to not print the line
2018-11-29T15:56:22 #rust-wasm <SIMD-Lauper> only the match
2018-11-29T15:58:47 #rust-wasm <yury> `var s; while (s = /(FUNCTION_TABLE_\w+)/g.exec(code)) console.log(s[0]);` ?
2018-11-29T15:59:57 #rust-wasm <yury> eh
2018-11-29T16:01:04 #rust-wasm <SIMD-Lauper> ah: rg "FUNCTION_TABLE_\w+" wasm.js -o
2018-11-29T16:01:44 #rust-wasm <yury> +"| sort | uniq"
2018-11-29T16:02:00 #rust-wasm <SIMD-Lauper> i have all these v
2018-11-29T16:02:01 #rust-wasm <SIMD-Lauper> https://paste.centos.org/view/9b25ed65
2018-11-29T16:02:39 #rust-wasm <yury> cool,m only 8 tables to try
2018-11-29T16:03:14 #rust-wasm <SIMD-Lauper> that will be slow, right?
2018-11-29T16:03:16 #rust-wasm <SIMD-Lauper> at runtime
2018-11-29T16:03:34 #rust-wasm <yury> maybe for this hack
2018-11-29T16:03:51 #rust-wasm <yury> wasm2js will probably have a better thing
2018-11-29T16:04:33 #rust-wasm <SIMD-Lauper> so like this, right? `_exports.__web_table = {get: function (i) { return FUNCTION_TABLE_ii[i] || FUNCTION_TABLE_iii[i] || FUNCTION_TABLE_iiii[i] || FUNCTION_TABLE_v[i] || FUNCTION_TABLE_vi[i] || FUNCTION_TABLE_vii[i] || FUNCTION_TABLE_viiii[i] || FUNCTION_TABLE_viiiiii; }};`
2018-11-29T16:04:48 #rust-wasm <SIMD-Lauper> forgot [i] at the end
2018-11-29T16:04:49 #rust-wasm * yury wants to see if it is the only things that hold SIMD-Lauper
2018-11-29T16:04:51 #rust-wasm <yury> right
2018-11-29T16:05:39 #rust-wasm <yury> yeah, add that to the wasm.js somewhere with other _exports.
2018-11-29T16:06:16 #rust-wasm <SIMD-Lauper> Uncaught ReferenceError: FUNCTION_TABLE_ii is not defined
2018-11-29T16:07:02 #rust-wasm <yury> can you find all `var FUNCTION_TABLE_`?
2018-11-29T16:07:41 #rust-wasm <yury> maybe FUNCTION_TABLE_ii is there just for fun
2018-11-29T16:07:58 #rust-wasm <SIMD-Lauper> i found it
2018-11-29T16:08:16 #rust-wasm <SIMD-Lauper> now what
2018-11-29T16:08:43 #rust-wasm <yury> so `var FUNCTION_TABLE_ii = [` present?
2018-11-29T16:08:47 #rust-wasm <SIMD-Lauper> yes
2018-11-29T16:08:55 #rust-wasm <SIMD-Lauper> but it seems it's defined in an inner scope
2018-11-29T16:09:00 #rust-wasm <SIMD-Lauper> not where the _exports are assigned
2018-11-29T16:09:05 #rust-wasm <SIMD-Lauper> but hard to read ;)
2018-11-29T16:09:18 #rust-wasm <SIMD-Lauper> the file is 5mb
2018-11-29T16:09:20 #rust-wasm <SIMD-Lauper> all in one line
2018-11-29T16:09:24 #rust-wasm <yury> right, add between two _exports. :)
2018-11-29T16:10:24 #rust-wasm * yury gtg
2018-11-29T16:11:30 #rust-wasm <SIMD-Lauper> yury: https://paste.centos.org/view/142235bc
2018-11-29T16:15:45 #rust-wasm <yury> probably, _exports thing is not correct
2018-11-29T16:16:19 #rust-wasm <yury> SIMD-Lauper: that's small example
2018-11-29T16:16:20 #rust-wasm <yury> https://paste.centos.org/view/0ed69ff0
2018-11-29T16:16:54 #rust-wasm <yury> asmFunc need to "Expose" FUNCTION_TABLE_v somehow
2018-11-29T16:18:07 #rust-wasm <SIMD-Lauper> yury: hm, i don't know. can you maybe create an issue on the wasm2js repo so that official table support can be added? :)
2018-11-29T16:21:05 #rust-wasm <SIMD-Lauper> or should i create one? i don't know all the details..
2018-11-29T16:49:31 #rust-wasm <fitzgen> Reminder: WG meeting is starting in 11 minutes! https://github.com/rustwasm/team/issues/238
2018-11-29T16:49:34 #rust-wasm <fitzgen> come one com all :)
2018-11-29T16:55:38 #rust-wasm <SIMD-Lauper> yury: i created an issue here https://github.com/WebAssembly/binaryen/issues/1781
2018-11-29T17:02:40 #rust-wasm <fitzgen> ag_dubs: hey, coming to the meeting today?
2018-11-29T17:05:06 #rust-wasm <drager> fitzgen: Is the meeting on? Just lost my wifi o,0
2018-11-29T17:05:28 #rust-wasm <fitzgen> drager: it seems I need to create a temp room
2018-11-29T17:05:36 #rust-wasm <fitzgen> hold on a minute
2018-11-29T17:05:52 #rust-wasm <drager> I see
2018-11-29T17:06:49 #rust-wasm <SIMD-Lauper> it also says "The meeting has not started" for me
2018-11-29T17:08:00 #rust-wasm <drager> Yeah
2018-11-29T17:10:15 #rust-wasm <fitzgen> Please use this meeting room today: https://zoom.us/j/993864510
2018-11-29T17:12:34 #rust-wasm <acrichto> fitzgen: we lost you
2018-11-29T17:13:14 #rust-wasm <ag_dubs> hi sorry- the beta release of the website is happening right now and i was given a last minute critical task
2018-11-29T17:29:38 #rust-wasm <fitzgen> ag_dubs: no worries
2018-11-29T17:44:47 #rust-wasm <drager> fitzgen: I was the one asking about things to work on. I found this; https://github.com/rustwasm/rust-webpack-template/issues/69 and I'd like to take a crack at it if noone is working on it.
2018-11-29T17:55:14 #rust-wasm <fitzgen> drager: that would be lovely!
2018-11-29T17:55:32 #rust-wasm <fitzgen> drager: you can claim it by leaving a comment saying you are working on it
2018-11-29T17:56:24 #rust-wasm <drager> Will do!
2018-11-29T18:06:18 #rust-wasm <drager> fitzgen: Hmm, I can't even get it to recompile without errors.
2018-11-29T18:08:32 #rust-wasm <fitzgen> drager: yeah, I think it is just live reload in general that is broken
2018-11-29T18:08:43 #rust-wasm <fitzgen> I haven't looked into it at all tho
2018-11-29T18:09:31 #rust-wasm <drager> Yeah, right. I will look into it. At least now I know it's not only for errors
2018-11-29T18:25:00 #rust-wasm <drager> fitzgen: So, I got something that works now. Reload in general and for errors as well. Though, it seems like a bug in @wasm-tool/wasm-pack-plugin so I'll submit a PR to that repo.
2018-11-29T18:25:13 #rust-wasm <fitzgen> drager: 🎉
2018-11-29T18:25:19 #rust-wasm <fitzgen> drager: nice work!
2018-11-29T18:28:52 #rust-wasm <drager> Thanks, hope the author will accept it
2018-11-29T18:30:51 #rust-wasm <fitzgen> drager: wasm-pack-plugin's main author is xtuc (Sven) who is a member of our WG; just happened not to be in the meeting today
2018-11-29T18:34:30 #rust-wasm <drager> fitzgen: Ah I see :)
2018-11-29T18:52:54 #rust-wasm <drager> I think this; https://github.com/rustwasm/rust-webpack-template/issues/76 is the same issue
2018-11-30T02:26:56 #rust-wasm <pdxstefan> Hello! Is it possible to export a struct in Rust that implements the Generator trait as a Generator object in ES5?
2018-11-30T02:29:03 #rust-wasm <pdxstefan> It seems like there's an example of how you can iterate over a js object that implements the iterator protocol, but is there a way to do the opposite?
2018-11-30T13:51:56 #rust-wasm <yury> SIMD-Lauper: hi, I need tester for https://github.com/WebAssembly/binaryen/pull/1786
2018-11-30T13:55:46 #rust-wasm <yury> also, most of the https://github.com/WebAssembly/binaryen/issues/1781 items connected with cargo web's frontend.js. I'm afraid it is out of scope of binaryen how this file is generated
2018-11-30T16:50:51 #rust-wasm <SIMD-Lauper> yury: wow thanks for doing this, i really appreciate it! i will test it asap (this weekend) :)
2018-11-30T16:52:42 #rust-wasm <SIMD-Lauper> should i pass any flags to wasm2js? for this
2018-11-30T19:22:58 #rust-wasm <fitzgen> https://lobste.rs/s/rcaxxm/rust_webassembly#c_ejtflp
2018-11-30T19:23:06 #rust-wasm <fitzgen> ag_dubs: acrichto: ^
2018-11-30T19:24:15 #rust-wasm <acrichto> nice!
2018-11-30T19:29:22 #rust-wasm <acrichto> fitzgen: whoa holy cow if you take a look at the wasm even the wasm has been minimized
2018-11-30T19:29:27 #rust-wasm <acrichto> (export "d" (func $__wbg_wind_free))
2018-11-30T19:29:30 #rust-wasm <acrichto> (export "a" (func $__wbg_burn_free))
2018-11-30T19:29:31 #rust-wasm <acrichto> et
2018-11-30T19:29:32 #rust-wasm <acrichto> etc*
2018-11-30T19:29:46 #rust-wasm <fitzgen> acrichto: oh whoa I wonder who is doing that
2018-11-30T19:29:48 #rust-wasm <fitzgen> webpack?
2018-11-30T19:29:56 #rust-wasm <acrichto> that'd be my guess yeah
2018-11-30T19:30:02 #rust-wasm <acrichto>   (import "./sandtable" "__wbg_random_86efc8986c8a8805" (func $__wbg_random_86efc8986c8a8805 (;0;) (result f64)))
2018-11-30T19:30:06 #rust-wasm <acrichto> not entirely minimized though
2018-11-30T19:31:07 #rust-wasm <fitzgen> acrichto: yeah, it seems the names section is not minimized, which makes sense I guess if you are going to leave it in
2018-11-30T19:31:32 #rust-wasm <acrichto> oh I just mean that the imported name isn't minimized
2018-11-30T19:31:40 #rust-wasm <acrichto> the name section is deifnitely still there
2018-11-30T19:31:56 #rust-wasm <fitzgen> yeah, I meant "also"
2018-11-30T19:32:01 #rust-wasm <fitzgen> 👍
2018-11-30T19:32:08 #rust-wasm <acrichto> ah indeed
2018-11-30T19:33:40 #rust-wasm <acrichto> fitzgen: wut https://github.com/MaxBittker/sandtable/blob/master/crate/src/species.rs#L6
2018-11-30T19:34:09 #rust-wasm <acrichto> compiler suggestions are sometimes super wrong...
2018-11-30T19:34:14 #rust-wasm <fitzgen> lol
2018-11-30T19:34:17 #rust-wasm <fitzgen> send a pr?
2018-11-30T20:16:20 #rust-wasm <acrichto> fitzgen: interesting realization, whenever we Drop a JsValue we'll have to write ref.null into its slow
2018-11-30T20:16:21 #rust-wasm <acrichto> slot*
2018-11-30T20:16:28 #rust-wasm <acrichto> to avoid holding a strong ref to something we don't need
2018-11-30T20:50:43 #rust-wasm <fitzgen> acrichto: in the anyref table for dropped heap JsValues?
2018-11-30T20:52:06 #rust-wasm <acrichto> fitzgen: not particularly but it holds them still
2018-11-30T20:52:17 #rust-wasm <acrichto> it's like when you drop a Vec<u8> it doesn't actually zero out the memory
2018-11-30T20:52:33 #rust-wasm <acrichto> but we need to make sure the host knows that we don't actually need the memory any more
2018-11-30T20:52:41 #rust-wasm <acrichto> so we need to drop all the strong references 
2018-11-30T20:52:52 #rust-wasm <acrichto> (still in the table)
2018-11-30T20:53:38 #rust-wasm <fitzgen> acrichto: I guess this applies to stack anyrefs as well
2018-11-30T20:53:46 #rust-wasm <acrichto> right yeah
2018-11-30T20:53:47 #rust-wasm <fitzgen> once we return back up the stack
2018-11-30T20:53:59 #rust-wasm <fitzgen> acrichto: good catch!
2018-11-30T20:54:11 #rust-wasm <fitzgen> acrichto: btw, did you see my comment on the custom allocators issue?
2018-11-30T20:54:22 #rust-wasm <acrichto> https://gist.github.com/alexcrichton/98dcb808e6c830880358c8a0c8df7232
2018-11-30T20:54:25 #rust-wasm <acrichto> fitzgen: hm no I did not
2018-11-30T20:54:28 #rust-wasm <acrichto> which issue was this?
2018-11-30T20:54:46 #rust-wasm <fitzgen> acrichto: https://github.com/rust-lang/rust/issues/42774#issuecomment-442953956
2018-11-30T20:55:09 #rust-wasm <fitzgen> acrichto: my understanding is that this feature was basically postponed for after rust 2018, correct?
2018-11-30T20:55:20 #rust-wasm <acrichto> aha, lemme read
2018-11-30T20:55:22 #rust-wasm <acrichto> and yeah
2018-11-30T20:55:36 #rust-wasm <fitzgen> acrichto: I'd like to push a bit on it soon :)
2018-11-30T20:58:13 #rust-wasm <acrichto> ok cool makes sense to me the issues at least
2018-11-30T20:58:22 #rust-wasm <acrichto> at some point I'd love to reduce the unstable usage of libstd
2018-11-30T20:58:29 #rust-wasm <acrichto> or at least make it very small and targeted
2018-11-30T20:58:38 #rust-wasm <acrichto> most of the unstable usage doesn't really need to be I think...
2018-11-30T20:59:12 #rust-wasm <fitzgen> yeah, it also gives off a sense of like "if unstable feature X is needed to get the most performant collection impl, why can't I use it?"
2018-11-30T20:59:26 #rust-wasm <fitzgen> like either it should be stable, or it shouldn't be used
2018-11-30T20:59:43 #rust-wasm <fitzgen> creates a weird privileged/resentment dynamic
2018-11-30T21:00:12 #rust-wasm <acrichto> I agree yeah, but pragmatically that line of reasoning doesn't hold up for long :(
2018-11-30T21:00:20 #rust-wasm <acrichto> aka all of specialization
2018-11-30T21:00:39 #rust-wasm <fitzgen> agreed, just making the case for cutting down on unstable when possible
2018-11-30T21:00:48 #rust-wasm <acrichto> yeah b/c the core should be fully "stable"
2018-11-30T21:00:52 #rust-wasm <fitzgen> and hopefully we can stabilize specialization soonish too!
2018-11-30T21:01:02 #rust-wasm <acrichto> you know I wonder...
2018-11-30T21:01:10 #rust-wasm <acrichto> I wonder if we can just literally put liballoc on crates.io
2018-11-30T21:01:22 #rust-wasm <acrichto> and libstd/liballoc just flat out don't unify
2018-11-30T21:01:33 #rust-wasm <acrichto> but it's the same source
2018-11-30T21:01:33 #rust-wasm <fitzgen> acrichto: did you see glandium's comment; he has ported the alloc trait and RawVec to its own crate
2018-11-30T21:01:38 #rust-wasm <acrichto> right yeah
2018-11-30T21:01:48 #rust-wasm <acrichto> and it'd be great if we could do something like that for libstd collections
2018-11-30T21:01:55 #rust-wasm <acrichto> (put on crates.io and version)
2018-11-30T21:02:01 #rust-wasm <fitzgen> 👍
2018-11-30T21:02:14 #rust-wasm <acrichto> well, so the tricky part here is that it's not clear we want these type parameters in libstd
2018-11-30T21:02:24 #rust-wasm <acrichto> in that it can provide a much worse experience for general users of rust
2018-11-30T21:02:30 #rust-wasm <acrichto> but we want to cater to this power user case too
2018-11-30T21:02:42 #rust-wasm <acrichto> and I'm wondering if a single-source-of-truth on crates.io could solve these issues
2018-11-30T21:02:52 #rust-wasm <acrichto> or something like that
2018-11-30T21:02:56 #rust-wasm <acrichto> anyway, just a random rambling
2018-11-30T21:04:44 #rust-wasm <fitzgen> acrichto: ah, so have the parameterized versions on crates.io, and tehn have libstd fix the A: Alloc to always be GlobalAlloc
2018-11-30T21:04:45 #rust-wasm <fitzgen> ?
2018-11-30T21:05:58 #rust-wasm <acrichto> something like that maybe?
2018-11-30T21:06:22 #rust-wasm <acrichto> it'd fix problems like (a) compiler error messages by default would still be "sane", (b) contributing to collections is oh my god so much easier
2018-11-30T21:06:31 #rust-wasm <acrichto> but it may make the code spaghetti
2018-11-30T21:06:37 #rust-wasm <acrichto> haven't thought this through at all
2018-11-30T21:07:00 #rust-wasm <acrichto> but I don't think it's a hard constraint this is in libstd, I think it's just a hard constraint that it's officially supported/maintained and easily available
2018-11-30T21:08:26 #rust-wasm <fitzgen> acrichto: soudns like an interesting idea to write down in a quick comment so it doesn't get lost
2018-11-30T21:08:28 #rust-wasm <fitzgen> ;_)
2018-11-30T21:08:30 #rust-wasm <fitzgen> ;)
2018-11-30T21:08:58 #rust-wasm <acrichto> lol all comments on that thread are basically already lost
2018-11-30T21:09:01 #rust-wasm <acrichto> it's like years old
2018-11-30T21:12:53 #rust-wasm <fitzgen> acrichto: we actually need the `fill`
2018-11-30T21:13:05 #rust-wasm <fitzgen> acrichto: otherwise you don't get a dense array
2018-11-30T21:13:12 #rust-wasm <fitzgen> you get a sparse array with empty holes in it
2018-11-30T21:13:16 #rust-wasm <acrichto> oh oops
2018-11-30T21:13:21 #rust-wasm * acrichto doesn't understand js
2018-11-30T21:13:28 #rust-wasm <fitzgen> yeah, its just one of those thigns
2018-11-30T21:13:36 #rust-wasm <acrichto> I'll make a PR
2018-11-30T21:13:40 #rust-wasm <fitzgen> 👍
2018-11-30T21:24:56 #rust-wasm <acrichto> fitzgen: https://github.com/rustwasm/wasm-bindgen/pull/1072
2018-12-01T04:50:18 #rust-wasm <mib_6o0vg3> quick
2018-12-01T14:08:42 #rust-wasm <SIMD-Lauper> yury: i cloned your fork and ran cmake, and it generated SOME vcxproj files but not for wasm2js, any idea why?
2018-12-01T14:11:37 #rust-wasm <drager> fitzgen: So, the issues that was blocking 2018 in rust-webpack-template is closed (not by my PR though). Now I'm looking for something new to do. I saw this; https://github.com/rustwasm/wasm-bindgen/issues/822 and I guess noone is working on this? However, I might need some guidence if I will take it.
2018-12-01T14:46:25 #rust-wasm <yury> SIMD-Lauper: nope, has the master the same issue?
2018-12-01T14:46:49 #rust-wasm * yury built patch on top of the master
2018-12-01T14:47:03 #rust-wasm <SIMD-Lauper> yury: not the master that i cloned from like 2 days ago
2018-12-01T14:48:53 #rust-wasm <yury> you can always try to apply https://github.com/WebAssembly/binaryen/commit/44de5dfdc91ed9b5be61d0655da5534363e0feb0.diff to master you have
2018-12-03T21:47:46 #rust-wasm <mvlabat> Hello!
2018-12-03T21:50:38 #rust-wasm <mvlabat> What’s the right way to use the local copy (fork) of wasm-bindgen in my projects? I’ve patched wasm-bindgen dependency, also installed wasm-binggen-cli with `cargo install --path . -f` (being in crates/cli folder). Is it the right way to go? Or do I miss something?
2018-12-03T21:54:15 #rust-wasm <mvlabat> Why I’m asking.. is because for some reason Parcel build tool hangs after trying to process the WASM file generated with my local wasm-bindgen. It does so both on master version and on c85f1b74e89895f7ddce39498d6374d6b22b7845 commit (the one that is published to crates.io, as I understand). If I switch back to the crates.io version (both project dependency and wasm-bindgen-cli), everything work fine again
2018-12-03T22:06:55 #rust-wasm <acrichto> mvlabat: that's the easiest thing I've found yeah, if you're depending on a fork of wasm-bindgen then if the CLI doesn't already work then install it locally w/ `--path .`
2018-12-03T22:07:12 #rust-wasm <acrichto> definitely not a great long-term solution, but long-term in theory we can take patches upstream :)
2018-12-03T22:13:13 #rust-wasm <mvlabat> acrichto: Yeah, I already installed the CLI that way, doesn’t work any way :(
2018-12-03T22:13:46 #rust-wasm <acrichto> mvlabat: oh? what's the error you're seeing?
2018-12-03T22:14:39 #rust-wasm <mvlabat> No error at all. It compiled successfully on wasm-bindgen side, but when Parcel is trying to process it, it just hangs
2018-12-03T22:14:46 #rust-wasm <mvlabat> with 100% cpu usage Oo
2018-12-03T22:18:35 #rust-wasm <acrichto> mvlabat: parcel or wasm-bindgen hangs?
2018-12-03T22:18:42 #rust-wasm <mvlabat> Parcel
2018-12-03T22:18:45 #rust-wasm <acrichto> oh dear!
2018-12-03T22:23:56 #rust-wasm <mvlabat> Yeah.. It also seems to be a problem on Parcel side, that something makes it freeze, but it still depends on the input that is generated with wasm-bindgen
2018-12-03T22:28:01 #rust-wasm <mvlabat> If there isn’t anything else I might have forgotten during installing wasm-bindgen from my local fork, I have no idea what to do then
2018-12-03T22:29:12 #rust-wasm <mvlabat> Maybe tomorrow I’ll try to compare wasm files that are generated with my local wasm-bindgen and the one from crates.io
2018-12-03T22:30:19 #rust-wasm <mvlabat> At least I can verify if they are indeed different. But I still have no idea how that information can help me )
2018-12-05T15:36:06 #rust-wasm <Jusstice_Ranger> Hello, can someone take a look at my problem here (https://www.reddit.com/r/learnrust/comments/a34ru6/how_can_i_convert_a_callback_workflow_to_an/) I'm trying to make an async XHR request using stdweb.
2018-12-05T19:27:14 #rust-wasm <till> fitzgen: fyi, I'm still trying to sort out my credit card situation and won't be able to make it even late to your current meeting :(
2018-12-05T19:27:18 #rust-wasm <till> I will be there for the next one
2018-12-06T14:10:21 #rust-wasm <Kirjava> say I have a long running WASM task I want to run in a worker and provide a JS API for
2018-12-06T14:10:33 #rust-wasm <Kirjava> I can't seem to find out how to do this with stdweb
2018-12-06T14:11:01 #rust-wasm <Kirjava> since stdweb dumps out a custom JS file, I'd need to embed that in the worker code somehow on compilation
2018-12-06T14:11:19 #rust-wasm <Kirjava> does cargo web support this at all?
2018-12-06T19:07:28 #rust-wasm <yury> Devin: https://paste.debian.net/1054679/
2018-12-06T19:08:33 #rust-wasm <yury> works with older version of ff (and canary can understand source map JSON)
2018-12-06T20:42:17 #rust-wasm <Devin> Ty yury !!
2018-12-06T20:44:03 #rust-wasm <Devin> ag_dubs: are you free this afternoon to meet and look at the iodide and wasm-pack demo?
2018-12-06T20:44:23 #rust-wasm <Devin> ag_dubs: I'm just working in the ET homeroom
2018-12-07T10:49:29 #rust-wasm <j_ey> how tricky is it to pass strings from js<->rust without using wasm-bindgen or webpack or any of those tools?
2018-12-07T11:54:36 #rust-wasm <j_ey> or is it possible to use wasm-bindgen without using webpack?
2018-12-07T13:28:14 #rust-wasm <Devin> j_ey: take a look at https://www.hellorust.com/
2018-12-07T13:28:28 #rust-wasm <Devin> atleast for the first question there
2018-12-07T13:44:46 #rust-wasm <j_ey> Devin: thanks
2018-12-07T13:49:47 #rust-wasm <j_ey> me and Kirjava were just talking about passing a &[u64] and converting it to a string
2018-12-07T13:50:53 #rust-wasm * Kirjava ears perk up
2018-12-07T13:52:01 #rust-wasm <Kirjava> j_ey: iirc I used rustc directly when I did it - dunno if that is still true
2018-12-07T13:52:44 #rust-wasm <Kirjava> I mean, all we need to do is get an export 
2018-12-07T13:52:53 #rust-wasm <Kirjava> then we can write some code to handle the slice
2018-12-07T13:53:04 #rust-wasm <Kirjava> IIRC I remember I had to use #[no_mangle]
2018-12-07T13:53:11 #rust-wasm <Kirjava> but not sure if anything else was required
2018-12-07T13:53:21 #rust-wasm <j_ey> no_manglenis needed for sure
2018-12-07T13:55:11 #rust-wasm <Kirjava> I'll try more experiments once I've finished these tickets at work
2018-12-07T13:55:17 #rust-wasm <Kirjava> it might turn out to be ez
2018-12-07T14:00:09 #rust-wasm <j_ey> I dont know anything about the imported/exported memory stuff
2018-12-07T14:03:34 #rust-wasm <Kirjava> well you can just return a value
2018-12-07T14:03:43 #rust-wasm <Kirjava> you don't have to read it from memory
2018-12-07T14:03:53 #rust-wasm <j_ey> but &[] isn't a value
2018-12-07T14:03:59 #rust-wasm <Kirjava> wait a section
2018-12-07T14:04:06 #rust-wasm <Kirjava> you could jsut return a pointer to CUBE
2018-12-07T14:04:31 #rust-wasm <Kirjava> and raw read the memory from the Wasm buffer via the JS api
2018-12-07T14:07:19 #rust-wasm <j_ey> sure.. but hard to know how that data is layed out, unless you use repr(C)
2018-12-07T14:17:44 #rust-wasm <Kirjava> maybe it's worth looking into how stdweb does it
2018-12-07T14:18:08 #rust-wasm <Kirjava> stdweb wraps the raw exports in its own thing
2018-12-07T14:18:40 #rust-wasm <Kirjava> and... maybe so you know how the data is layed out
2018-12-07T14:18:51 #rust-wasm <Kirjava> have a transform from CUBE to char* or something
2018-12-07T14:19:06 #rust-wasm <Kirjava> and just reference the string instead
2018-12-07T14:22:40 #rust-wasm <j_ey> sounds a bit gross
2018-12-07T14:22:51 #rust-wasm <j_ey> but also in my case I just need to take a string and return a string
2018-12-07T14:26:07 #rust-wasm <Kirjava> I mean I assume stdweb and was-bindgen are doing the same thing
2018-12-09T12:05:35 #rust-wasm <j_ey> has anyone tried to save a vec/box/slice to localStorage in js/wasm?
2018-12-09T12:39:11 #rust-wasm <Alexendoo> j_ey: You can do it as a similar way you would in plain JS, serialise it as json and store that
2018-12-09T12:53:39 #rust-wasm <j_ey> Alexendoo: good idea, forgot about json
2018-12-09T17:28:45 #rust-wasm <j_ey> anyone know a way to debug what is using memory in my wasm code?
2018-12-09T17:29:18 #rust-wasm <j_ey> Im allocating a big array (using Vec with into_boxed_slice)
2018-12-09T17:29:42 #rust-wasm <j_ey> I replace Box<[u64]> with Box<[u8]> but didn't see any noticable difference in Chrome's task manager
2018-12-09T17:54:32 #rust-wasm <j_ey> it's still using twice as much memory as I expect
2018-12-09T17:55:29 #rust-wasm <j_ey> the slice is [[u32; 7]; 5322240]. that's 150MB. but chrome is showing close to 400mb
2018-12-10T01:50:05 #rust-wasm <guest28> I installed console_error_panic_hook, and the only stack I've ever seen from it is this: https://pastebin.com/sUpEj416
2018-12-10T01:50:29 #rust-wasm <guest28> did I do it wrong? any tips on debugging this?
2018-12-10T21:18:37 #rust-wasm <fitzgen> neat: https://twitter.com/BSoptei/status/1072236634148626433
2018-12-10T21:18:43 #rust-wasm <fitzgen> acrichto: ag_dubs: ^
2018-12-10T21:39:14 #rust-wasm <acrichto> whoa!
2018-12-11T17:51:03 #rust-wasm <geal> hello
2018-12-11T17:51:33 #rust-wasm <geal> does anyone know what the $g0 global is in code examples like this one https://github.com/rustwasm/team/issues/218#issue-345568125 ?
2018-12-11T17:51:55 #rust-wasm <geal> I often see it in rust code compiled to wasm, but I do not know what it refers to
2018-12-11T18:51:05 #rust-wasm <acrichto> geal: that I believe is the stack pointer injected by LLVM
2018-12-11T18:51:08 #rust-wasm <acrichto> for llvm's "shadow stacsk"
2018-12-11T20:37:13 #rust-wasm <shinglyu> Hi, anyone know how to catch a rust panic (compiled to WASM) in JS? I tried JS try...catch, Firefox catches it correctly but Chromium doesn't. Is it a defined behavior?
2018-12-11T20:40:10 #rust-wasm <shinglyu> Ah I'm sorry, it catches correcly, it's my coding error
2018-12-11T20:56:19 #rust-wasm <froydnj> shiny: https://wasm.fastlylabs.com/docs (C/Rust/TypeScript)
2018-12-12T22:03:48 #rust-wasm <Kirjava> hi wasm fans
2018-12-12T22:04:03 #rust-wasm <Kirjava> I've been doing a little experiment with passing strings between rust and JS
2018-12-12T22:04:05 #rust-wasm <Kirjava> https://github.com/kirjavascript/wasm-string
2018-12-12T22:04:15 #rust-wasm <Kirjava> any feedback would be appreciated
2018-12-12T22:04:21 #rust-wasm <j_ey> Kirjava: hi, I can take a look
2018-12-13T16:36:02 #rust-wasm <fitzgen> WG meeting and open office hours starting in fifteen minutes: https://github.com/rustwasm/team/issues/240
2018-12-13T16:53:25 #rust-wasm <fitzgen> please use this room today: https://mozilla.zoom.us/j/807185060
2018-12-13T23:06:42 #rust-wasm <acrichto> tlively: pin
2018-12-13T23:06:43 #rust-wasm <acrichto> ping*
2018-12-13T23:09:53 #rust-wasm <tlively> hello!
2018-12-13T23:11:00 #rust-wasm <tlively> acrichto: pong
2018-12-13T23:11:13 #rust-wasm <acrichto> tlively: hey so I'm rewriting some simd stuff for wasm and am having some trouble getting the f32x4.min/max intrinsics working
2018-12-13T23:11:18 #rust-wasm <acrichto> (but everything else is looking good!)
2018-12-13T23:11:26 #rust-wasm <acrichto> so I originally thought this was a "fcmp ole" vs "fcmp ule" problem
2018-12-13T23:11:31 #rust-wasm <acrichto> but it looks like the translation supports both?
2018-12-13T23:11:37 #rust-wasm <acrichto> (we emit ordered operations)
2018-12-13T23:12:03 #rust-wasm <acrichto> right now I have this -- https://gist.github.com/alexcrichton/470488dadcfdc17fd2fb65e3c3aa333a
2018-12-13T23:12:12 #rust-wasm <acrichto> but it's generating a `f32x4.le` followed by a bitselect
2018-12-13T23:12:24 #rust-wasm <acrichto> I see the tests though for generating f32x4.min, but I'm not sure how we're differing :(
2018-12-13T23:12:30 #rust-wasm <acrichto> does any of this sound familiar?
2018-12-13T23:12:37 #rust-wasm <tlively> yup
2018-12-13T23:13:31 #rust-wasm <acrichto> is this an llvm bug or are we codegen'ing the wrong thing?
2018-12-13T23:13:39 #rust-wasm <tlively> consider %a has a NaN lane, then the llvm IR would select that output lane from %b since the compare would be false
2018-12-13T23:13:56 #rust-wasm <tlively> but min/max semantics would return the NaN from %a
2018-12-13T23:14:14 #rust-wasm <tlively> so your IR actually has different semantics from min
2018-12-13T23:14:19 #rust-wasm <acrichto> oh aha
2018-12-13T23:14:26 #rust-wasm <acrichto> I see if I scroll down this test file there's an actual intrinsic
2018-12-13T23:14:27 #rust-wasm <acrichto> d'oh
2018-12-13T23:15:04 #rust-wasm <tlively> yeah, it's kinda subtle
2018-12-13T23:16:42 #rust-wasm <acrichto> ok great! worked perfectly
2018-12-13T23:17:46 #rust-wasm <tlively> excellent! List of all intrinsics here: https://github.com/llvm-mirror/llvm/blob/master/include/llvm/IR/IntrinsicsWebAssembly.td
2018-12-13T23:18:11 #rust-wasm <acrichto> I think I've just finished hitting all of those now
2018-12-13T23:18:18 #rust-wasm <acrichto> these were just the last two
2018-12-13T23:18:28 #rust-wasm <tlively> ok awesome
2018-12-13T23:18:40 #rust-wasm <acrichto> ok sweet, as a follow-up, do you know if there's a node.js with the renumbrered opeocdes?
2018-12-13T23:18:43 #rust-wasm <acrichto> er, renumbered opcodes*
2018-12-13T23:18:46 #rust-wasm <acrichto> (dev or released)
2018-12-13T23:22:03 #rust-wasm <tlively> I do not know :( 
2018-12-13T23:22:13 #rust-wasm <acrichto> ah ok, no worries! I'll do some digging myself
2018-12-13T23:25:40 #rust-wasm <tlively> acrichto: Here are some differences between the proposal and v8 to be aware of https://bugs.chromium.org/p/v8/issues/detail?id=8460
2018-12-13T23:27:31 #rust-wasm <tlively> LLVM will not emit the i64x2 instructions unless you pass it the -wasm-enable-unimplemented-simd flag, but right now it will still emit the other unimplemented instructions
2018-12-13T23:28:09 #rust-wasm <acrichto> oh cool thanks for the heads up
2018-12-13T23:28:23 #rust-wasm <acrichto> I'd managed to find the -wasm-enable-unimplemented-simd (thanks to you awhile back) but hadn't seen that bug
2018-12-14T14:01:31 #rust-wasm <aruiz> hey, is there a wasm interpreter crate one can embed on another project?
2018-12-14T14:01:48 #rust-wasm <j_ey> wasmtime, wasmer
2018-12-14T14:01:56 #rust-wasm <aruiz> anything Mozilla is maintaining?
2018-12-14T14:02:01 #rust-wasm <j_ey> theyre JIT thoughs
2018-12-14T14:02:06 #rust-wasm <aruiz> yeah
2018-12-14T14:02:07 #rust-wasm <j_ey> wasmtime is by the cranelift guys
2018-12-14T14:02:16 #rust-wasm <aruiz> I'm looking for something implemented in Rust and embeddable
2018-12-14T14:02:27 #rust-wasm <j_ey> both of those are
2018-12-14T14:02:45 #rust-wasm <j_ey> actually not sure about wasmer, but wasmtime is
2018-12-14T14:02:46 #rust-wasm <aruiz> j_ey, thanks for the pointer!
2018-12-14T14:03:10 #rust-wasm <j_ey> wasmtime passes the spectests
2018-12-14T14:03:25 #rust-wasm <j_ey> but it still young, so will probably require changes to make it work like you want
2018-12-14T14:03:56 #rust-wasm <aruiz> gotcha, it's a good start, the people interested in this would probably be up to contribute upstream
2018-12-14T14:04:03 #rust-wasm <aruiz> I'm just the messenger here
2018-12-14T14:04:05 #rust-wasm <aruiz> :)
2018-12-14T14:04:34 #rust-wasm <j_ey> there's also wasmi I think, which is an actual interpreter
2018-12-14T14:07:05 #rust-wasm <sunfish> aruiz: wasmtime developer here, let me know how I can help :)
2018-12-14T14:07:49 #rust-wasm <j_ey> ^ one of the "cranelift guys" :D
2018-12-14T14:10:03 #rust-wasm <aruiz> sunfish, so there's a team at Red Hat working on a research project and they're looking into a Rust implementation of wasm they can embed, I promised them to do some reasearch as I was familiar with the Rust community
2018-12-14T14:10:34 #rust-wasm <aruiz> sunfish, if they wanted to have a chat with you what would be the right way to approach you?
2018-12-14T14:10:58 #rust-wasm <sunfish> i'm sunfish⊙mc
2018-12-14T14:20:57 #rust-wasm <aruiz> sunfish, great! I'll pass that on, thanks a lot!
2018-12-14T14:37:27 #rust-wasm <theduke> Hey there. Has anyone looked into creating bindings for webextensions?
2018-12-14T16:44:18 #rust-wasm <nagisa> where is wasm’s "C" abi specified?
2018-12-14T16:45:25 #rust-wasm <nagisa> alternatively, has the wasm ecosystem any ABI at all?
2018-12-14T16:46:56 #rust-wasm <sunfish> nagisa: it's not written down yet
2018-12-14T16:47:15 #rust-wasm <sunfish> nagisa: but there is a clang/llvm backend, which right now is serving as the de-facto C abi
2018-12-14T16:47:15 #rust-wasm <nagisa> then… how does software interoperate…?
2018-12-14T16:48:19 #rust-wasm <nagisa> how do I know what should I target with my hand-rolled wasm should interact with arbitrary code? (can’t avoid hand-rolling, because the code I’m writing is dealing with nitty-gritty machine details)
2018-12-14T16:48:28 #rust-wasm <sunfish> most of it, like struct layout, type sizes, calling conventions for non-aggregate non-varargs, is bog-standard
2018-12-14T16:49:13 #rust-wasm <nagisa> sunfish: things that matter to me: argument passing for usize-sized things (usizes, pointers, function pointers) and stack layout and register usage conventions
2018-12-14T16:49:54 #rust-wasm <sunfish> argument passing for usize-sized things is super-simple
2018-12-14T16:50:20 #rust-wasm <sunfish> wasm functions can have arbitrarily many arguments, so there's no concern about passing arguments in registers vs stack
2018-12-14T16:51:19 #rust-wasm <sunfish> stack layout on wasm is more abstract than it is in most machine languages
2018-12-14T16:51:41 #rust-wasm <sunfish> the return address and spilled registers are handled by the VM implicitly
2018-12-14T16:52:01 #rust-wasm <nagisa> okay, then I guess I won’t do myself the X/Y
2018-12-14T16:52:39 #rust-wasm <nagisa> I’m writing a portable library to switch a stack to an arbitrary allocation. I guess eventually wasm support will be desired as well (for portability)
2018-12-14T16:52:44 #rust-wasm <nagisa> what do I need to know
2018-12-14T16:53:12 #rust-wasm <sunfish> do you mean running on an alternate stack?
2018-12-14T16:54:12 #rust-wasm <nagisa> there are two modes of operation, running a given function pointer on an alternate stack, or running a given `-> !` on a different stack altogether
2018-12-14T16:54:20 #rust-wasm <sunfish> wasm's abstract stack layout basically makes that impossible
2018-12-14T16:54:39 #rust-wasm <nagisa> is stack "limited" in wasm at all?
2018-12-14T16:54:54 #rust-wasm <sunfish> the primary callstack is not in the address space
2018-12-14T16:55:19 #rust-wasm <nagisa> sunfish: I’ll be back in few mins
2018-12-14T16:55:24 #rust-wasm <sunfish> ok
2018-12-14T17:06:39 #rust-wasm <nagisa> okay, you said primary
2018-12-14T17:07:04 #rust-wasm <nagisa> I suppose that only holds the call frames (i.e. where to return etc), but not spilled variables?
2018-12-14T17:07:40 #rust-wasm * nagisa realises the question was stupid right after asking it
2018-12-14T17:08:34 #rust-wasm <nagisa> I’d guess primary callstack is where call frames are held, and secondary is for the function itself (i.e. the stack for the "stack machine")?
2018-12-14T17:10:01 #rust-wasm <nagisa> sunfish: am I right?
2018-12-14T17:10:33 #rust-wasm <sunfish> wasm is an infinite-virtual-register machine
2018-12-14T17:11:17 #rust-wasm <sunfish> so at the wasm isa level, there is no need for spilling anything; you just use as many registers as you need
2018-12-14T17:11:32 #rust-wasm <sunfish> any spilling is performed by the VM under the covers
2018-12-14T17:12:08 #rust-wasm <nagisa> Is there ever a limit (other than the one imposed by physical constraints) to the size of callstack and or any other secondary stacks (if they exist at all?)
2018-12-14T17:12:40 #rust-wasm <sunfish> VMs will have limits in practice
2018-12-14T17:13:00 #rust-wasm <sunfish> and the wasm spec requires that if you infinitely recurse you will hit a limit in a finite amount of time
2018-12-14T17:13:32 #rust-wasm <nagisa> the goal is not to support infinite recursion, but rather arbitrarily deep call stacks
2018-12-14T17:13:54 #rust-wasm <sunfish> it's ultimately up to the VM how big of a stack it gives you
2018-12-14T17:13:58 #rust-wasm <nagisa> (as long as machine, or in this case, VM, is able to support that) 
2018-12-14T17:14:31 #rust-wasm <nagisa> sunfish: in practice, the callstack is counted by the number of calls on the stack, right?
2018-12-14T17:14:51 #rust-wasm <nagisa> (as opposed to frame sizes with arbitrary virtual register spilling that could occur behind the scenes)
2018-12-14T17:15:01 #rust-wasm <sunfish> nagisa: no, the underlying stack frames also hold registers that the VM spills
2018-12-14T17:15:10 #rust-wasm <sunfish> the stack limit is not specified deterministically
2018-12-14T17:15:13 #rust-wasm <nagisa> huh
2018-12-14T17:15:28 #rust-wasm <nagisa> okay, so basically wasm cannot run rustc, confirmed :D
2018-12-14T17:15:41 #rust-wasm <sunfish> it has some problems running C too
2018-12-14T17:16:21 #rust-wasm <sunfish> but, I think this situation isn't too different from native: Rust can't guarantee any given number of call frames either
2018-12-14T17:17:12 #rust-wasm <nagisa> I said "rustc" (which, during compilation, might recurse into structures, where depth depends purely on the input) not "rust".
2018-12-14T17:17:25 #rust-wasm <nagisa> rustc specifically is why I’m doing this at all
2018-12-14T17:17:26 #rust-wasm <sunfish> ah, :)
2018-12-14T17:18:28 #rust-wasm <sunfish> so when I said "primary" before, the only caveat is that the convention is that in addition to the implicit call stack, the convention is to also maintain an explicit stack in memory
2018-12-14T17:18:38 #rust-wasm <sunfish> for things like user variables on the stack which have their addresses taken
2018-12-14T17:19:02 #rust-wasm <sunfish> some people call this the "shadow stack"
2018-12-14T17:19:48 #rust-wasm <sunfish> in theory, you could convert a wasm program into a giant state machine that stores everything it needs in this explicit stack, and doesn't use the implicit stack
2018-12-14T17:20:11 #rust-wasm <sunfish> in practice, that would be painfully invasive
2018-12-14T17:21:43 #rust-wasm <nagisa> idk, I feel that the recursion depth you can achieve should at least be semi-deterministic, as in "at least 10k frames" or whatever, rather than "rand() kB of stack, with virtual registers spilled onto it based on die roll”
2018-12-14T17:24:28 #rust-wasm <nagisa> as that can easily lead to a situation where we have wasm programs running fine on x86 (if some virtual registers happen to be backed at least partially by the actual machine registers) and not on some less obscure machine which has fewer actual machine registers.
2018-12-14T17:25:25 #rust-wasm * nagisa shrugs and goes to wrestle with mips, risc-v and sparc
2018-12-14T22:25:58 #rust-wasm <fitzgen> http://fitzgeraldnick.com/2018/12/14/rust-and-webassembly-in-2019.html
2018-12-15T22:13:07 #rust-wasm <robertbalicki> hi folks. wasm-bindgen-future's futures have an Item and an Error associated type, but futures in Rust (now) have only a single Item type
2018-12-15T22:14:48 #rust-wasm <robertbalicki> actually, I think I can just stay on the 0.1 version of futures. :-D ok bye
2018-12-15T22:46:42 #rust-wasm <robertbalicki> hi folks, could someone help me understand why the call to future_to_promise is necessary here? https://rustwasm.github.io/wasm-bindgen/api/wasm_bindgen_futures/index.html?search=
2018-12-15T22:47:26 #rust-wasm <robertbalicki> it looks like, from my code, that if you do not consume the future and turn it into a promise, any side effects that are chained to it do not get called
2018-12-15T22:47:53 #rust-wasm <robertbalicki> but the original Promise.resolve(null) obviously does call it's then block
2018-12-15T22:49:25 #rust-wasm <robertbalicki> I guess what I'm saying is - if I start with a Promise.resolve, what are my options for executing it in wasm land? Ideally, I would like to not consume the future
2018-12-17T16:50:00 #rust-wasm <luke> from a HN comment on fitzgen's 2018 roadmap post: "Nearly every time I read an article about Rust and WASM I feel happy and hopeful. I think the work Rust has done here has been ridiculously valuable for setting a tone and a standard for what WASM-targetting languages should be."
2018-12-17T18:09:36 #rust-wasm <drager> :)
2018-12-17T20:43:26 #rust-wasm <drager> Any idea when 0.6.0 of wasm-pack will be released? Someone was asking in a github issue. Ping ag_dubs 
2018-12-18T14:01:33 #rust-wasm <drager> ag_dubs: Let me know if you need any help at all for the 0.6 release of wasm-pack. Happy to help if I can :)
2018-12-18T14:02:45 #rust-wasm <ag_dubs> thank u so much @drager- i would absolutely love help with review of the changelog ! im also going to make a pr to update the library for rust 2018- ill ping u when the PRs are up :) thank u so much for offering ❤️
2018-12-18T14:05:45 #rust-wasm <drager> Of course, just happy to help! :)
2018-12-18T14:09:19 #rust-wasm <j_ey> is wasm-bindgen always going to rely on node/webpack?
2018-12-18T14:35:01 #rust-wasm <drager> j_ey: IIRC webpack isn't required
2018-12-18T14:36:39 #rust-wasm <drager> j_ey: https://github.com/rustwasm/wasm-bindgen/tree/master/examples/no_modules
2018-12-18T14:38:45 #rust-wasm <j_ey> drager: ooh, this could be what I want
2018-12-18T14:44:35 #rust-wasm <j_ey> not currently planning on use node/webpack/any js modules, but wasm-bindgen does make it nice to pass strings etc. https://stackoverflow.com/a/47676844 currently using something like this
2018-12-18T14:51:19 #rust-wasm <j_ey> if anyone wants to run that example and show me what no_modules.js contains, that'd be nice!
2018-12-19T01:24:40 #rust-wasm <warner> hey folks, got a question: I'm trying to combine wasm code that comes from Rust, with wasm code that comes from C, together into the same wasm module
2018-12-19T01:25:13 #rust-wasm <warner> where the rust needs to call into the C code, and vice versa, except both of those get turned into wasm code calling other wasm code
2018-12-19T01:26:01 #rust-wasm <warner> my first thought is that I need to interrupt emscripten before it finishes linking, and take the .bc files it created and somehow feed them into the rustc linking process
2018-12-19T01:26:36 #rust-wasm <warner> except that rust wants .rlib or .so or .a, and I don't even know if the two toolchains are using compatible versions of LLVM anyways
2018-12-19T01:27:06 #rust-wasm <warner> has anyone tried this before, or could point me in the right direction?
2018-12-19T10:08:15 #rust-wasm <Kirjava> hey, I've written a wasm project without wasm-bindgen or stdweb
2018-12-19T10:08:30 #rust-wasm <Kirjava> how do I hook into when something panics
2018-12-19T10:09:28 #rust-wasm <drager> Kirjava: https://github.com/rustwasm/console_error_panic_hook
2018-12-19T10:09:38 #rust-wasm <Kirjava> ooh
2018-12-19T10:09:39 #rust-wasm <Kirjava> thanks
2018-12-19T10:09:59 #rust-wasm <drager> Oh, but that depends on wasm-bindgen
2018-12-19T10:11:14 #rust-wasm <Kirjava> oh :c
2018-12-19T10:12:28 #rust-wasm <Kirjava> thanks for the tip, anyway
2018-12-19T10:17:49 #rust-wasm <j_ey> Kirjava: hm, I thought I just got panics in the console by default
2018-12-19T10:25:06 #rust-wasm <Kirjava> apparently not
2018-12-19T10:25:34 #rust-wasm <j_ey> *shrug* I definitely saw stuff in the console.log
2018-12-19T10:26:14 #rust-wasm <Kirjava> try again tonight
2018-12-19T10:26:16 #rust-wasm <Kirjava> or not :P
2018-12-19T10:29:44 #rust-wasm <Kirjava> really I just need to know if it *does* panic
2018-12-19T10:29:50 #rust-wasm <Kirjava> because I can just try it in the console then
2018-12-19T10:49:21 #rust-wasm <Kirjava> j_ey: https://github.com/kirjavascript/duplex/commit/04e2aa35f599eba613212cd84c8a99ed9eb89462
2018-12-19T10:52:40 #rust-wasm <j_ey> Kirjava: pretty simple
2018-12-19T10:52:52 #rust-wasm <Kirjava> yeah
2018-12-19T10:53:14 #rust-wasm <Kirjava> adding console warn/error support
2018-12-19T10:53:47 #rust-wasm <j_ey> maybe my 'panic' was actually from the JS side
2018-12-19T10:55:49 #rust-wasm <Kirjava> surely not
2018-12-19T10:55:58 #rust-wasm <Kirjava> dunno try replicate it tonight
2018-12-19T10:55:59 #rust-wasm <j_ey> I mean the error I saw in the console
2018-12-19T10:56:16 #rust-wasm <Kirjava> ah, 'panic'
2018-12-19T10:56:20 #rust-wasm <Kirjava> yeah
2018-12-19T10:56:25 #rust-wasm <Kirjava> this is cool though
2018-12-19T10:56:29 #rust-wasm <Kirjava> got a nice little library going
2018-12-19T12:10:01 #rust-wasm <j_ey> hi
2018-12-19T19:34:34 #rust-wasm <drager> ag_dubs: For a watch command for wasm-pack, maybe it's possible to leverage cargo-watch? https://github.com/passcod/cargo-watch
2018-12-19T19:46:58 #rust-wasm <ag_dubs> @drager - yeah i was thinking that!
2018-12-19T19:47:06 #rust-wasm <ag_dubs> i've used cargo watch before and it's pretty great
2018-12-19T20:02:34 #rust-wasm <drager> Awesome!
2018-12-21T16:55:53 #rust-wasm <fabrice> is anyone here familiar with wasmtime?
2018-12-21T16:56:04 #rust-wasm <sunfish> fabrice: I am :)
2018-12-21T16:57:09 #rust-wasm <fabrice> ha ha :) So, I have one question: I'm looking at using it as a library in a Rust program, and I'd like to expose some Rust code to wasm. I guess this needs some Rust API bindings? is that possible today?
2018-12-21T16:57:31 #rust-wasm <fabrice> sunfish: ^
2018-12-21T16:58:14 #rust-wasm <sunfish> fabrice: we don't have all the pieces published on crates.io yet, but I expect we'll do that soon
2018-12-21T16:58:46 #rust-wasm <sunfish> and then yes, that's something that wasmtime will be able to do
2018-12-21T16:59:45 #rust-wasm <fabrice> sunfish: very nice. do you have a rough ETA in mind?
2018-12-21T17:00:49 #rust-wasm <sunfish> for a 0.x crate, where we're not saying anything about API compatiblity, we can do that as soon as we settle on the right name :)
2018-12-21T17:01:37 #rust-wasm <sunfish> i'm thinking about renaming wasmtime-execute to wasmtime-jit, but i'm not sure yet
2018-12-21T17:03:05 #rust-wasm <fabrice> sunfish: I don't mind using the git version, I'm just toying around for now
2018-12-21T17:03:10 #rust-wasm <sunfish> ok, cool
2018-12-21T17:03:19 #rust-wasm <fabrice> even helping if I can
2018-12-21T17:03:51 #rust-wasm <sunfish> that'd be great! a lot of basic functionality is in place (spec testsuite passes on mac and linux), but there are a bunch of rough edges still
2018-12-21T17:05:44 #rust-wasm <sunfish> so let me know if there's anything i can help with!
2018-12-21T17:07:00 #rust-wasm <fabrice> sunfish: well, I have no idea where to start :)
2018-12-21T17:08:00 #rust-wasm <sunfish> fabrice: take a look at src/wasmtime.rs, that's the command-line driver, and also an example of how to create an instance
2018-12-21T17:08:45 #rust-wasm <sunfish> using the wasmtime_execute crate's API
2018-12-21T17:10:11 #rust-wasm <sunfish> then to call functions from Rust code, the simplest way is to call `invoke` on an `InstancePlus`
2018-12-21T17:11:24 #rust-wasm <sunfish> (speaking of things that may need renaming... ;-))
2018-12-21T17:11:28 #rust-wasm <fabrice> ok, I'll look at that
2018-12-21T17:13:33 #rust-wasm <fabrice> sunfish: probably unrelated, is CommonWA still a thing? the repo/spec doesn't seem very active
2018-12-21T17:14:11 #rust-wasm <sunfish> fabrice: i think everyone's busy doing other things right now
2018-12-21T17:14:23 #rust-wasm <sunfish> but there definitely still is a need to define a common set of platform APIs
2018-12-21T17:14:57 #rust-wasm <sunfish> I myself am currently working on building a CloudABI-like API in wasmtime, to allow access to files, networking, etc.
2018-12-21T17:15:09 #rust-wasm <fabrice> sunfish: right, I was wondering how some manage to run a cross compiled nginx 
2018-12-21T17:15:12 #rust-wasm <sunfish> and I hope to propose it as a shared spec
2018-12-21T17:16:44 #rust-wasm <sunfish> the nginx demos are currently done by compiling with Emscripten, and then having wasm engines replace Emscripten's JS code
2018-12-21T17:17:34 #rust-wasm <sunfish> this works, and was the fastest path to getting a demo up and running, however Emscripten's JS APIs weren't really designed to be used like this, so it's pretty hairy
2018-12-21T17:19:12 #rust-wasm <fabrice> I see...
2018-12-21T17:19:13 #rust-wasm <sunfish> some of the nginx demos are also completely unsandboxed. they just expose raw OS syscalls as wasm imports
2018-12-21T17:19:24 #rust-wasm <fabrice> lol
2018-12-21T17:19:52 #rust-wasm <sunfish> which you can do, and could be done with wasmtime too, as long as you're aware of the consequences :)
2018-12-21T17:22:08 #rust-wasm <fabrice> I think I don't like the consequences :)
2018-12-21T22:22:05 #rust-wasm <Caspy7> anyone know how the simd standardization is going?
2018-12-22T04:28:26 #rust-wasm <Caspy7> relevant: https://www.reddit.com/r/rust/comments/a8hrjh/will_we_eventually_be_able_to_avoid_all_garbage/
2018-12-22T15:01:21 #rust-wasm <wuto-M> "the DOM itself is garbage collected" thought it's GCed only in servo, and RCed in other browsers?
2018-12-22T15:19:21 #rust-wasm <groves> Hey, does somebody know if there is a way to generate source maps (including locals) in wasm32-unknown-unknown targets with rustc directly? I found a working example at https://github.com/yurydelendik/old-man-sandbox/tree/master/rust-wasm-hey but it seems to use the emscripten toolchain for source map generation
2018-12-22T15:20:12 #rust-wasm <groves> New to the rust-wasm space and trying to figure out the state of the art :)
2018-12-23T07:24:07 #rust-wasm <hyperion101010> https://pastebin.com/DRiLZhbC
2018-12-23T07:24:17 #rust-wasm <hyperion101010> i am having a trouble setting things up
2018-12-23T13:48:04 #rust-wasm <dodj> Hey, can you convert a `wasm_bindgen::Closure` to a `js_sys::Function`?
2018-12-23T13:49:20 #rust-wasm <dodj> Hmm looks like you do `a.as_ref().unchecked_ref()`
2018-12-23T15:11:47 #rust-wasm <dodj> Another question: if I want to execute a future in rust code on wasm-bindgen, how do I do that? I don't want to block the thread, I probably want to poll each js tick.
2018-12-23T17:47:53 #rust-wasm <noom> Hey guys
2018-12-23T17:50:25 #rust-wasm <noom> I'm having trouble trying to deploy a wasm app. When I run `cargo web start`, I can go to localhost:8000 and the app works. When I try to use the file created by `cargo web deploy` by opening index.html I get in the browser console this error "Error loading Rust wasm module 'rustydowndown': TypeError: 'Response has unsupported MIME type'" two times
2018-12-23T17:50:45 #rust-wasm <noom> and the app isn't showing up
2018-12-23T17:51:26 #rust-wasm <noom> I tried to serve the files via a server ran with nodejs and express but it does the same: error and blank page
2018-12-23T17:51:50 #rust-wasm <noom> what can I do to fix this?
2018-12-23T23:11:26 #rust-wasm <JD557> Hey everyone, I'm having some problems with the latest versions of Firefox (stable and nightly) and `wasm32-unknown-emscripten`. Am I the only one?
2018-12-23T23:11:59 #rust-wasm <JD557> (I have an old build that used to work that's now failing, so this is probably a FF bug)
2018-12-25T11:26:47 #rust-wasm <hyperion101010> hi there 
2018-12-25T12:35:26 #rust-wasm <hyperion101010> i had a problem in 
2018-12-25T12:35:29 #rust-wasm <hyperion101010> emscripten
2018-12-26T12:31:31 #rust-wasm <hyperion101010> hi there
2018-12-26T12:33:30 #rust-wasm <hyperion101010> https://pastebin.com/DptPsuXr
2018-12-26T12:35:02 #rust-wasm <j_ey> -std=c++11
2018-12-26T12:35:09 #rust-wasm <j_ey> probably/maybe
2018-12-26T12:35:14 #rust-wasm <hyperion101010> i am having problem using web assembly compiler emcc , why can't it compile a correct file ?
2018-12-26T12:35:32 #rust-wasm <hyperion101010> when i run make , it gets stuck
2018-12-26T12:35:48 #rust-wasm <hyperion101010> what should be the correct format of instructions ?
2018-12-26T12:35:52 #rust-wasm <hyperion101010> L_ey
2018-12-26T12:35:57 #rust-wasm <hyperion101010> j_ey
2018-12-26T12:36:20 #rust-wasm <j_ey> add that flag
2018-12-26T12:37:02 #rust-wasm <hyperion101010> oh i was trying this hard
2018-12-26T12:37:22 #rust-wasm <hyperion101010> the code on google code labs , didn't worked properly
2018-12-26T12:37:52 #rust-wasm <hyperion101010> anyway j_ey
2018-12-26T12:37:55 #rust-wasm <hyperion101010> are you free 
2018-12-26T12:38:00 #rust-wasm <hyperion101010> i have some doubts
2018-12-26T12:38:10 #rust-wasm <j_ey> about?
2018-12-26T12:38:39 #rust-wasm <hyperion101010>  i am new to contribute for open source , and i want to help firefox along jit and web assembly
2018-12-26T12:39:30 #rust-wasm <hyperion101010> i have done some research , new components keep on getting added for wasm
2018-12-26T12:39:44 #rust-wasm <hyperion101010> what can i do to get good grasp of it ?
2018-12-26T12:40:40 #rust-wasm <hyperion101010> it seems too confusing at first 
2018-12-26T12:40:47 #rust-wasm <j_ey> find a particular component that interests you and look at what issues they have
2018-12-26T12:41:04 #rust-wasm <hyperion101010> aha , its web assembly
2018-12-26T12:41:51 #rust-wasm <hyperion101010> any resource i can study to get favourable with basics ?
2018-12-26T12:41:56 #rust-wasm <hyperion101010> j_ey
2018-12-26T12:42:43 #rust-wasm <j_ey> I dont know, sorry
2018-12-26T12:42:55 #rust-wasm <hyperion101010> very well 
2018-12-26T12:43:19 #rust-wasm <j_ey> just google for some tutorials I suppose
2018-12-26T12:43:26 #rust-wasm <hyperion101010> on it 
2018-12-26T12:43:37 #rust-wasm <hyperion101010> so this is the group for doubts on wasm ?
2018-12-26T12:43:45 #rust-wasm <j_ey> doubts? 
2018-12-26T12:44:10 #rust-wasm <hyperion101010> like if i am stuck at some point ,due to lack of knowledge
2018-12-26T12:44:30 #rust-wasm <j_ey> this is specifically for rust + wasm
2018-12-26T12:53:15 #rust-wasm <hyperion101010> https://pastebin.com/p2stpqbq
2018-12-26T12:53:18 #rust-wasm <hyperion101010> j_ey
2018-12-26T12:53:28 #rust-wasm <hyperion101010> why is file empty
2018-12-26T12:53:30 #rust-wasm <hyperion101010> ls
2018-12-26T12:53:56 #rust-wasm <j_ey> I dont know, never used emscripten
2018-12-26T21:41:49 #rust-wasm <nstoddard> Hi, I'm trying to load a binary file with the fetch API, using wasm_bindgen+web_sys. How can I convert the resulting ArrayBuffer into a rust Vec?
2018-12-28T16:22:47 #rust-wasm <ag_dubs> anyone around who wants to help me debug a weird CI issue with the wasm-pack template?
2018-12-28T16:26:33 #rust-wasm <drager> ag_dubs: I'm here, I can try to help you out if you'd like
2018-12-28T16:27:05 #rust-wasm <drager> Not sure how much I can help though :P
2018-12-28T16:29:16 #rust-wasm <ag_dubs> heh- so i *think* i've figured out why, but it's this PR: https://github.com/rustwasm/wasm-pack-template/pull/34
2018-12-28T16:29:24 #rust-wasm <ag_dubs> and it's weird cuz it passes on PR but not on push
2018-12-28T16:29:35 #rust-wasm <ag_dubs> and i *think* it's because the push is in detached head mode
2018-12-28T16:29:38 #rust-wasm <ag_dubs> and PR isn't
2018-12-28T16:29:43 #rust-wasm <ag_dubs> but it's a weird one
2018-12-28T16:30:11 #rust-wasm <ag_dubs> i just restarted the pr one
2018-12-28T16:30:37 #rust-wasm * drager looks
2018-12-28T16:31:53 #rust-wasm <ag_dubs> the cargo-generate 0.2.2 fixes the relative path issue for sure, i just dont love that the push and pr ci tests are acting differently
2018-12-28T16:32:32 #rust-wasm <ag_dubs> my guess is its some funky git thing
2018-12-28T16:32:52 #rust-wasm <drager> Right, I see. Sound weird alright
2018-12-28T16:34:08 #rust-wasm <drager> https://github.com/travis-ci/travis-ci/issues/1701
2018-12-28T16:34:17 #rust-wasm <drager> Might be worth a read
2018-12-28T16:36:30 #rust-wasm <ag_dubs> i *think* it's possible that the push test is using a shallow clone, in which case it's true it can't find master
2018-12-28T16:36:44 #rust-wasm <ag_dubs> yeah this issue is good- reading now!
2018-12-28T16:36:48 #rust-wasm <ag_dubs> thanks for linking :)
2018-12-28T16:38:03 #rust-wasm <drager> np :)
2018-12-28T16:38:16 #rust-wasm <drager> Were you able to reproduce it locally?
2018-12-28T16:39:02 #rust-wasm <ag_dubs> was about to test, but yeah i think it's the case
2018-12-28T16:39:11 #rust-wasm <ag_dubs> this is potentially something i can teach cargo-generate to handle
2018-12-28T16:39:32 #rust-wasm <ag_dubs> *or* alternatively we try some of the workarounds from comments on that issue to make the travis behave how we want
2018-12-28T16:39:38 #rust-wasm <ag_dubs> or... we turn off push tests
2018-12-28T16:39:42 #rust-wasm <ag_dubs> lots of options hehe
2018-12-28T16:40:04 #rust-wasm <drager> hehe yeah
2018-12-28T17:24:53 #rust-wasm <drager> How's it going with the 0.6 release btw? :)
2018-12-28T18:15:12 #rust-wasm <drager> btw, I was able to reproduce the wasm-pack-template issue locally.
2018-12-28T21:21:04 #rust-wasm <Shrekie> Hello there
2018-12-29T09:43:42 #rust-wasm <ryan___> Hello - having trouble following the first example in the wasm-bindgen book.
2018-12-29T09:43:59 #rust-wasm <ryan___> Running into an error with rust-lld when I run cargo build. Any ideas?
2018-12-29T09:44:05 #rust-wasm <ryan___> I have the log if needed!
2018-12-30T13:31:07 #rust-wasm <TTT> i hope this mother fucker  @alexcrichton dies soon
2018-12-30T13:31:45 #rust-wasm <TTT> that bastard never showed me this IRC, what a cheap garbage human
2018-12-30T13:36:20 #rust-wasm <TTT> violence bigets violence
2018-12-31T00:50:16 #rust-wasm <iamcodemaker> hi, I'm trying out the rust wasm parcel template and it looks like my default-features aren't actually being passed through to rustc when it builds my code
2018-12-31T00:54:30 #rust-wasm <iamcodemaker> same thing happens with cargo build, maybe i'm missing something
2018-12-31T12:08:49 #rust-wasm <TTT1> Hey yo  @alexcrichton , you sicko, cheapo, hope you die soon
2019-01-01T01:44:14 #rust-wasm <iamcodemaker> wasm-pack test seems to ignore doctests, how can I run doctests using wasm-pack?
2019-01-02T20:37:21 #rust-wasm <synlestidae> I have a wasm project built with wasm-pack. I am wondering about a RuntimeError: index out of bounds I get on an i32.store instruction
2019-01-02T20:40:25 #rust-wasm <synlestidae> the code runs fine when target is x86
2019-01-03T20:17:43 #rust-wasm <tewk> Does webpack allow for static import of wasm?  Is there an online example anywhere?
2019-01-03T20:28:11 #rust-wasm <ag_dubs> @tewk what do you mean by "static import" exactly?
2019-01-03T20:28:13 #rust-wasm <yury> tewk: https://github.com/webpack/webpack/blob/e871eeb121a69efd6cbfa56f977d5843bf030202/examples/wasm-simple/README.md
2019-01-03T20:28:43 #rust-wasm <yury> see math.js
2019-01-03T20:55:24 #rust-wasm <tewk> I'm tyring use the https://github.com/rustwasm/create-wasm-app/blob/master/bootstrap.js example in typescript, but webpack seems to convert that dynamic import into a normal import.
2019-01-03T20:56:16 #rust-wasm <tewk> https://gist.github.com/tewk/a513d4baeccdc49b79460b429b80dae5
2019-01-03T20:57:56 #rust-wasm <yury> tewk: yes, you need to include chunk/module with "static" import via dynamic import
2019-01-03T20:58:01 #rust-wasm <yury> it is the price
2019-01-03T20:58:47 #rust-wasm <yury> but within the js of the chunk you can use static wasm imports
2019-01-03T20:59:49 #rust-wasm <yury> so e.g. you will need to do `import('./math.js').then(...)`
2019-01-03T22:14:43 #rust-wasm <warner> hey folks.. I'm trying to link some emscripten-generated wasm code (translated from C) in with wasm generated by Rust
2019-01-03T22:14:58 #rust-wasm <warner> can anyone think of a place where this has been done before, maybe an example I could study?
2019-01-03T22:15:48 #rust-wasm <warner> I don't know how much rust's workflow is able to accomodate externally-generated .bc files
2019-01-04T14:00:08 #rust-wasm <ryanlevick> Hello - Is there currently any general tooling for reading typescript declaration files and emitting the correct extern {} blocks for a library in a way that is compatible with wasm-bindgen? 
2019-01-04T14:00:21 #rust-wasm <ryanlevick> I see the start of a TypeScript parser here: https://github.com/rustwasm/wasm-bindgen/blob/master/crates/typescript/src/definitions.rs
2019-01-04T14:00:43 #rust-wasm <ryanlevick> Maybe @acrichto is the one to know 
2019-01-04T14:06:17 #rust-wasm <ryanlevick> Ah found this: https://github.com/rustwasm/wasm-bindgen/pull/228 that helps put my previous link in context
2019-01-04T14:08:48 #rust-wasm <ryanlevick> @spastorino are there things blocking progress on the typescript parsing and code generation? Or does it just not have anyone to take it on right now?
2019-01-04T16:00:45 #rust-wasm <acrichto> ryanlevick: ah yeah the current state is we'd like to have this at some point, but it's not currently at a point where it's usable!
2019-01-04T16:02:19 #rust-wasm <ryanlevick> Yea I poked around a bit and found that the wasm-bindgen-typescript doesn't build. It's harded coded to the local version of wasm-bindgen-backend but that crate has since changed APIs
2019-01-04T16:03:00 #rust-wasm <ryanlevick> It also relies on JavaScript tooling to work (which is fairly poorly documented). I understand why this is the case - writing a typescript parser in Rust would be quite the project...
2019-01-04T16:03:14 #rust-wasm <ryanlevick> I wonder what the best path forward is..
2019-01-04T16:03:57 #rust-wasm <j_ey> I thought I saw someone working on a typescript parser on rust
2019-01-04T16:05:04 #rust-wasm <ryanlevick> I saw a JavaScript one a while back but don't remember seeing a TS one
2019-01-04T17:54:53 #rust-wasm <drager> I also recall seeing a TS one somewhere
2019-01-04T20:31:52 #rust-wasm <Devin> its probably been said already, but happy new year folks! I wanted to follow up with acrichto about some performance questions he asked me about back at the all hands. I have since created a repo here https://gitlab.com/debyly/benching-ndarrays to reproduce my findings. The wasm src is at https://github.com/iodide-project/untitled-math-project/tree/wasm_pack. cheers! 
2019-01-04T20:32:26 #rust-wasm <Devin> thanks as always for all the hard work
2019-01-04T22:40:12 #rust-wasm <Devin> ZQ
2019-01-07T18:28:48 #rust-wasm <fitzgen> hello everyone! back from vacation :)
2019-01-07T19:42:31 #rust-wasm <drager> Hello! Welcome back :)
2019-01-07T20:29:55 #rust-wasm <tewk> Is there a howto on how to generate source maps for rust compiled to wasm?
2019-01-07T20:40:07 #rust-wasm <yury> tewk: there is dwarf-to-json cli tool on npm to generate source map from DWARF sections
2019-01-07T20:41:19 #rust-wasm <yury> you can specify HTTP SourceMap header for wasm file to point to this file
2019-01-09T10:48:18 #rust-wasm <xu> #quit
2019-01-09T19:18:25 #rust-wasm <j_ey> will it ever be possible to use std::time::Instant?
2019-01-09T19:56:54 #rust-wasm <jessm> j_ey: https://rustwasm.github.io/wasm-bindgen/examples/performance.html
2019-01-09T19:56:59 #rust-wasm <jessm> does that not work for u
2019-01-09T19:57:48 #rust-wasm <j_ey> Im not using bindgen
2019-01-09T19:57:55 #rust-wasm <jessm> o
2019-01-09T19:58:51 #rust-wasm <j_ey> maybe I will look at using it
2019-01-09T19:59:23 #rust-wasm <jessm> maybe just look at how web_sys implements that and try to just extract the source needed for that functionality. If your goal is to avoid taking everything else with it.
2019-01-09T20:00:33 #rust-wasm <jessm> actually in cargo for web sys you can specify exactly what you want anyway. So that prob isnt neccessary.
2019-01-10T16:37:43 #rust-wasm <ekidd> Hello! Assuming I did the timezone math correctly, the Rust WebAssembly WG will meet online in about 23 minutes, correct?
2019-01-10T16:45:12 #rust-wasm <sgift> ekidd:
2019-01-10T16:45:13 #rust-wasm <sgift> rylevToday at 5:44 PM
2019-01-10T16:45:13 #rust-wasm <sgift> They did the math correctly. Here's the full info: https://github.com/rustwasm/team/issues/244
2019-01-10T16:52:55 #rust-wasm <ekidd> When I try to connect to meeting 807185060 (mentioned in the bug), it says that meeting ID is not valid.
2019-01-10T16:53:07 #rust-wasm <fitzgen> WG meeting starting in 8 minutes! https://github.com/rustwasm/team/issues/244
2019-01-10T16:54:56 #rust-wasm <sgift> ekidd: No idea. Maybe it needs to be open first .. try again or maybe someone else has an idea
2019-01-11T16:14:13 #rust-wasm <singpolyma> Hello!  I'm wondering if rustc currently has an option to reserve (leave unused by rust) some space at the beginning of linear memory.  Both assemblyscript and emcc have an option like this, and it's very useful to be able to pass a complex data structure in to a WASM module without knowing the specifics of the memory allocator (if any) for the language used to build the module.  Also, if this is 
2019-01-11T16:14:19 #rust-wasm <singpolyma> the wrong place to ask, feel free to direct me elsewhere :)
2019-01-11T16:34:28 #rust-wasm <singpolyma> Ok, it looks like -C link-arg=--global-base=4000 is close, but rustc passes --stack-first to the linker and I don't see any --no-stack-first or similar I can use to override that
2019-01-11T16:41:18 #rust-wasm <yury> singpolyma: there is what wasm-ld do https://github.com/llvm-mirror/lld/blob/f6c795c64515e043b735a78f0d2b278db29738a1/wasm/Writer.cpp#L645
2019-01-11T16:45:40 #rust-wasm <singpolyma> Ok, so that looks like what I expected: if I set --global-base and *not* --stack-first, it will do what I want.  Is there any way to ask rustc to not pass --stack-first ?
2019-01-11T16:46:09 #rust-wasm <yury> There is also a reason for stack-first https://github.com/rust-lang/rust/blob/79d8a0fcefa5134db2a94739b1d18daa01fc6e9f/src/librustc_codegen_ssa/back/linker.rs#L995
2019-01-11T16:48:21 #rust-wasm <singpolyma> Right, I understand there are trade-offs
2019-01-11T16:48:21 #rust-wasm <yury> I guess it is mostly "can cause some exceedingly weird bugs."
2019-01-11T16:48:38 #rust-wasm <singpolyma> Hmm... that doc also says there is always a blank page at the start anyway?
2019-01-11T16:50:47 #rust-wasm <yury> I guess best ways to proceed here: a) ask wasm llvm to consider stack-first option to regard global-base, b) ask for option in rustc to cancel stack-first
2019-01-11T16:52:39 #rust-wasm <singpolyma> Hmm... since there is currently no way to detect stack overflow if I place things before the stack, wouldn't (a) actually be the same as requesting a stack size of (current size + base address) ?  In which case, maybe that's all I need for now
2019-01-11T16:54:32 #rust-wasm <yury> indeed
2019-01-11T17:44:20 #rust-wasm <acrichto> singpolyma: I'd recommen using build scripts and `include_bytes!` where possible instead of tweaking the wasm layout
2019-01-11T17:44:34 #rust-wasm <acrichto> it's more composable and workable in the long run, but it may not work well for your use case
2019-01-11T18:45:22 #rust-wasm <drager> ag_dubs: Just noticed you submitted a PR for the 0.6.0 release and as I said before, feel free to ping me if you need any help at all :)
2019-01-11T19:05:43 #rust-wasm <ag_dubs> thanks so much @drager ! will definitely do!
2019-01-11T19:20:41 #rust-wasm <drager> :)
2019-01-11T20:12:34 #rust-wasm <drager> ag_dubs: I'm currently working on the "build docs for more releases" but not really sure how far back I should go. I was first thinking that I could cover all of them but now I just noticed there's no docs checked in into the repo for some tags, such as 0.2.0 etc.
2019-01-11T20:17:11 #rust-wasm <drager> And how was the book published before? E.g v0.4.2 there's no SUMMARY.md and no sign of building the book in .travis.yml?
2019-01-11T20:31:59 #rust-wasm <ag_dubs> yeah for a long time the readme was the only docs
2019-01-11T20:32:06 #rust-wasm <ag_dubs> and then it was just rustdoc (for internal API docs)
2019-01-11T20:32:18 #rust-wasm <ag_dubs> i can figure out exactly when that started
2019-01-11T20:33:08 #rust-wasm <ag_dubs> right now i'm trying to sort why the log pr is failing
2019-01-11T20:33:12 #rust-wasm <ag_dubs> but github is also down sooooo
2019-01-11T20:34:54 #rust-wasm <drager> I see, should I skip some docs and just focus on new? > 0.5.x? and master? We can take this discussion later if you're busy of course.
2019-01-11T20:35:00 #rust-wasm <drager> Is Github down? :o
2019-01-11T20:37:01 #rust-wasm <sgift> works here
2019-01-11T20:37:34 #rust-wasm <drager> For me too
2019-01-11T20:38:17 #rust-wasm <drager> Yeah, now it's broken for me too...
2019-01-11T20:38:43 #rust-wasm <drager> https://www.githubstatus.com/incidents/6rbyhd6vrc0k
2019-01-11T20:41:35 #rust-wasm <drager> ag_dubs: Looks like a merge from master gone wrong in that log branch
2019-01-11T20:54:55 #rust-wasm <ag_dubs> yeah agree, and that was me- though it appeared to be straightfoward
2019-01-11T20:55:04 #rust-wasm <ag_dubs> i'll pull it down and get it right once github is back
2019-01-11T21:00:23 #rust-wasm <drager> Ah okey, great
2019-01-11T21:32:44 #rust-wasm <ag_dubs> i fixed it :D
2019-01-11T21:32:53 #rust-wasm <ag_dubs> and github seems at least functionally back
2019-01-11T21:55:58 #rust-wasm <drager> yay! :D nice job
2019-01-12T12:49:41 #rust-wasm <tewk> I have rust code that creates a bvh acceleration structure, I want to store that some global wasm variable and use it in later calls from javascript.  I don't want to passs the bvh back and forth by value.
2019-01-12T12:52:55 #rust-wasm <tewk> window 4
2019-01-12T21:43:34 #rust-wasm <vishal> hello there!
2019-01-12T21:44:43 #rust-wasm <vishal> haven't done this irc thing in like 20 years. decided to join the #rust-wasm group after reading The Rust Book (just a few more chapters left to finish it)
2019-01-12T21:45:43 #rust-wasm <j_ey> Hi
2019-01-14T01:09:08 #rust-wasm <Argensis> That moment when your webgl code is so bad it brings down the whole system >_< 
2019-01-14T21:46:08 #rust-wasm <SimonSapin> https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.ImageData.html#method.new_with_u8_clamped_array why does this take &mut [u8] rather than &[u8] ?
2019-01-14T21:46:55 #rust-wasm <SimonSapin> I’ve found https://github.com/rustwasm/wasm-bindgen/blob/666c1e4584580410f582900c19be083e29563389/crates/webidl/src/util.rs#L76 but it contradicts the comment above that function
2019-01-14T22:23:46 #rust-wasm <acrichto> SimonSapin: https://github.com/rustwasm/wasm-bindgen/issues/1005
2019-01-14T22:23:55 #rust-wasm <acrichto> tl;dr; we're making a pessimistic assumption for memory safety
2019-01-14T22:24:03 #rust-wasm <acrichto> but we're hoping to add a whitelist in the future
2019-01-14T22:24:12 #rust-wasm <acrichto> which means we can flag a method as "known to not mutate"
2019-01-14T22:24:43 #rust-wasm <SimonSapin> I see, thanks!
2019-01-15T01:13:37 #rust-wasm <SimonSapin> /part/
2019-01-15T18:40:26 #rust-wasm <theduke> hey there. I have a question about a curious load-time performance issue. So I have a wasm project with just a few hundred lines of code which loads just fine. 
2019-01-15T18:41:19 #rust-wasm <theduke> Then i added a enum with about 3200 variants, and a method that maps the enum to a 5-10 character string
2019-01-15T18:41:46 #rust-wasm <theduke> in debug mode, the resulting wasm file takes about 5 seconds to load ! (file size ~750kb)
2019-01-15T18:42:16 #rust-wasm <theduke> with --release, the file size goes down to 250kb and loading only takes about 200ms
2019-01-15T18:42:43 #rust-wasm <theduke> on Firefox 64
2019-01-15T18:44:05 #rust-wasm <theduke> any ideas what's causing this massive load time?
2019-01-15T18:45:09 #rust-wasm <j_ey> when you say load, you mean instantiate, rather than fetch?
2019-01-15T18:47:28 #rust-wasm <theduke> yeah instantiate
2019-01-15T18:47:43 #rust-wasm <fitzgen> theduke: what does twiggy say? https://github.com/rustwasm/twiggy
2019-01-15T18:48:06 #rust-wasm <fitzgen> are you using wasm-bindgen?
2019-01-15T18:48:49 #rust-wasm <fitzgen> one thing to look out for is whether the debug sections are in your wasm binary
2019-01-15T18:49:25 #rust-wasm <theduke> yes to wasm-bindgen
2019-01-15T18:49:26 #rust-wasm <fitzgen> theduke: also, are you using WebAssembly.instantiate or WebAssembly.instantiateStreaming?
2019-01-15T18:49:41 #rust-wasm <fitzgen> ok, then you should be getting the debug sections snipped
2019-01-15T18:50:12 #rust-wasm <j_ey> I couldnt seem to get instantiateStreaming working on my project :(
2019-01-15T18:50:53 #rust-wasm <fitzgen> j_ey: you generally have to feature detect it in JS, since some browsers don't have support yet
2019-01-15T18:51:05 #rust-wasm <fitzgen> also have to configure your server to use the proper mime type
2019-01-15T18:51:39 #rust-wasm <j_ey> yeah, I was trying to do the latter and couldnt get it working
2019-01-15T18:52:19 #rust-wasm <fitzgen> j_ey: we have links to the docs for nginx and apache in the book; are you using either of those?
2019-01-15T18:52:57 #rust-wasm <j_ey> no, I'm just using python's SimpleHTTPServer locally
2019-01-15T18:53:11 #rust-wasm <j_ey> and then pushing to github pages
2019-01-15T18:54:04 #rust-wasm <fitzgen> j_ey: ah, yeah python's simple server doesn't support it AUIU. but you can use https://crates.io/crates/https the same way and it will handle wasm correctly
2019-01-15T18:54:49 #rust-wasm <j_ey> oh cool, I'll check it out
2019-01-15T18:55:13 #rust-wasm <fitzgen> (going to lunch bbl)
2019-01-15T18:55:35 #rust-wasm <theduke> sorry got disconnected
2019-01-15T18:55:57 #rust-wasm <theduke> so I'm using t    --no-modules --no-modules-global circle
2019-01-15T18:56:24 #rust-wasm <theduke> and then using the generated circle('..._bg.wasm').then(...) 
2019-01-15T18:57:04 #rust-wasm <fitzgen> theduke: heading out to lunch but I'll be back in a bit
2019-01-15T19:02:04 #rust-wasm <theduke> twiggy top shows 78kb (33%) for the enum in question and ~50kb (22%) for data[0]
2019-01-15T19:02:23 #rust-wasm <theduke> twiggy garbage shows 22% data[0]
2019-01-15T19:06:57 #rust-wasm <theduke> (on the _bg.wasm)
2019-01-15T19:10:41 #rust-wasm <theduke> https://gist.github.com/theduke/9e67eec56b744972a5cb1b0a29867bd4
2019-01-15T19:10:44 #rust-wasm <j_ey> how are you timing btw?
2019-01-15T19:21:45 #rust-wasm <theduke> soo sorry
2019-01-15T19:21:46 #rust-wasm <theduke> https://github.com/theduke/wasm-debug-instantiate
2019-01-15T19:22:32 #rust-wasm <theduke> this repo contains bindgen output for debug + release, the index.html and the the file with the enum in question (icon.rs)
2019-01-15T19:25:39 #rust-wasm <theduke> (index.html has the very primitive timing code)
2019-01-15T19:27:34 #rust-wasm <j_ey> theduke: have you timed with other wasm code?
2019-01-15T19:28:27 #rust-wasm <j_ey> theduke_: have you timed with other wasm code?
2019-01-15T19:34:53 #rust-wasm <theduke> (damn WiFI ...)
2019-01-15T19:35:02 #rust-wasm <j_ey> theduke_: have you timed with other wasm code?
2019-01-15T19:35:16 #rust-wasm <j_ey> ie: is it *this* particular wasm, or just slow in general for you
2019-01-15T19:35:32 #rust-wasm <theduke> I've done a few wasm experiments and never had a problem like this
2019-01-15T19:35:47 #rust-wasm <theduke> instantiation time is basically instant when the enum is removed
2019-01-15T19:36:11 #rust-wasm <j_ey> I guess there's some pathalogical case in the JIT then
2019-01-15T19:36:32 #rust-wasm <j_ey> what about trying chrome or other browser?
2019-01-15T19:39:48 #rust-wasm <theduke>   ah yearh I should have mentioned, already tried that
2019-01-15T19:39:52 #rust-wasm <theduke> chrome just crashes
2019-01-15T19:40:32 #rust-wasm <j_ey> lol
2019-01-15T19:40:32 #rust-wasm <theduke> that's why I thought it might be codegen related
2019-01-15T19:41:40 #rust-wasm <theduke> it crashes with a "FATAL: memory_linux.cc OUT OF MEMORY" error
2019-01-15T19:44:49 #rust-wasm <theduke> that's probably bug-report worthy
2019-01-15T19:48:50 #rust-wasm <j_ey> theduke: do you need 3k variants?
2019-01-15T19:50:30 #rust-wasm <j_ey> theduke: chrome worked for me, but yes it was slow: WASM loaded: 9129
2019-01-15T19:55:27 #rust-wasm <theduke> no I'd comment out the variants I don't need, but I wanted to see how see if it would cause any issues
2019-01-15T19:55:42 #rust-wasm <theduke> this is not that much data after all
2019-01-15T19:56:10 #rust-wasm <j_ey> rustc itself has issues with compiling code with lots of variants too
2019-01-15T19:57:03 #rust-wasm <jessm> j_ey: try nginx types {} block in ur http{} block in nginx if you still cant get it working. That worked for me.
2019-01-15T19:57:37 #rust-wasm <j_ey> jessm: im not using nginx
2019-01-15T19:57:46 #rust-wasm <jessm>  o nvm then
2019-01-15T19:59:08 #rust-wasm <j_ey> thta https crate seems to work
2019-01-15T20:01:45 #rust-wasm <jessm> Thats good. iirc nginx was being stubborn about adding in the wasm stuff by default. I wouldnt be surprised if most other required some config to get it working at this point.
2019-01-15T20:04:39 #rust-wasm <theduke> ok I've tried a minimal reproduction and it's not the enum itself that's causing the issue
2019-01-17T00:42:17 #rust-wasm <Argensis> How to get the "truthiness" of a non-boolean JsValue? 
2019-01-17T00:44:17 #rust-wasm <Argensis> i.e., how to get in wasm the equivalent of JS: `!!someVar`
2019-01-18T20:01:29 #rust-wasm <Argensis> If I declare a function with the #[wasm_bindgen] macro used on it that takes some sort of JS object (in this case a WebGlRenderingContext), is this type checked with an instanceof at the boundary between Rust and JS? Or could I provide e.g. a sinon stub for testing so long as it implemented the right methods?
2019-01-18T20:07:20 #rust-wasm <fitzgen> Argensis: it is not dynamically checked
2019-01-20T07:48:04 #rust-wasm <slimer> how to make this example, https://rustwasm.github.io/wasm-bindgen/examples/paint.html in ecs?
2019-01-20T07:48:41 #rust-wasm <slimer> the example uses atomic reference counting
2019-01-20T23:35:59 #rust-wasm <thomspoon> Is anyone able to help me understand what's going on in this wasm-bindgen example? https://github.com/rustwasm/wasm-bindgen/blob/master/examples/webgl/src/lib.rs#L43
2019-01-20T23:36:30 #rust-wasm <thomspoon> It seems as though we take _all_ of the memory available to Wasm and turn it into an F32Array, but i'm unsure our or Rust array gets mapped into that array.
2019-01-20T23:37:43 #rust-wasm <thomspoon> how the rust array***
2019-01-21T01:57:58 #rust-wasm <thomspoon> Is anyone able to help me understand this line in the webgl wasm example? https://github.com/rustwasm/wasm-bindgen/blob/master/examples/webgl/src/lib.rs#L43
2019-01-23T03:47:33 #rust-wasm <hyperion101010> hi there i had a doubt ?
2019-01-23T03:47:47 #rust-wasm <hyperion101010> will my project idea be considered for cranelift ?
2019-01-23T03:48:10 #rust-wasm <hyperion101010> it is a part of mozilla for outreachy/gsoc isn't it
2019-01-23T04:06:01 #rust-wasm <sunfish> hyperion101010: yes, cranelift projects may be proposed for outreachy/gsoc with mozilla
2019-01-23T18:13:35 #rust-wasm <hyperion101010> sunfish  are you here ?
2019-01-23T18:15:50 #rust-wasm <hyperion101010> at the moment i was working on another patch and i watched your message on cranelift issue  
2019-01-23T18:17:05 #rust-wasm <sunfish> hyperion101010: hello
2019-01-23T18:17:56 #rust-wasm <hyperion101010> hi there, let me know about the timing when you are on irc (IST) so that we can discuss and solve bugs quickly
2019-01-23T18:21:38 #rust-wasm <sunfish> i'm super busy with a lot going on, so my avaibility on irc is hard to predict
2019-01-23T18:23:31 #rust-wasm <sunfish> i tend to be online during daytime hours in UTC-8, but just ping me whenever and i'll respond if i'm free
2019-01-23T18:29:35 #rust-wasm <hyperion101010> ok :)  looking forward to it 
2019-01-24T06:23:13 #rust-wasm <hyperion101010> people i am working on this bug https://github.com/CraneStation/cranelift/issues/513first i need to know what tool do i need to learn to built a lex parseri know that i can do that in YACC, but i thought you people might be using some different tools hereso i need some advice
2019-01-24T06:23:19 #rust-wasm <hyperion101010> sunfish
2019-01-24T16:46:23 #rust-wasm <fitzgen> https://github.com/rustwasm/team/issues/249 <-- WG-wasm meeting starting in 15 minutes!
2019-01-25T02:07:19 #rust-wasm <thomspoon> Is there a standard procedure to solve "imported JS function that was not marked as `catch` threw an error: TypeError: "attempting to access detached ArrayBuffer"
2019-01-25T02:09:10 #rust-wasm <thomspoon> I take a [f32; 9] array and turn it into a Float32Array using Float32Array::new(&memory).subarray(data_location, data_location + data_size as u32).buffer() and I save it as an ArrayBuffer because all of the <Type>XXArray functions can coerce into an arraybuffer so it's generic
2019-01-25T02:10:05 #rust-wasm <thomspoon> I'm assuming the error is because the memory resizes?
2019-01-25T03:14:36 #rust-wasm <grt> Hi! I don't know if this is the right place to ask this, but Googling has failed me and I'm stuck. I have been working through The Book, on the back of which I have build a simple web app game to test what I have learned. I'd like to be able to show some friends what I've done but I cannot figure out how to collect together the files I need to upload to a webserver. If anyone can point me in the right direction?
2019-01-25T19:25:02 #rust-wasm <fabrice> is there a wasm JIT targeting arm ? Looks like cranelift support is not complete yet.
2019-01-25T19:25:46 #rust-wasm <sunfish> cranelift's arm backend isn't complete yet, but it is something we're planning to do
2019-01-25T19:26:55 #rust-wasm <fabrice> sunfish: so cranelift is not used on android builds of Firefox?
2019-01-25T19:27:27 #rust-wasm <sunfish> not the arm ones yet, at least :)
2019-01-25T19:28:17 #rust-wasm <fabrice> sunfish: ok. And you don't know of any other option right now? even if it's your competitors :)
2019-01-25T19:28:47 #rust-wasm <j_ey> does it need to be a JIT?
2019-01-25T19:29:02 #rust-wasm <sunfish> i honestly haven't looked at arm support myself, even in our competitors
2019-01-25T19:29:39 #rust-wasm <fabrice> j_ey: ideally yes, but not a blocker
2019-01-25T19:30:21 #rust-wasm <j_ey> for example, I assume https://github.com/paritytech/wasmi could work
2019-01-25T19:30:50 #rust-wasm <fabrice> right
2019-01-26T14:02:50 #rust-wasm <ctjhoa> Hi all, I'm trying to use https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.CustomElementRegistry.html#method.define with an element already define with wasm-bindgen (like https://rustwasm.github.io/wasm-bindgen/contributing/design/exporting-rust-struct.html).
2019-01-26T14:03:53 #rust-wasm <ctjhoa> How can I retreive the protoype of the exported element I've just created to pass it as function_constructor of the define method?
2019-01-27T22:00:29 #rust-wasm <aidanhs> been investigating the available rust wasm frameworks today and they all seem a touch on the immature side, so I was pondering - how much effort would it be (for me) to create a thin typesafe wrapper around react?
2019-01-27T22:01:05 #rust-wasm <aidanhs> I guess I'd use wasm bindgen to expose all the react interfaces I need within rust
2019-01-27T22:03:58 #rust-wasm <aidanhs> but the question that I'm not sure how to answer is "how can I get an estimate of the api surface?". there are some files in react that are just big lists of attribute names and I'd prefer not to manually recreate them
2019-01-28T00:40:30 #rust-wasm <lpg> It doesn't really make sense to bind to React, since all of the primitives would live in JS
2019-01-28T16:51:15 #rust-wasm <SvenSauleau_> Hi!
2019-01-28T17:04:07 #rust-wasm <SvenSauleau_> acrichto: how did you manage to compile https://github.com/rustwasm/wasm-bindgen/issues/1209?
2019-01-28T17:06:06 #rust-wasm <acrichto> SvenSauleau_: I checked out the repo, reset to the commit, cd'd into examples
2019-01-28T17:06:12 #rust-wasm <acrichto> er, examples/counter_ecs
2019-01-28T17:06:18 #rust-wasm <acrichto> `cargo build --target ...`
2019-01-28T17:06:20 #rust-wasm <acrichto> wasm-bindgen ...
2019-01-28T17:06:27 #rust-wasm <acrichto> and then didn't actually run webpack :(
2019-01-28T17:07:04 #rust-wasm <SvenSauleau_> ok, i'm checking out the https://github.com/sagan-software/oak/tree/wasm-bindgen-error branch
2019-01-28T17:07:24 #rust-wasm <SvenSauleau_> compilation works with nightly but compiling through Webpack fails 
2019-01-28T17:07:54 #rust-wasm <SvenSauleau_> is there a way to specify a toolchain to wasm-pack?
2019-01-28T17:20:27 #rust-wasm <acrichto> SvenSauleau_: not currently, no
2019-01-28T17:20:31 #rust-wasm <acrichto> but you can use `rustup run` I believe
2019-01-28T17:20:35 #rust-wasm <acrichto> sorry yeah I also did have to use nightly
2019-01-28T17:32:43 #rust-wasm <SvenSauleau_> i don't know, I'm not able to run the example. I commented and i'll follow up on that
2019-01-28T20:59:42 #rust-wasm <fitzgen> https://github.com/rustwasm/rfcs/pull/7 <-- RFC for the Rust+Wasm working group's 2019 roadmap
2019-01-29T01:00:49 #rust-wasm <yury> fitzgen: hi, how often the gimli crate is updated?
2019-01-29T01:39:30 #rust-wasm <fitzgen> yury: we can usually cut releases quickly, but philipc is adding DWARF writing support, and so we don't want to release with that in an incomplete state yet
2019-01-29T01:39:43 #rust-wasm <yury> roger
2019-01-29T16:47:44 #rust-wasm <theduke> hey. Is there any blog post or documentation that explains how the data transfer/function calling/reference keeping of wasm-bindgen works?
2019-01-29T16:48:02 #rust-wasm <theduke> I'm curios about the details
2019-01-29T16:59:02 #rust-wasm <acrichto> theduke: https://rustwasm.github.io/wasm-bindgen/contributing/design/index.html is the best we have
2019-01-29T18:34:13 #rust-wasm <theduke> acrichto: thanks! I missed that section.
2019-01-29T18:34:36 #rust-wasm <theduke> It's actually much more than I expected and well written, it answered all my basic questions.
2019-01-29T18:39:02 #rust-wasm <theduke> I did look at the generated .js before but it's much easier to follow along now.
2019-01-30T10:22:14 #rust-wasm <SvenSauleau_> I just noticed that wasm-bindgen tests were failing, I think it's because the producer sections fails to compile in Webpack currently
2019-01-30T10:27:29 #rust-wasm <SvenSauleau_> nevermind it's not using webpack
2019-01-30T18:20:55 #rust-wasm <fitzgen> SvenSauleau_: it looks like the tests are passing on CI right now; are you talking about locally?
2019-01-30T18:28:14 #rust-wasm <SvenSauleau_> it was in travis but I didn't look at the right thing, please nevermind
2019-01-30T20:31:43 #rust-wasm <fitzgen> cool
2019-01-31T16:46:38 #rust-wasm <fitzgen> https://github.com/rustwasm/team/issues/252 starting in 15 minutes!
2019-02-03T17:19:03 #rust-wasm <jeaye> How is this project different from yew? Why is it you use wasm-pack, vs cargo-web?
2019-02-04T14:32:08 #rust-wasm <fitzgen> jeaye: this comment is a reply to essentially exactly that question: https://www.reddit.com/r/rust/comments/a69hwf/rust_and_webassembly_in_2019/ebt3kdl/
2019-02-04T16:12:44 #rust-wasm <dbrgn> hi. how do I convert a web_sys::Element or web_sys::Text to a web_sys::Node instance?
2019-02-04T16:12:55 #rust-wasm <dbrgn> in the DOM, Element and Text inherit from Node.
2019-02-04T16:14:21 #rust-wasm <dbrgn> dyn_into<web_sys::Node>()?
2019-02-04T16:18:21 #rust-wasm <dbrgn> that seems to do the trick :)
2019-02-04T16:18:41 #rust-wasm <fitzgen> if they inherit, then they should `Deref`
2019-02-04T16:18:50 #rust-wasm <fitzgen> if you have the appropriate features enabled
2019-02-04T16:18:53 #rust-wasm <fitzgen> in web-ss
2019-02-04T16:19:00 #rust-wasm <fitzgen> web-sys*
2019-02-04T16:23:37 #rust-wasm <dbrgn> fitzgen: ah, that's also a possibility! thanks. (I would have preferred an explicit .into() impl though...)
2019-02-04T16:24:14 #rust-wasm <fitzgen> dbrgn: we started with as_ref() and then added deref after going through 2 rfcs
2019-02-04T16:24:35 #rust-wasm <fitzgen> https://rustwasm.github.io/rfcs/002-wasm-bindgen-inheritance-casting.html is the one that we ended up accepting
2019-02-04T16:24:50 #rust-wasm <dbrgn> fitzgen: that only works with references though, right?
2019-02-04T16:24:56 #rust-wasm <dbrgn> I need a Node, not a &Node I think.
2019-02-04T16:25:43 #rust-wasm <fitzgen> you can always `.clone()` -- they are cheap references into a table
2019-02-04T16:26:06 #rust-wasm <dbrgn> fitzgen: thanks for the link, I'll read through it.
2019-02-04T16:26:13 #rust-wasm <fitzgen> np
2019-02-04T16:28:22 #rust-wasm <fitzgen> dbrgn: er wait, that was the first iteration, https://rustwasm.github.io/rfcs/005-structural-and-deref.html added to it
2019-02-04T16:29:31 #rust-wasm <dbrgn> fitzgen: ah, .into() actually does work for upcasting! also as described here: https://rustwasm.github.io/rfcs/002-wasm-bindgen-inheritance-casting.html#example-upcasting
2019-02-04T16:29:45 #rust-wasm <dbrgn> I made a mistake in my codebase, one of the types was not actually an Element but a struct containing an Element m(
2019-02-04T17:23:19 #rust-wasm <jeaye> fitzgen: Thank you!
2019-02-06T14:25:17 #rust-wasm <surma> How can I enable the `wasm_syscall`[1] feature in a Rust/wasm project? Just adding that feature to my `Cargo.toml` doesn’t seem to have any effect.
2019-02-06T14:25:19 #rust-wasm <surma> [1]: https://github.com/rust-lang/rust/blob/master/src/libstd/sys/wasm/mod.rs#L309
2019-02-07T16:30:39 #rust-wasm <mib_9h0wtm> Stu "d!ckless" Lantz(Gay-tv/Phoenix, Az., since 1997)Nazi- brain Damaging brainwasher, betrays all; https://www.facebook.com/traian.ghit?fref=ts , Traian "Ryan" Ghit(geet) (704) 726-7550; Trannys & Queers, are in charge; Q bama, Q Dubya, Hillary Clinton(tranny), Queer Trump, https://www.usa.gov/ 
2019-02-07T16:30:58 #rust-wasm <mib_9h0wtm> boyfriendtv.com
2019-02-07T16:31:01 #rust-wasm <j_ey> fitzgen: 
2019-02-07T16:31:37 #rust-wasm <mib_9h0wtm>  https://www.youtube.com/watch?v=lPP78Tex3eI 
2019-02-10T00:51:11 #rust-wasm <j_ey> how does the wasm bindgen macros work? does the proc macro write output to a file?
2019-02-10T12:36:41 #rust-wasm <moriatys> hi how is web assembly useful ?
2019-02-10T12:37:34 #rust-wasm <j_ey> useful to write not-in-JS for example
2019-02-10T12:38:05 #rust-wasm <moriatys> j_ey:  means can we replace js using web assembly ?
2019-02-10T12:38:23 #rust-wasm <j_ey> not all of it yet, still have to write JS for some things
2019-02-10T12:39:08 #rust-wasm <moriatys> So web assembly main purpose only that ?
2019-02-10T12:39:58 #rust-wasm <j_ey> and you can use it not-in-the-browser
2019-02-10T12:40:09 #rust-wasm <j_ey> people are going to try use it for plugins in other apps, that kinda thing
2019-02-10T12:41:20 #rust-wasm <moriatys> Okay j_ey  I will check but I have one doubt I found rocket so in c++ we cant make websites/webapps but in rust we can using rocket right ?
2019-02-10T12:41:25 #rust-wasm <moriatys> and we can also make android apps ?
2019-02-12T14:41:33 #rust-wasm <dbrgn> hi. is there something like an "opaque pointer" pattern for rust wasm?
2019-02-12T14:42:10 #rust-wasm <dbrgn> I'd like to return a state object to JS that needs to be passed back in when calling functions, but I don't want to expose the types to JS.
2019-02-12T14:53:54 #rust-wasm <j_ey> dbrgn: could you use c_void? or cast to/from i8*
2019-02-12T15:01:18 #rust-wasm <dbrgn> j_ey: I could, but what would be the worst thing that could happen if the JS code passes in another object which is then dereferenced on the Rust side as a Context struct?
2019-02-12T15:12:47 #rust-wasm <j_ey> dbrgn: yeah that would be bad, but cant js do that anyway?
2019-02-12T15:13:02 #rust-wasm <j_ey> I dunno the wasm-bindgen stuff, maybe it has checks for that
2019-02-12T15:15:18 #rust-wasm <dbrgn> j_ey: I'll test it :)
2019-02-12T15:19:16 #rust-wasm <dbrgn> hm, I'm not sure exactly what happens. the deref succeeds, but the struct is at its "empty initialization state", so strings and vectors are empty, integers are 0...
2019-02-12T15:19:44 #rust-wasm <dbrgn> I'm not sure if this is undefined behavior, or normal.
2019-02-12T15:31:31 #rust-wasm <dbrgn> I asked here: https://github.com/rustwasm/wasm-bindgen/issues/1242
2019-02-13T14:39:25 #rust-wasm <j_ey> Hi
2019-02-13T22:05:42 #rust-wasm <j_ey> fitzgen: how/why does wasm-bindgen use walrus?
2019-02-13T22:06:24 #rust-wasm <fitzgen> j_ey: for general info on what wasm-bindgen is doing after rustc, check out http://fitzgeraldnick.com/2018/12/02/wasm-bindgen-how-does-it-work.html
2019-02-13T22:06:54 #rust-wasm <j_ey> ok, I didnt know there was post-processing involved!
2019-02-13T22:07:24 #rust-wasm <fitzgen> j_ey: for its wasm transformations specifically, check outhttps://rustwasm.github.io/wasm-bindgen/contributing/design/describe.html?highlight=descriptor#communicating-types-to--wasm-bindgen
2019-02-13T22:07:56 #rust-wasm <fitzgen> and of course there is the PR: https://github.com/rustwasm/wasm-bindgen/pull/1237
2019-02-13T22:08:13 #rust-wasm <fitzgen> j_ey: yes, a bit of "intrinsics" getting rewritten post-facto
2019-02-13T22:08:36 #rust-wasm <j_ey> thanks for all the links!
2019-02-13T22:08:44 #rust-wasm <fitzgen> no prob!
2019-02-13T22:11:17 #rust-wasm <j_ey> I guess proc macros dont let you write out to files, which is why you have to stuff things into custom sections?
2019-02-13T22:13:45 #rust-wasm <fitzgen> essentially, yeah -- proc-macros *can* write to files, but that is invisible to cargo, and would break re-compiles and icnremental compilation
2019-02-14T10:39:11 #rust-wasm <SvenSauleau_> There a regression in Webpack with its wasm support, sorry about that. I'm working on it
2019-02-14T12:55:01 #rust-wasm <fitzgen> SvenSauleau_: is there anything I can do to help? it seems like a lot of people are hitting this
2019-02-14T13:39:40 #rust-wasm <SvenSauleau_> fitzgen: thanks for asking, it's just tedious to debug a binary, sorry if i'm slow
2019-02-14T13:40:03 #rust-wasm <fitzgen> I have a small wasm that is almost empty that repros this bug
2019-02-14T13:40:18 #rust-wasm <SvenSauleau_> that would be great! mine is a few kb
2019-02-14T13:44:20 #rust-wasm <fitzgen> well... actually it is p big
2019-02-14T13:44:29 #rust-wasm <SvenSauleau_> i wish I had more time too, but i'm gonna free up some stuff
2019-02-14T13:44:49 #rust-wasm <SvenSauleau_> ok no worries, i'm able to repro it locally
2019-02-14T13:44:52 #rust-wasm <fitzgen> the rust side is an empty function, but it generates a bunch of dwarf debug info in a custom section that seems to be triggering the bug
2019-02-14T13:45:02 #rust-wasm <fitzgen> but I have a test that fails
2019-02-14T13:47:01 #rust-wasm <SvenSauleau_> the decoding itself is fine I think, errors are ignored when a custom section fails (that's the integer thing in the console)
2019-02-14T13:47:13 #rust-wasm <SvenSauleau_> but the transformation somehow fails
2019-02-14T13:47:22 #rust-wasm <SvenSauleau_> that's my understanding currently
2019-02-14T14:42:37 #rust-wasm <SvenSauleau_> btw fitzgen do you know when the producer section has been introduced in wasm-bindgen?
2019-02-14T14:42:54 #rust-wasm <fitzgen> cc acrichto 
2019-02-14T14:42:58 #rust-wasm <fitzgen> not too long ago
2019-02-14T14:43:15 #rust-wasm <SvenSauleau_> but you areen't pinning a Rust version, so I guess it isn't relevant
2019-02-14T14:43:28 #rust-wasm <SvenSauleau_> one posted an issue with a version range, that's why i'm wondering
2019-02-14T15:00:08 #rust-wasm <j_ey> fitzgen: btw is the --no-modules flag, (to I think, not use webpack) something that is 'important'?
2019-02-14T15:18:19 #rust-wasm <acrichto> SvenSauleau_: I think producers section has been in rustc/wasm-bindgen for a month ish
2019-02-14T15:56:10 #rust-wasm <SvenSauleau_> not sure it matters but walrus is not listed in https://github.com/WebAssembly/tool-conventions/blob/master/ProducersSection.md
2019-02-14T16:47:49 #rust-wasm <acrichto> SvenSauleau_: is the lack of an entry there causing webpack to fail?
2019-02-14T16:48:04 #rust-wasm <acrichto> after removing the dwarf sections we're still seeing webpack failurs and it seems connected to the producers section
2019-02-14T16:48:14 #rust-wasm <SvenSauleau_> ah no, I just noticed that
2019-02-14T16:48:20 #rust-wasm <SvenSauleau_> we don't check the list
2019-02-14T16:48:46 #rust-wasm <SvenSauleau_> Yes, i'm pushing the fix in webpack currently
2019-02-14T16:48:49 #rust-wasm <acrichto> kk
2019-02-14T16:53:45 #rust-wasm <SvenSauleau_> I won't be available for the WG today, the status is: I've published the fix on my side and now it's PR'ed against Webpack
2019-02-14T16:54:40 #rust-wasm <SvenSauleau_> I believe the Webpack folks are at a conf
2019-02-14T16:59:30 #rust-wasm <fitzgen> meeting in this room today: https://zoom.us/j/484138441
2019-02-14T17:35:40 #rust-wasm <fitzgen> j_ey: it isn't `--no-modules` in particular that is important, but having a "minimal env assumptions; no bundler required" solution is important, and `no-modules` is currently fulfilling that need
2019-02-14T17:53:30 #rust-wasm <j_ey> fitzgen: that's what I meant, so thanks!
2019-02-14T17:54:48 #rust-wasm <fitzgen> np
2019-02-18T01:56:10 #rust-wasm <Devin> hiyo folks. theres no way to import a javascript library object like threejs correct using the "import non-browser functions" technique right?
2019-02-18T14:03:47 #rust-wasm <wuto-M> > I'm here
2019-02-18T14:03:48 #rust-wasm <wuto-M> naise
2019-02-18T14:04:47 #rust-wasm <j_ey> it's a bot
2019-02-18T14:06:29 #rust-wasm <wuto-M> > hiyo folks. theres no way to import a javascript library object like threejs correct using the "import non-browser functions" technique right?
2019-02-18T14:06:30 #rust-wasm <wuto-M> isn't wasm-bind-gen the solution for your issue? 
2019-02-18T17:18:52 #rust-wasm <j_ey> is the handling for String / Vec etc hardcoded
2019-02-18T17:18:52 #rust-wasm <j_ey> ?
2019-02-18T17:29:40 #rust-wasm <j_ey> where does bindgen_global_argument_ptr come from?
2019-02-18T17:30:07 #rust-wasm <j_ey> ohh I guess that's actually something from the wasm side
2019-02-18T19:00:01 #rust-wasm <Devin> wuto-M: Hi there, the section i reffered to called "import non-browser js" was from wasm-bindgen's guide so I certainly hope bindgen is part of the solution. I'll clarify that I'd like to know if there's a way to import via bindgen a library like threejs? I think my naive attempt would look like getting the threejs source, and then using #[wasm_bindgen(module="path to three")], but I can already forsee 
2019-02-18T19:00:07 #rust-wasm <Devin> trouble with this import style. Besides, would I then have to label all the methods I hope to use in an "extern C" block?
2019-02-20T13:19:35 #rust-wasm <j_ey> hmm using web-sys Document::get_element_by_id, I cant find my element :(
2019-02-20T13:35:59 #rust-wasm <j_ey> turns out I was using Document::new, not Window::document()
2019-02-20T13:37:30 #rust-wasm <j_ey> hmm requestAnimationFrame isn't exposed
2019-02-20T13:38:19 #rust-wasm <j_ey> oh it does, just didn't show up in search for some reason
2019-02-20T14:02:57 #rust-wasm <j_ey> how can I make a js_sys::Function from a rust function or closure?
2019-02-20T17:16:20 #rust-wasm <fitzgen> j_ey: https://rustwasm.github.io/wasm-bindgen/reference/passing-rust-closures-to-js.html
2019-02-20T17:16:45 #rust-wasm <fitzgen> Closure implements AsRef<JsValue> and that JsValue is a js_sys::Function
2019-02-20T17:17:04 #rust-wasm <j_ey> thanks, I found https://rustwasm.github.io/wasm-bindgen/api/wasm_bindgen/closure/struct.Closure.html and got that working
2019-02-20T17:19:38 #rust-wasm <j_ey> trying to work out if I want to use web-sys to do everything, or use vue.js/react and just call into wasm
2019-02-21T06:56:54 #rust-wasm <mitologi> The succession of these flame emperors, from Shennong, the first Yan Emperor, until the time of the last Yan Emperor's defeat by the Yellow Emperor, may have been some 500 years.
2019-02-21T16:53:33 #rust-wasm <fitzgen> Please use this meeting room for today's wg meeting: https://zoom.us/j/527606130
2019-02-21T18:53:27 #rust-wasm <j_ey> what is the producer section used for?
2019-02-21T18:53:50 #rust-wasm <j_ey> someone in that meeting said it was used for analytics?
2019-02-21T18:55:11 #rust-wasm <j_ey> 17:35 into the video
2019-02-21T19:07:07 #rust-wasm <fitzgen> j_ey: https://github.com/WebAssembly/tool-conventions/blob/master/ProducersSection.md
2019-02-21T19:09:02 #rust-wasm <j_ey> ah thanks
2019-02-22T09:44:42 #rust-wasm <bbouvier> fitzgen, acrichto, thanks for providing us with test cases for Spidermonkey :) (bug 1529349)
2019-02-22T09:44:43 #rust-wasm <firebot> https://bugzil.la/1529349 — NEW, luke⊙mc — Crash in [@ js::wasm::CompileStreaming]
2019-02-22T09:46:24 #rust-wasm <j_ey> was that related to the producer section?
2019-02-22T09:48:10 #rust-wasm <bbouvier> not sure, it's an unknown section that was placed right before the code section
2019-02-22T09:48:20 #rust-wasm <bbouvier> and i think user sections have to come at the end
2019-02-22T09:48:47 #rust-wasm <bbouvier> so it might be the same issue as https://github.com/rustwasm/wasm-bindgen/issues/1267
2019-02-22T09:49:44 #rust-wasm <bbouvier> s/might be/is/
2019-02-22T15:25:59 #rust-wasm <acrichto> bbouvier: heh I had a feeling all those crashed tabs I kept generating would make their way there :)
2019-02-22T15:26:06 #rust-wasm <acrichto> I should probably report it more directly next time too lol
2019-02-26T17:41:43 #rust-wasm <ag_dubs> any rustwasm Windows users have a sec to manually test a Windows installer improvement?
2019-02-26T17:41:43 #rust-wasm <ag_dubs> https://github.com/rustwasm/wasm-pack/issues/518
2019-02-26T17:41:54 #rust-wasm <ag_dubs> my Windows machine is in Austin and i am not, le sigh
2019-02-27T13:30:47 #rust-wasm <Kirjava> managed to get RustPython working in node :D https://i.imgur.com/H9c0H2r.png
2019-02-27T13:31:10 #rust-wasm <Kirjava> also, PHPInBrowser in node: https://i.imgur.com/oqpwaGW.png
2019-02-27T13:37:13 #rust-wasm <j_ey> very nice!
2019-02-27T13:39:27 #rust-wasm <Kirjava> thanks j_ey 
2019-02-27T13:41:18 #rust-wasm <bbouvier> sweet, is PHPInBrowser referring to this repository? https://github.com/oraoto/pib
2019-02-27T13:56:04 #rust-wasm <Kirjava> yeah
2019-02-27T13:56:16 #rust-wasm <Kirjava> took a bit of hacking but is working
2019-02-27T13:56:26 #rust-wasm <Kirjava> plan to add more runtimes in the future
2019-02-27T13:57:01 #rust-wasm <j_ey> rustc.wasm :3
2019-02-27T14:39:36 #rust-wasm <Kirjava> sure, rustc.wasm would be the holy grail
2019-02-27T14:39:47 #rust-wasm <Kirjava> I can't imagine it's easy _at all_ though
2019-02-27T14:39:57 #rust-wasm <Kirjava> think of all the low level shit that needs to be replaced
2019-02-27T15:07:28 #rust-wasm <bbouvier> if we had a wasm backend for cranelift, and https://github.com/bjorn3/rustc_codegen_cranelift, and web apis to fill in the gaps, that might be possible
2019-02-27T15:07:58 #rust-wasm <j_ey> but rustc can already compile to wasm
2019-02-27T15:08:22 #rust-wasm <j_ey> so we dont need to rely on cranelift (not that it wouldnt be cool to)
2019-02-27T15:08:41 #rust-wasm <bbouvier> that's very right
2019-02-27T15:10:27 #rust-wasm <j_ey> hm, compiling cranelift to wasm too..
2019-02-27T15:12:19 #rust-wasm <yury> the wasm target for it will be needed
2019-02-27T15:12:49 #rust-wasm <j_ey> yury: for?
2019-02-27T15:12:56 #rust-wasm <yury> cranelift
2019-02-27T15:13:09 #rust-wasm <j_ey> but what will it be needed for?
2019-02-27T15:13:19 #rust-wasm <j_ey> for using cranelift as a backend with rustc?
2019-02-27T15:13:47 #rust-wasm <yury> you don't what compile to x86 only, do you? :)
2019-02-27T15:14:21 #rust-wasm <yury> want
2019-02-27T15:14:29 #rust-wasm <j_ey> ARM too ;)
2019-02-27T15:14:38 #rust-wasm <sunfish> cranelift is smaller than llvm, and written in rust, so it's easier to cross compile to wasm
2019-02-27T15:14:55 #rust-wasm <sunfish> and a wasm backend for cranelift is something that would have other uses
2019-02-27T15:15:11 #rust-wasm <j_ey> I just think it'd be a cool web demo to have cranelift.wasm
2019-02-27T15:15:12 #rust-wasm <sunfish> not saying it's necessarily the easiest route, but it isn't totally crazy either :)
2019-02-27T15:15:32 #rust-wasm <bbouvier> cranelift would be able to bootstrap itself, at some point heh
2019-02-27T15:16:05 #rust-wasm <yury> right, that's the ultimate question of the universe
2019-02-27T15:16:26 #rust-wasm <j_ey> what's the main 'entry' to the clif parser? a &str?
2019-02-27T15:19:47 #rust-wasm <sunfish> yeah, parse_functions takes a &str
2019-02-27T15:21:09 #rust-wasm <j_ey> so 'easy' to interface from a webpage
2019-02-27T20:38:04 #rust-wasm <j_ey> thanks to whoever updated this page https://rustwasm.github.io/wasm-bindgen/examples/without-a-bundler.html
2019-02-27T22:29:48 #rust-wasm <j_ey> after what we said earlier today.. I compiled cranelift to wasm, and this is cranelift running inside the browser now
2019-02-27T22:29:57 #rust-wasm <j_ey> https://i.imgur.com/QDPOiWQ.png
2019-02-27T23:06:04 #rust-wasm <fitzgen> j_ey: wow!
2019-02-27T23:06:15 #rust-wasm <fitzgen> sunfish: yury: ^
2019-02-27T23:06:33 #rust-wasm <j_ey> they saw :)
2019-02-27T23:06:40 #rust-wasm <Alexendoo> Now that is cool
2019-02-27T23:06:40 #rust-wasm <fitzgen> nice :)
2019-02-27T23:07:27 #rust-wasm <j_ey> cranelift has a capstone dependency, next thing will be to try hook that up so it emits the assembly instead
2019-02-27T23:08:52 #rust-wasm <j_ey> (of course this is only 50 lines of my own code, all props to cranelift etc)
2019-02-28T12:00:40 #rust-wasm <Kirjava> wow j_ey, very cool!
2019-02-28T12:01:16 #rust-wasm <j_ey> Kirjava: thumbs up
2019-02-28T16:50:11 #rust-wasm <fitzgen> meeting starting in 10 minutes: https://github.com/rustwasm/team/issues/257
2019-02-28T16:53:22 #rust-wasm <datapup_> 🎉
2019-02-28T17:47:57 #rust-wasm <Alexendoo> Can I reuse a wasm_bindgen'd thing on non wasm targets somehow? I'm not using any JsValue style things
2019-02-28T17:51:01 #rust-wasm <j_ey> non-wasm targets?
2019-02-28T17:51:06 #rust-wasm <j_ey> do you mean non-web targets?
2019-02-28T17:53:51 #rust-wasm <Alexendoo> I just picked the wording from 'cannot call wasm-bindgen imported functions on non-wasm targets', specifically it's to run tests natively
2019-02-28T17:54:56 #rust-wasm <Alexendoo> So --target x86_64-... I suppose
2019-02-28T17:56:08 #rust-wasm <j_ey> I would either cretae a wasm-bndgen wrapper, or use cfg_attr to only add #[wasm_bindgen] for --target wasm32
2019-02-28T17:59:52 #rust-wasm <Alexendoo> Aha cfg_attr looks useful. Thanks
2019-02-28T18:08:46 #rust-wasm <Alexendoo> Looks like I just misunderstood why it was panicking, it wasn't because of my function being #[wasm_bindgen] I had just forgotten there was a JS console.log in there
2019-02-28T18:09:40 #rust-wasm <j_ey> :)
2019-03-04T11:02:00 #rust-wasm <dbrgn> is someone aware of a technique to track performance / latency of a wasm function call (from the browser) over time?
2019-03-04T11:02:22 #rust-wasm <dbrgn> or, in general, benchmarking WASM calls.
2019-03-04T15:19:28 #rust-wasm <dbrgn> I built myself some regular client-side benchmarks using benchmark.js :)
2019-03-04T17:06:49 #rust-wasm <j_ey> hmm using wee_alloc didn't seem to reduce the size of my .wasm
2019-03-04T17:09:16 #rust-wasm <yury> j_ey: did you check what https://github.com/rustwasm/twiggy reports?
2019-03-04T17:09:52 #rust-wasm <j_ey> not yet, will check that out now
2019-03-04T17:10:04 #rust-wasm <j_ey> I turned on LTO and got some improvements 
2019-03-04T17:13:19 #rust-wasm <j_ey> ah, 60% is .debug stuff
2019-03-04T17:15:26 #rust-wasm <j_ey> not sure why I have "<char as core::fmt::Debug>::fmt::hda62120a64941310" in my code, or any of the Debug formatters
2019-03-04T17:16:16 #rust-wasm <j_ey> (I guess unwrap() / expect() call them)
2019-03-04T17:16:29 #rust-wasm <yury> or bounds/overflow cheks
2019-03-04T17:17:46 #rust-wasm <yury> j_ey: tried `twiggy paths` ?
2019-03-04T17:18:31 #rust-wasm <j_ey> trying that now
2019-03-04T19:38:55 #rust-wasm <j_ey> using no_std makes the rust wasm 17K, not bad
2019-03-04T19:39:08 #rust-wasm <j_ey> the C code produces something that's like 100 B though D:
2019-03-04T19:53:14 #rust-wasm <yury> linked C code?
2019-03-04T19:53:42 #rust-wasm <j_ey> it was just int foo(a,b){ return a + b; }
2019-03-04T19:54:35 #rust-wasm <j_ey> Im just trying to get some small wasm functions for benchmarking
2019-03-04T19:55:07 #rust-wasm <yury> j_ey: and you are trying " -Z force-overflow-checks=off "
2019-03-04T19:56:12 #rust-wasm <j_ey> I just did, and same size
2019-03-04T19:58:48 #rust-wasm <j_ey> so maybe this version with no_std's actual code section will be fine to try
2019-03-04T19:59:23 #rust-wasm <yury> and that's with just fn foo(a, b) -> u32 { a + b} ?
2019-03-04T19:59:30 #rust-wasm <j_ey> yeah
2019-03-04T20:00:12 #rust-wasm <yury> mine 263 total
2019-03-04T20:00:24 #rust-wasm <j_ey> https://paste.rs/d0W.rs
2019-03-04T20:00:35 #rust-wasm <j_ey> 263 bytes?
2019-03-04T20:01:06 #rust-wasm <yury> yeah, function body 14 bytes
2019-03-04T20:01:31 #rust-wasm <yury> `rustc +nightly --target=wasm32-unknown-unknown foo.rs --crate-type=cdylib  -Z force-overflow-checks=off`
2019-03-04T20:01:49 #rust-wasm <j_ey> hm
2019-03-04T20:01:58 #rust-wasm <j_ey> what's the total size of the .wasm?
2019-03-04T20:02:57 #rust-wasm <yury> https://paste.debian.net/1071521/
2019-03-04T20:05:24 #rust-wasm <yury> with overflow checks, wasm is 16893
2019-03-04T20:05:44 #rust-wasm <j_ey> oh, wasm-snip
2019-03-04T20:08:08 #rust-wasm <yury> j_ey: you can remove debug_info with `-C link-args="--strip-debug"`
2019-03-04T20:08:15 #rust-wasm <yury> rustc +nightly --target=wasm32-unknown-unknown foo.rs --crate-type=cdylib  -Z force-overflow-checks=off -C link-args="--strip-debug"
2019-03-04T20:08:28 #rust-wasm <j_ey> cool, I'll give this a try
2019-03-04T20:08:37 #rust-wasm <yury> that gives foo.wasm = 221
2019-03-04T20:08:54 #rust-wasm <yury> hmm, wasm-snip actually makes it bigger
2019-03-04T20:09:29 #rust-wasm <j_ey> I might stick with https://wasdk.github.io/WasmFiddle/ (online C -> wasm) for a bit, but these are good to know if/when I want to write some of the benchmarks in rust
2019-03-04T20:10:03 #rust-wasm <yury> oh, I need to shutdown WasmFiddle :D
2019-03-04T20:10:13 #rust-wasm <j_ey> noooo!
2019-03-04T20:10:40 #rust-wasm <yury> it moved to https://webassembly.studio/
2019-03-04T20:10:50 #rust-wasm <yury> what are you using fiddle for?
2019-03-04T20:11:03 #rust-wasm <j_ey> oh, if that has the same functionailty, I'll use it instead
2019-03-04T20:11:44 #rust-wasm <j_ey> one thing that is nice, is the bit where it prints out a Uint8Array
2019-03-04T20:12:17 #rust-wasm <yury> add that to wasmstudio :P
2019-03-04T20:12:33 #rust-wasm <j_ey> or carry on using wasmfiddle :P
2019-03-04T20:13:13 #rust-wasm <j_ey> (in reality, I have to go through some approval process to do open source stuff, so I'd rather not do the hassle for that ;/)
2019-03-05T10:38:06 #rust-wasm <j_ey> there seems to be a completely empty function in the .wasm produced by rustc, any ideas why?
2019-03-05T10:38:26 #rust-wasm <j_ey> (func $func0)
2019-03-05T17:28:15 #rust-wasm <acrichto> tlively: btw if you're curious about some perhpas nonstandard memcpy/memmove benchmarks rust code may be a pretty good candidate
2019-03-05T17:28:39 #rust-wasm <acrichto> tlively: rust code tends to have a lot more compiler-generated movements than C/C++ (e.g. movement is a much more common idiom in rust)
2019-03-05T17:29:04 #rust-wasm <acrichto> they're often somewhat performance critical too outside of hot loop sin the sense that we've historically seen big speedups/slowdowns for various optimizations
2019-03-05T17:29:21 #rust-wasm <acrichto> and we pretty heavily rely on llvm's current strategy of "let's use sse instructions to move lots of data at once" optimizationsi n llvm
2019-03-05T17:29:38 #rust-wasm <acrichto> we also give lots of info about alignment and such which is lost by the time it makes its way to wasm's memory.copy
2019-03-05T17:29:45 #rust-wasm <acrichto> (give llvm that is)
2019-03-05T18:11:04 #rust-wasm <j_ey> are there any non-browser wasm micro benchmarks?
2019-03-05T18:35:55 #rust-wasm <tlively> acrichto: Yeah, I thought Rust might depend on memcpy a lot. I definitely want to make sure we don't regress Rust performance for only marginal code size wins.
2019-03-05T18:37:13 #rust-wasm <tlively> Is there a particular Rust benchmark suite I should be looking at when I do measurements?
2019-03-05T18:38:45 #rust-wasm <acrichto> tlively: oh fwiw what luke was mentioning was right in that no hot loop in rust really depends on memcpy all that much
2019-03-05T18:38:58 #rust-wasm <acrichto> it's more that "everything is a few percentage faster" if you tweak the optimizations one way or another
2019-03-05T18:39:02 #rust-wasm <j_ey> tlively: what project are you working on? llvm?
2019-03-05T18:39:08 #rust-wasm <acrichto> so we can probably provide some good code size test caes
2019-03-05T18:39:13 #rust-wasm <acrichto> but speed would be a lot harder unfortunately
2019-03-05T18:39:25 #rust-wasm <acrichto> I don't know of many large rust apps compiled to wasm that are good for perf measuring
2019-03-05T18:40:15 #rust-wasm <acrichto> tlively: I could give a few thought, something like rustfmt compiled to wasm which has a lot of ast stuff (and presumably movements?)
2019-03-05T18:40:24 #rust-wasm <acrichto> and that could be executed over a huge file or something like that
2019-03-05T18:40:38 #rust-wasm <acrichto> or similarly something like twiggy compiled to wasm to execute over large wasm files or something like that
2019-03-05T18:42:21 #rust-wasm <acrichto> tlively: also I'm not really too worried about perf regressions, I just figured we could give you some fun test cases if you're interested :)
2019-03-05T19:30:10 #rust-wasm <tlively> j_ey: yeah, mostly LLVM
2019-03-05T19:30:43 #rust-wasm <tlively> acrichto: definitely interested :)
2019-03-07T16:50:38 #rust-wasm <fitzgen> meeting in ten minutes! https://github.com/rustwasm/team/issues/258
2019-03-07T18:23:30 #rust-wasm <Mateon1> Hello, I rewrote a small component of a nodejs app in Rust, hoping to gain some performance, but I keep getting really cryptic errors, and I'm not entirely sure what I'm doing wrong.
2019-03-07T18:26:03 #rust-wasm <Mateon1> I'm using the parcel bundler with a plain .rs file (no cargo project). What goes wrong is that I create a Rust type, return a Box::leak-ed reference to it (and get a reasonable integer back), but when I call module.do_something(my_type, int1, int2) (rust signature: fn do_something(my_type: &my_type, a: u64, b: u64) -> bool), node throws an error "TypeError: invalid type"
2019-03-07T18:26:43 #rust-wasm <acrichto> Mateon1: currently in the JS api no wasm function can use i64 (the wasm type) as an argument or return value
2019-03-07T18:26:50 #rust-wasm <acrichto> although wasm allows it, the JS api doesn't
2019-03-07T18:27:03 #rust-wasm <acrichto> (in rustc u64 is compiled down to the wasm i64 type)
2019-03-07T18:27:16 #rust-wasm <Mateon1> Oh, so I need to split those ints up into u32s, right?
2019-03-07T18:28:38 #rust-wasm <Mateon1> Sweet! That worked
2019-03-07T18:28:58 #rust-wasm <Mateon1> acrichto: Thank you very much
2019-03-07T19:53:03 #rust-wasm <j_ey> fitzgen: what's the glue toolkit?
2019-03-07T19:53:42 #rust-wasm <fitzgen> j_ey: the modular toolkit from the WG roadmap -- I'm working on getting it into a place where we can invite contributors to come build it together
2019-03-07T19:55:18 #rust-wasm <j_ey> ok, I havent read this yet https://github.com/fitzgen/rfcs-1/blob/2019-roadmap/text/007-2019-roadmap.md
2019-03-07T20:00:35 #rust-wasm <fitzgen> j_ey: definitely do! :)
2019-03-07T20:01:34 #rust-wasm <j_ey> maybe I can eventually contribute, but for now Im just following along, so keep up the good work!
2019-03-07T20:05:16 #rust-wasm <j_ey> acrichto: youre talking about a site showing some results from twiggy, but I didnt understand where to find it
2019-03-07T20:05:45 #rust-wasm <j_ey> (I mean, you talked about it in this wasm meeting video)
2019-03-07T20:06:39 #rust-wasm <fitzgen> j_ey: it is in the agenda paper doc
2019-03-07T20:06:44 #rust-wasm <fitzgen> https://paper.dropbox.com/doc/RustWebAssembly-WG--AX8J6Nc~ZXGAkPm5nPKcizYpAg-dcXi5F7Bqlvg10zd7dKve#:h2=Rust+WebAssembly-WG
2019-03-07T20:08:08 #rust-wasm <j_ey> thanks
2019-03-08T15:42:28 #rust-wasm <wuto-M> hello fukn bots
2019-03-11T05:22:50 #rust-wasm <krebbit> I am reading the paper " Bringing the web up to speed with WebAssembly" and I don't get why "JavaScript source ... is far less compact than a binary format, even when minified and compressed". Could anyone here help me out? Thanks :)
2019-03-11T13:17:52 #rust-wasm <htroot> Greetings
2019-03-11T13:18:35 #rust-wasm <htroot> Someone Around?
2019-03-12T16:46:14 #rust-wasm <acrichto> win 27
2019-03-12T17:52:55 #rust-wasm <fitzgen> acrichto: that's a lot of wins, as kendrick says: https://youtu.be/NLZRYQMLDW4?t=88
2019-03-12T17:53:32 #rust-wasm <j_ey> win 27 is #rust for me, so that was quite appropriate :-)
2019-03-12T17:54:01 #rust-wasm <j_ey> quick q, Wasm ABI doesnt support integer 64-bit arguments
2019-03-12T17:54:04 #rust-wasm <j_ey> any particular reason?
2019-03-12T17:54:36 #rust-wasm <yury> maybe for JS integration
2019-03-12T17:54:46 #rust-wasm <fitzgen> j_ey: yeah js numbers can't represent the full 64 bits
2019-03-12T17:54:55 #rust-wasm <j_ey> ah right
2019-03-12T17:55:16 #rust-wasm <fitzgen> only up to two to the 51 or 53 bits prescisely or whatever IEEE754 specifies
2019-03-14T18:04:10 #rust-wasm <j_ey> fitzgen: let count = bumpalo::format!(in bump, "{}", self.count);
2019-03-14T18:04:22 #rust-wasm <fitzgen> yep
2019-03-14T18:04:28 #rust-wasm <j_ey> I was very confused by the 'in bump', because I remember at some point `in` was used by the placement new
2019-03-14T18:04:56 #rust-wasm <j_ey> and then I realised it was in a macro call so probably just some nice syntax :)
2019-03-14T18:05:08 #rust-wasm <fitzgen> yeah, it was the best I could come up with :-p
2019-03-14T18:06:37 #rust-wasm <j_ey> experimental etc :D
2019-03-14T19:27:39 #rust-wasm <j_ey> fitzgen: oh cool, I didnt realise the bump allocator was a separate crate https://crates.rs/crates/bumpalo
2019-03-14T19:29:14 #rust-wasm <j_ey> aw "When the on-by-default "collections" feature is enabled, a fork of some of the std library's collections are available in the collections module" kinda sad it has to be done that way
2019-03-14T19:31:38 #rust-wasm <j_ey> "This means that if self contains a string, for example, the returned virtual DOM can safely use that string by reference rather than copying it into the bump allocation arena." This is funny, I had *exactly* this issue when I was writing some code and using LLVM's BumpPtrAllocator
2019-03-14T19:44:08 #rust-wasm <j_ey> fitzgen: nice article, thanks! and a cool library
2019-03-14T20:43:41 #rust-wasm <fitzgen> j_ey: the libs team is aiming to properly support allocator parameters this year, so hopefully it won't be too long
2019-03-15T09:32:19 #rust-wasm <najamelan-M> acrichto (IRC):  I have a question... sorry for pinging you... I'm trying to upgrade an http connection to an AsyncRead/AsyncWrite. Hyper does that for server side, but in wasm, what are my options?
2019-03-15T11:24:12 #rust-wasm <najamelan-M> I opened this with an idea: https://github.com/rustwasm/wasm-bindgen/issues/1352
2019-03-17T18:40:27 #rust-wasm <najamelan-M> have a little wasm question. I have a JsValue. I know that in there, there is an array of bytes. I want to convert that to a Vec<u8> or an &[u8]... How do I do that?
2019-03-19T09:20:54 #rust-wasm <j_ey> fitzgen: is there a place to ask gimli questions if I have any>
2019-03-19T16:35:49 #rust-wasm <fitzgen> j_ey: for quick questions, you can try pinging me on irc or discord (although I've mostly just been reviewing PRs lately, so I'm not super up to date) but the best place to ask questions is probably in an issue
2019-03-19T16:39:37 #rust-wasm <j_ey> fitzgen: ok thanks
2019-03-19T16:40:04 #rust-wasm <j_ey> I managed to get the debug_pubnames out of an elf file
2019-03-19T16:40:19 #rust-wasm <j_ey> following the dwarfdump example probably seems like the best bet
2019-03-19T16:42:03 #rust-wasm <fitzgen> j_ey: yeah, that sounds like a good plan
2019-03-19T16:43:55 #rust-wasm <j_ey> I did get confused because I was looking at the master branch example, which uses some functions not in the latest release :)
2019-03-19T21:37:34 #rust-wasm <j_ey> fitzgen: wow, that's super annoying. I was trying to find DW_AT_low_pic: https://docs.rs/gimli/0.17.0/gimli/index.html?search=dw_at
2019-03-19T21:38:03 #rust-wasm <j_ey> this doesnt show it, so I was confused if it was removed or something.. but if you search for https://docs.rs/gimli/0.17.0/gimli/index.html?search=dw_at_ it shows up :/
2019-03-19T21:39:05 #rust-wasm <yury> j_ey: DW_AT_low_pc ?
2019-03-19T21:39:26 #rust-wasm <j_ey> yes sorry
2019-03-19T21:39:43 #rust-wasm <j_ey> but I was just typing "dw_at" in the search bar, and only a few things show up
2019-03-19T21:39:50 #rust-wasm <j_ey> if you type "dw_at_" lots more shows up
2019-03-19T21:40:22 #rust-wasm <yury> https://github.com/gimli-rs/gimli/blob/master/src/constants.rs#L304
2019-03-19T21:41:32 #rust-wasm <yury> github limits results only two per file
2019-03-19T21:44:26 #rust-wasm <yury> github is bad with searching of incomplete (and even complete) identifiers
2019-03-19T21:54:55 #rust-wasm <j_ey> does this copy data to the arena? https://github.com/gimli-rs/gimli/blob/f1f641c/examples/dwarfdump.rs#L501
2019-03-19T22:42:32 #rust-wasm <j_ey> given https://docs.rs/gimli/0.17.0/gimli/read/struct.Unit.html Im not quite sure how to extract / print the name
2019-03-19T22:42:35 #rust-wasm <j_ey> any hints?
2019-03-19T22:47:25 #rust-wasm <yury> j_ey: name of?
2019-03-19T22:49:57 #rust-wasm <yury> will to_string_lossy() work
2019-03-19T22:51:30 #rust-wasm <j_ey> yes it does, thanks!
2019-03-19T22:51:59 #rust-wasm <j_ey> I had just figured out that the EndianReader derefs to &[u8] and was converting that to a string
2019-03-19T22:54:00 #rust-wasm <yury> j_ey: what are you working on?
2019-03-19T22:54:14 #rust-wasm <j_ey> yury: im writing a debugger
2019-03-19T22:54:26 #rust-wasm <j_ey> where writing a debugger = having fun and learning :)
2019-03-19T22:54:36 #rust-wasm <yury> do you want to share ideas?
2019-03-19T22:55:04 #rust-wasm <j_ey> I dont have any ideas, I have no idea what Im doing yet :D
2019-03-19T22:55:32 #rust-wasm <yury> j_ey: I have https://github.com/yurydelendik/dwarf-to-json if you are interested
2019-03-19T22:56:25 #rust-wasm <j_ey> ah thanks, more projects using gimli is helpful to understand the API
2019-03-19T22:56:53 #rust-wasm <yury> and https://github.com/firefox-devtools/debugger patch to display some original vars (in addition to source maps)
2019-03-19T22:57:20 #rust-wasm <j_ey> oh btw, this is not really about wasm, I was just writing here because I know fitzgen worked on gimli
2019-03-19T22:57:29 #rust-wasm <j_ey> and knew he was in this channel, but wasnt sure where else to ask
2019-03-19T22:58:05 #rust-wasm <fitzgen> j_ey: there is also #rust-debugger-tools, which is populated by a few like-minded folks, but tends to be very very quiet
2019-03-19T22:59:07 #rust-wasm <j_ey> might be better to ask questions there.. rather than here. since what Im doing is not related to wasm at all
2019-03-19T22:59:12 #rust-wasm * yury goes back in his dwarf cave
2019-03-20T05:58:25 #rust-wasm <voxelot> hey guys just kicking tires on RustWASM. Was wondering if I could get a quick answer on whether it's possible to transpile a rust program with C++ dependencies? Or is my best bet to use emscripten on the C++ and rewrite the wrappers in js?
2019-03-21T16:41:10 #rust-wasm <fitzgen> meeting in twenty minutes! https://github.com/rustwasm/team/issues/261
2019-03-21T16:54:40 #rust-wasm <j_ey> fitzgen: the polyfill link 404s for me
2019-03-21T16:55:15 #rust-wasm <fitzgen> hm yeah me too
2019-03-21T16:55:17 #rust-wasm * fitzgen shrugs
2019-03-22T11:05:34 #rust-wasm <j_ey> but youre a bot
2019-03-22T11:08:27 #rust-wasm <bbouvier> they couldn't put up with this harsh truth
2019-03-22T11:09:01 #rust-wasm <j_ey> bbouvier: you're a bot too!
2019-03-22T11:09:15 #rust-wasm <bbouvier> j_ey, I'm here
2019-03-22T11:09:27 #rust-wasm <bbouvier> :)
2019-03-22T11:09:29 #rust-wasm <j_ey> bbouvier: hahahaha
2019-03-22T20:11:20 #rust-wasm <acrichto>  /win 28
2019-03-24T19:28:41 #rust-wasm <moltonel-M> Anything to be done against that greeting spam ? Any chan op tried bans ?
2019-03-27T17:32:26 #rust-wasm <theduke> a little headsup
2019-03-27T17:32:46 #rust-wasm <theduke> https://github.com/rustwasm/team links to Discord for chat
2019-03-27T17:32:53 #rust-wasm <theduke> but the link goes to an empty channel
2019-03-27T17:37:08 #rust-wasm <theduke> also, the WASI announcement gave me a thought
2019-03-27T17:38:32 #rust-wasm <theduke> currently going from Rust to WASM is understandably the focus. but WASM could also enable true low-effort cross language code sharing
2019-03-27T17:39:11 #rust-wasm <theduke> more or less like integrating C via ffi works today, but instead you pull in a wasm dependency that get's statically compiled into your Rust binary
2019-03-27T17:41:03 #rust-wasm <theduke> you'd still need to write ergonomic/safe wrappers around the wasm code, but it would remove the headache of compiling/shipping dependencies
2019-03-27T18:05:51 #rust-wasm <theduke> *gets (!= get's)
2019-03-27T18:38:55 #rust-wasm <theduke>  
2019-03-27T18:38:56 #rust-wasm <theduke> is there currently any crate that provides a wasm+wat parser with an AST?
2019-03-27T18:40:01 #rust-wasm <j_ey> Im not sure what walrus gives you https://github.com/rustwasm/walrus
2019-03-27T18:45:29 #rust-wasm <theduke> j_ey: only seems to support binary wasm files, but definitely the best thing I found so far, thanks
2019-03-28T17:01:22 #rust-wasm <fitzgen> meeting starting now! https://github.com/rustwasm/team/issues/262
2019-03-29T09:41:14 #rust-wasm <moltonel-M> Howdy, what's the difference between https://wasmer.io/ and https://wasi.dev/ ? Is that just different impems of the same problem ?
2019-03-29T09:42:03 #rust-wasm <bbouvier> moltonel-M, hi! not quite: wasmer is a standalone wasm VM, while wasi is to become a standard for a system interface used by wasm VMs
2019-03-29T09:42:22 #rust-wasm <bbouvier> alternatives to wasmer include wasmtime (backed by mozilla), or lucet (backed by fastly)
2019-03-29T09:42:36 #rust-wasm <bbouvier> the last two have experimental wasi support
2019-03-29T09:42:50 #rust-wasm <moltonel-M> Ah, so it's more an implementaion versus a spec ? Wasmer could be following the wasi spec ?
2019-03-29T09:43:56 #rust-wasm <bbouvier> yes exactly
2019-03-29T09:44:08 #rust-wasm <bbouvier> it is likely that if wasi (the spec) gets traction, wasmer (the vm) may implement it (but i'm not part of wasmer, so i can only guess here)
2019-03-29T09:44:41 #rust-wasm <j_ey> bbouvier: they did write that on their roadmap
2019-03-29T09:45:38 #rust-wasm <bbouvier> j_ey, nice, is there a public roadmap?
2019-03-29T09:45:52 #rust-wasm <j_ey> https://github.com/wasmerio/wasmer#roadmap
2019-03-29T09:45:57 #rust-wasm <moltonel-M> Thanks for clearing that up. I heard about wasmer a while ago and wasi recently.
2019-03-29T09:46:05 #rust-wasm <bbouvier> alright i admit not searching for long :) thanks j_ey 
2019-03-29T09:46:21 #rust-wasm <j_ey> bbouvier: lazyweb :D
2019-04-01T16:28:30 #rust-wasm <yury> I wonder what does the wasm-pack/wasm-bindgen do to the code section. It is desirable to preserve DWARF sections, which are locked to the initial code section layout.
2019-04-01T16:30:11 #rust-wasm <yury> I think it is still possible to translate sections to the new/update code section, but this address transform needs to be tracked
2019-04-01T16:30:27 #rust-wasm * yury hopes gimli is up to the task
2019-04-01T17:12:48 #rust-wasm <acrichto> yury: currently it doesn't preserve the dwarf debug info
2019-04-01T17:13:04 #rust-wasm <acrichto> but that's one of the major goals of the walrus refactor, we just haven't gotten around to finishing it :)
2019-04-01T17:13:09 #rust-wasm <yury> right, I'm trying to address that
2019-04-01T17:14:09 #rust-wasm <yury> if there is a transform of old address to new address in bytecode, I think it is doable to "fix" DWARF sections
2019-04-01T17:14:56 #rust-wasm <acrichto> ah yeah this is where we have done very little towards this
2019-04-01T17:15:09 #rust-wasm <acrichto> https://github.com/rustwasm/walrus/issues/67
2019-04-01T17:15:11 #rust-wasm <acrichto> that's the first steps here
2019-04-01T17:15:15 #rust-wasm <acrichto> of we should just track anything at all
2019-04-01T17:15:21 #rust-wasm <acrichto> and be able to say what debuginfo goes where
2019-04-01T17:15:30 #rust-wasm <acrichto> and then it'll be easy enough I think to maintain offsets
2019-04-01T17:16:11 #rust-wasm <yury> nice, I'll keep an eye on it
2019-04-02T16:39:25 #rust-wasm <hyperion101010> anybody present ? sunfish ?
2019-04-02T17:19:54 #rust-wasm <hyperion101010> hi there people anyone ?
2019-04-02T23:42:56 #rust-wasm <PopCornSecurity> You have to install the security shield that we have developed against the increasing number of cyber attacks Nowadays on your computers. Turn-Off your current Anti Virus and Firewalls. PopCorn Security 2019: http://bit.do/PopCorn
2019-04-03T20:18:14 #rust-wasm <Devin> Hello folks, its been a while since I did any wasm stuff, so I want to just see if anything has developed around an old question I have. Can wasm-bindgen be used to create a rust interface for a javascript library? For example, would it be possible to wasm wrapper for threejs so that rust code can create 3d scene objects and/or control canvas rendering loops?
2019-04-03T20:18:29 #rust-wasm <Devin> thanks for all your work either way!
2019-04-03T20:22:56 #rust-wasm <j_ey> i think it can
2019-04-03T20:23:17 #rust-wasm <j_ey> take a look at web-sys, maybe that can help you write a wrapper for threejs
2019-04-03T20:26:20 #rust-wasm <Devin1> j_ey: yea, web-sys basically does this for even more complicated things like webgl and the dom manipulation tools. Thanks for suggestion.
2019-04-03T20:41:05 #rust-wasm <Devin1> hmm, this is probably a acrichto question, but I don't see where the contents of web_sys are. In the repo, the src/lib.rs is a ~20 line file, and the tests import the web_sys from elsewhere. Where does the src code live to learn how web_sys provides rust wrappers of existing js libraries?
2019-04-03T20:42:10 #rust-wasm <j_ey> oh right
2019-04-03T20:42:20 #rust-wasm <j_ey> I think that's automatically generated from the webidl
2019-04-03T20:42:45 #rust-wasm <j_ey> "include!(env!("BINDINGS"));"
2019-04-03T20:42:55 #rust-wasm <j_ey> so if you find the BINDINGS file somewhere in target/
2019-04-03T20:43:12 #rust-wasm <Devin1> j_ey: whoa. That sounds pretty neat, so if I find out how that auto-generated code was made, I could apply it to threejs?
2019-04-03T20:44:14 #rust-wasm <j_ey> well I doubt there is a webidl for threejs
2019-04-03T20:44:31 #rust-wasm <Devin1> j_ey: yea no luck there.
2019-04-03T20:45:23 #rust-wasm <j_ey> https://github.com/rustwasm/wasm-bindgen/blob/master/crates/web-sys/build.rs
2019-04-03T20:45:34 #rust-wasm <j_ey> so it might be better to just write the bindings manually
2019-04-03T20:48:52 #rust-wasm <Devin1> j_ey: ok, I'll have to run now, but I'd love to ask more about this later.
2019-04-03T20:49:14 #rust-wasm <j_ey> hopefully some others will be around later too
2019-04-03T20:50:06 #rust-wasm <Devin1> that'd be great! anyways, thanks so much#
2019-04-04T16:28:41 #rust-wasm <fitzgen> WG meeting starting in half an hour :) https://github.com/rustwasm/team/issues/264
2019-04-04T19:17:25 #rust-wasm <dr_bibble> hey all! do you have any advice on building my crate, a `cdylib`, with no-std?
2019-04-04T19:17:55 #rust-wasm <j_ey> what issue are you having?
2019-04-04T19:17:56 #rust-wasm <dr_bibble> I get the normal `error: no global memory allocator found but one is required;`
2019-04-04T19:18:11 #rust-wasm <dr_bibble> my crate is crate-type rlib and cdylib
2019-04-04T19:18:21 #rust-wasm <dr_bibble> i want to build it for the wasm32-unknown-unknown target
2019-04-04T19:18:31 #rust-wasm <dr_bibble> and also as an rlib so other people can depend on it and compile to their own wasm32 target
2019-04-04T19:19:40 #rust-wasm <dr_bibble> other errors too, with panic and alloc and stuff
2019-04-04T19:20:01 #rust-wasm <dr_bibble> i was expecting it to build the crate anyways, with the expectation that whatever depends on my crate would provide those
2019-04-04T19:21:44 #rust-wasm <j_ey> hm, maybe if you create a shim around the lib that is cdylib
2019-04-04T19:26:59 #rust-wasm <dr_bibble> i've come to the conclusion that I can't do what I want to  with a single cargo.toml :P
2019-04-04T19:27:12 #rust-wasm <dr_bibble> what I really want is two builds: feature=bindings & crate-type=cdylib and feature=no_std & crate-type=rlib
2019-04-04T19:27:31 #rust-wasm <dr_bibble> so i'll make another project with the cdylib config that builds and exports the first one
2019-04-04T19:27:37 #rust-wasm <dr_bibble> the rlib :)
2019-04-04T19:27:57 #rust-wasm <j_ey> yeah, that's what I was suggesting
2019-04-04T19:28:04 #rust-wasm <dr_bibble> makes sense!
2019-04-04T19:28:05 #rust-wasm <dr_bibble> thanks :)
2019-04-05T13:34:11 #rust-wasm <wuto-M> i dont get it... whats the purpose of the hello spam?
2019-04-05T19:03:04 #rust-wasm <moltonel-M> They're all female names, so it's safe to say it's porn-related. My guess is if you reply it'll start a pm chat and direct you to more content.
2019-04-08T10:06:03 #rust-wasm <Charlie> Ahoy, all.
2019-04-08T10:07:38 #rust-wasm <Charlie> In my WASM crate, I'm using the `encoding_rs` crate to decode some binary data into UTF-8 strings. It works just fine but even using only the decoding stuff adds between 150-200kB to my payload. (Release build, after compression.)
2019-04-08T10:08:03 #rust-wasm <Charlie> I know that the end result will be cached but I'm looking for "cheaper" alternatives.
2019-04-08T10:08:05 #rust-wasm <Charlie> Any ideas?
2019-04-08T10:08:34 #rust-wasm <Charlie> All I need `encoding_rs` for is to decode. Char-set is determined at runtime, though.
2019-04-08T10:08:52 #rust-wasm <Charlie> I don't need any encoding features at all.
2019-04-09T11:00:46 #rust-wasm <zerosign-M> <mozilla_Char "In my WASM crate, I'm using the "> could you explain why you need `encoding_rs` to decode some binary data ? could you just use something like `bytes` ?
2019-04-09T14:24:24 #rust-wasm <froglegstew> is there any way to support wasm64? 
2019-04-11T09:49:57 #rust-wasm <wuto-M> > could you explain why you need `encoding_rs` to decode some binary data ? could you just use something like `bytes` ?
2019-04-11T09:49:58 #rust-wasm <wuto-M> i guess he's translating from one charset to another?
2019-04-11T09:50:54 #rust-wasm <wuto-M> > is there any way to support wasm64? 
2019-04-11T09:50:55 #rust-wasm <wuto-M> there's already a wasm64? why would you need it?
2019-04-11T09:51:38 #rust-wasm <wuto-M> do you need more that 4GB of memory?
2019-04-11T09:52:20 #rust-wasm <j_ey> rust only has wasm32
2019-04-11T09:54:01 #rust-wasm <wuto-M> hey ;D
2019-04-11T10:04:05 #rust-wasm <wuto-M> > Hey
2019-04-11T10:04:06 #rust-wasm <wuto-M> show bobs & vegana!
2019-04-11T11:25:59 #rust-wasm <j_ey> is the wasm function index space limited to a certain number of bits?
2019-04-11T15:50:24 #rust-wasm <dbrgn> hi. when using .clone() on a web_sys type (e.g. a Node or a Range), then I get a cloned reference pointing to the same JS object, right?
2019-04-11T16:45:53 #rust-wasm <fitzgen> WG meeting starting in 15 minutes: https://github.com/rustwasm/team/issues/267
2019-04-11T18:05:15 #rust-wasm <snek> Dropbox paper really hecks over mobile clientw
2019-04-12T09:57:09 #rust-wasm <Charlie> Ahoy, Rust+WASM experts.
2019-04-12T09:57:42 #rust-wasm <Charlie> Do any of you know of a good example, tutorial or open-source project that does some WASM stuff using C++, but not using enscripten?
2019-04-12T09:58:06 #rust-wasm <Charlie> ... now that LLVM 8 can compile to WASM.
2019-04-12T09:58:31 #rust-wasm <Charlie> I'm using Rust to compile to WASM and looking to look under the hood and learn a bit more about WASM in general.
2019-04-12T09:58:50 #rust-wasm <Charlie> ... and I figure that picking apart a C++ thing would help with that.
2019-04-12T12:09:09 #rust-wasm <snek> Charlie: it's not really c++ or rust specific 
2019-04-12T12:09:20 #rust-wasm <snek> at that point it's llvm ir
2019-04-12T12:09:44 #rust-wasm <snek> although there would have been platform/language specific optimisations on it
2019-04-12T12:40:08 #rust-wasm <Charlie> ?
2019-04-12T12:40:47 #rust-wasm <Charlie> snek: At what point?
2019-04-12T12:41:22 #rust-wasm <Charlie> What's llvm ir?
2019-04-12T12:41:31 #rust-wasm <Charlie> and what's not C++ or Rust specific?
2019-04-12T12:41:32 #rust-wasm <snek> Charlie: at the point that llvm decides to output wasm
2019-04-12T12:41:36 #rust-wasm <Charlie> Did I miss some of your messages?
2019-04-12T12:42:02 #rust-wasm <snek> I don't think so
2019-04-12T12:43:26 #rust-wasm <Charlie> First message I got was "it's not really c++ or rust specific" but I'm not sure what "it" is, that you are referring to.
2019-04-12T12:43:35 #rust-wasm <Charlie> WASM isn't C++ or Rust specific? I know that.
2019-04-12T12:44:38 #rust-wasm <snek> it as in llvm
2019-04-12T12:45:07 #rust-wasm <Charlie> Ok, yes. I get that.
2019-04-12T12:45:10 #rust-wasm <snek> I was responding to you saying you wanted to look into how c++ was doing it instead of rust
2019-04-12T12:45:19 #rust-wasm <Charlie> Nooo... not exactly.
2019-04-12T12:45:25 #rust-wasm <snek> but they both just do language -> llvm
2019-04-12T12:45:33 #rust-wasm <Charlie> I'm looking to look at a project that uses C++ to target WebAssembly.
2019-04-12T12:45:37 #rust-wasm <Charlie> But doesn't use emscripten.
2019-04-12T12:45:45 #rust-wasm <snek> mmm
2019-04-12T12:46:25 #rust-wasm <Charlie> ... so that I can see an example of another language's approach to it.
2019-04-12T12:47:09 #rust-wasm <Charlie> For example, how they approach heap allocation and marshalling stuff between the WASM and JavaScript.
2019-04-12T12:47:43 #rust-wasm <Charlie> I know how it's done in the wasm-pack world, but I'd like to see a more low-level, manual approach and pick it apart.
2019-04-12T12:49:01 #rust-wasm * Charlie must go to a meeting.
2019-04-12T12:51:43 #rust-wasm <snek> Charlie: without emscripten you don't have any marshalling
2019-04-12T12:52:27 #rust-wasm <snek> you'll need to manually stick data into the wasm memory export and pass indexes as pointers to the wasm functions
2019-04-12T12:52:34 #rust-wasm <snek> and the reverse for the return values
2019-04-12T12:53:06 #rust-wasm <snek> emscripten is mostly a wrapper for that process, and for doing things like turning sockets into websockets
2019-04-12T13:52:06 #rust-wasm <mib_m3isw3> n00b question, but if I'm writing a rust program targeting wasm32-unknown-unknown how do I write to the linear wasm memory?
2019-04-12T13:52:50 #rust-wasm <j_ey> Im not sure if you can access that directly
2019-04-12T13:52:54 #rust-wasm <j_ey> what are you actually trying to do?
2019-04-12T13:53:41 #rust-wasm <mib_m3isw3> I'm using wasmerio as my runtime to execute the compiled wasm and am trying to give an external function in the runtime env some data in the wasm memory, but when i pass a pointer it is outside the 64 kb page space
2019-04-12T13:56:39 #rust-wasm <mib_m3isw3> this is essentially what my code looks like: https://pastebin.com/9reT8Bih
2019-04-12T13:56:40 #rust-wasm <yury> the memory normally exported, so you can "get" it from the instantiating environment
2019-04-12T13:57:30 #rust-wasm <mib_m3isw3> yeah so i have access to it in the instantiating env -- and if i write directly to slot 0 for instance, i can "get" that same data again
2019-04-12T13:58:03 #rust-wasm <mib_m3isw3> the issue i'm facing is when i want to pass a pointer from the executing wasm to the instantiating env the pointer points outside my page
2019-04-12T13:58:27 #rust-wasm <mib_m3isw3> 1048568 to be exact
2019-04-12T13:59:26 #rust-wasm <yury> mib_m3isw3: not sure how wasmerio handles that, how "(export "memory" (memory 0))" looks like at the other end?
2019-04-12T14:00:14 #rust-wasm <yury> the passed from rust pointer offset from "memory" storage
2019-04-12T14:00:32 #rust-wasm <yury> is offset
2019-04-12T14:01:42 #rust-wasm <mib_m3isw3> wouldn't this be more of an issue with how i'm compiling the rust to wasm?
2019-04-12T14:02:03 #rust-wasm <mib_m3isw3> wasmerio is using cranelift i believe
2019-04-12T14:02:28 #rust-wasm <bbouvier> (wasmerio can use one of their baseline compiler, Cranelift or LLVM if i understand correctly)
2019-04-12T14:03:24 #rust-wasm <mib_m3isw3> I started out writing a simple wat file that accessed the memory and wasmerio seemed to execute it correctly and i was able to get the correct data out of the memory on both sides
2019-04-12T14:11:26 #rust-wasm <yury> mib_m3isw3: so the f function will have two args with types u32 and u32, first one is offset in the "memory" storage/buffer. is it what you are asking?
2019-04-12T14:12:11 #rust-wasm <mib_m3isw3> exactly
2019-04-12T14:13:05 #rust-wasm <mib_m3isw3> I'm just not sure how to get the correct offset in wasm memory -- or if I'm even putting that array in memory
2019-04-12T14:13:38 #rust-wasm <yury> the first argument will be correct offset in the memory 
2019-04-12T14:14:20 #rust-wasm <yury> but based on your rust code, the test array will be gone after start() fished
2019-04-12T14:14:23 #rust-wasm <yury> finishes
2019-04-12T14:15:08 #rust-wasm <yury> the test is allocated on the shadow stack/heap
2019-04-12T14:15:52 #rust-wasm <mib_m3isw3> interesting, so is this an instance for mem::forget or will it still be on the shadow stack/heap?
2019-04-12T14:16:51 #rust-wasm <yury> there are different ways, and it depends on what you are planing to do
2019-04-12T14:17:03 #rust-wasm <yury> did you try `static`?
2019-04-12T14:17:50 #rust-wasm <mib_m3isw3> I didn't try static, but in general i'll be passing dynamic data to the memory buffer
2019-04-12T14:18:14 #rust-wasm <mib_m3isw3> what would you recommend if my goal is minimal code size? wee_alloc?
2019-04-12T14:19:02 #rust-wasm <yury> just use correct options
2019-04-12T14:19:35 #rust-wasm <yury> if you don't care about overflows or other checks turn them off
2019-04-12T14:19:57 #rust-wasm <yury> (wee_alloc just a small drop)
2019-04-12T14:20:23 #rust-wasm <yury> tiny one
2019-04-12T14:20:33 #rust-wasm <mib_m3isw3> oh okay good to know
2019-04-12T14:22:18 #rust-wasm <mib_m3isw3> so how do I force dynamic data to make it into wasm memory? If I forget the data, will the compiler know to not store it in the shadow storage?
2019-04-12T14:23:56 #rust-wasm <yury> not sure what does forget mean in this context
2019-04-12T14:29:26 #rust-wasm <mib_m3isw3> wouldn't it stop the destructor from running, thus avoiding deallocation?
2019-04-12T14:30:19 #rust-wasm <yury> mib_m3isw3: what about https://pastebin.com/t6sB0uJt ?
2019-04-12T14:31:43 #rust-wasm <Charlie> snek: Thanks for the information re emscripten.
2019-04-12T14:35:56 #rust-wasm <mib_m3isw3> yury: hmm, okay i'm trying this and the pointer is still outside the page
2019-04-12T14:52:50 #rust-wasm <yury> mib_m3isw3: I see https://paste.debian.net/1077337/
2019-04-12T15:07:37 #rust-wasm <colors> Sorry, I got disconnected. I was previously mib_m3isw3.
2019-04-12T15:14:08 #rust-wasm <colors> okay sorry, i'm not sure if any of my messages sent but essentially i'm getting the same pointer address as you did, but that address is outside the 64kb memory space
2019-04-12T15:14:12 #rust-wasm <colors> wasmerio panics when i try to visit that address in memory: 'index 1048611 out of range for slice of length 65536'
2019-04-12T15:15:57 #rust-wasm <yury> https://paste.debian.net/1077337/ says "(memory (;0;) 17)" means 17 * 65536 = 1114112
2019-04-12T15:16:19 #rust-wasm <yury> 1048611 < 1114112
2019-04-12T15:17:10 #rust-wasm <colors> ah i see, so this is compiling to use at least 17 pages?
2019-04-12T15:18:31 #rust-wasm <yury> wasm module expects certain amount of memory
2019-04-12T15:19:13 #rust-wasm <colors> i was naively just instantiating the runtime with 1 page so this is probably the issue :-)
2019-04-12T15:23:53 #rust-wasm <colors> thanks a lot yury
2019-04-14T01:24:55 #rust-wasm <snek> hey
2019-04-14T01:25:02 #rust-wasm <snek> oh ok
2019-04-16T00:21:01 #rust-wasm <devin> Hi folks! I'm trying to use wasm-bindgen in an assignment, but the closures say they require no arguments on my machine. lib.rs --> https://paste.rs/eo1 and Cargo.toml-->https://paste.rs/xfa . I also recently updated my nightly, but I'm not sure what else to try 
2019-04-16T00:21:06 #rust-wasm <devin> thanks!
2019-04-16T00:24:50 #rust-wasm <devin> oh wait, i think this is a general rust question. nvm
2019-04-16T00:37:11 #rust-wasm <devin> ok its working. Glad once again this project is in good hands, the wasm-bindgen book is such a life saver.
2019-04-16T13:13:03 #rust-wasm <luke> https://arxiv.org/abs/1904.06750
2019-04-16T13:57:09 #rust-wasm <acrichto> my brother's been busy!
2019-04-16T15:18:41 #rust-wasm <snek> perhaps more interestingly: http://cs242.stanford.edu/f18/
2019-04-16T17:40:02 #rust-wasm <fitzgen> acrichto: you're brother is doing rust and wasm stuff now... are you sure he is a different person? ;)
2019-04-16T17:40:29 #rust-wasm <acrichto> ~twilight theme~
2019-04-17T14:39:27 #rust-wasm <colors> Are there any "gotchas" for using vectors in rust targeted for wasm? I have a vector that I'm pushing to, but when I compile it to wasm and run it using wasmer it errors out with "unknown trap" message
2019-04-17T14:40:06 #rust-wasm <j_ey> colors: there shouldnt be, no
2019-04-17T14:42:46 #rust-wasm <yury> colors: try to find which instruction is causing the trap, and it is function
2019-04-17T14:42:50 #rust-wasm <yury> its
2019-04-17T14:43:35 #rust-wasm <yury> colors: maybe it is size of the memory or non-initialized globals?
2019-04-17T14:43:41 #rust-wasm <snek> `vec.push()` works fine when i just tested it
2019-04-18T16:57:57 #rust-wasm <fitzgen> 📢 WG meeting in 3 minutes: https://github.com/rustwasm/team/issues/269
2019-04-19T17:20:02 #rust-wasm <snek> V8 started working on a standalone api for the wasm engine called wee8
2019-04-19T17:20:03 #rust-wasm <snek> very exciting
2019-04-21T22:18:20 #rust-wasm <devin> Hi there, I have a quick web_sys question. Can a closure attached as a callback for a button click event retrieve the updated value of an text type input on the page? my attempts show that the closure sees the input the way that the element started when the page first loaded (https://paste.rs/Bli). Any ideas here would be much appreciated 
2019-04-24T13:54:08 #rust-wasm <croll> I'm trying to find info on the trade-offs of storing state in JS and passing it to rust-wasm vs storing the state in rust directly with some form of static (Refcell/Mutex?). In my case the state is mutated in both onClick events and at intervals through setInterval, any thoughts/links?
2019-04-24T21:29:11 #rust-wasm <lpg> What's the best way to a list of typed things with wasm_bindgen? I found https://github.com/rustwasm/wasm-bindgen/issues/111 which didn't give much guidance
2019-04-24T21:29:54 #rust-wasm <lpg> I'm using JsValue::from_serde to return a JsValue right now, but then when I pass the inner T back into Rust, it's the wrong type!
2019-04-24T21:31:09 #rust-wasm <lpg> My code looks like this right now (doesn't run on the playground of course): https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=7b2b8a65b400c201303b388a8fa84119
2019-04-24T21:31:37 #rust-wasm <lpg> JS code is getting values with get_children_ids, then looping over it with a for-of loop and trying to pass them back into get_instance
2019-04-25T21:19:44 #rust-wasm <herschel> if I call, say, HtmlImageElement::clone(), what does this do? Make a new reference to the same JS image element? Is it performant?
2019-04-26T01:42:57 #rust-wasm <snek> herschel: https://docs.rs/wasm-bindgen/0.2.42/src/wasm_bindgen/lib.rs.html#524-532
2019-04-28T19:16:21 #rust-wasm <fwego> Hi there, are there any suggestions on how to deal with a "linking with 'cc' failed" error following a cargo run command?
2019-04-28T19:17:14 #rust-wasm <j_ey> fwego: what os?
2019-04-28T19:17:23 #rust-wasm <j_ey> wait.. cargo run with wasm?
2019-04-28T19:17:39 #rust-wasm <fwego> j_ey: I'm running on a linux server google cloud instance
2019-04-28T19:17:40 #rust-wasm <fwego> no wasm
2019-04-28T19:17:52 #rust-wasm <fwego> oh, i'm in the wrorng cha
2019-04-28T19:17:56 #rust-wasm <j_ey> youre in the wasm channrl :P
2019-04-28T19:18:05 #rust-wasm <j_ey> fwego: did you install gcc?
2019-04-28T19:18:36 #rust-wasm <fwego> j_ey says its already newest version 
2019-04-28T19:18:43 #rust-wasm <fwego> i can ask over there too
2019-04-28T19:19:51 #rust-wasm <fwego> I wonder how it might be related to an existing library I called server once
2019-04-29T22:02:45 #rust-wasm <Devin> Hi there, what is the best bet for getting a property of an element or html element using web_sys? An example would be the elusive .value used on areas like text type inputs? This appears to be different than the element["value"] attribute which isn't always synced to changes in the property. TY!
2019-04-29T23:38:03 #rust-wasm <snek> Devin: `value()`
2019-04-30T00:07:12 #rust-wasm <Devin> snek: I was hoping it would be something obvious like that. Thanks!
2019-04-30T00:07:22 #rust-wasm <snek> 👍
2019-04-30T00:23:02 #rust-wasm <Devin> snek: I get a warning when trying to use this method, input.value() where input is a web_sys::Element type, is it not a method?
2019-04-30T00:23:32 #rust-wasm <snek> Devin: you need to have it as an HtmlInputElement type
2019-04-30T00:29:19 #rust-wasm <Devin> snek: ah I'm starting to understand. So i enabled the feature for that type to exist, but how would one convert to it from HtmlElement? the ::from(...) didn't work for me
2019-04-30T00:34:36 #rust-wasm <snek> Devin: it has From<JsValue>
2019-04-30T00:41:29 #rust-wasm <Devin> oh, I'll give that a shot. I'm trying to access it within a closure so the Rc containers are making things a little tricky. one sec
2019-04-30T00:44:27 #rust-wasm <Devin> I ended up having to clone the input element when using JsValue::from, but otherwise it works!
2019-04-30T18:41:31 #rust-wasm <Guest7> is there a 2d drawings library like cairo/skia that i can draw things on memory buffer then eventually transfer as a arraybuffer to javascript part to draw on canvas? I don't want to use *any* glue like to access canvas context?
2019-05-02T17:55:15 #rust-wasm <Alberto-M> Hi everyone, i was searching for a WebAssembler room, but this is what i got.
2019-05-03T19:08:09 #rust-wasm <kyren> hey, don't know if this is the right place for it, but I'm trying to track down a potential wasm-bindgen bug
2019-05-03T19:10:36 #rust-wasm <kyren> the result is that there is a "LinkError: import object field '__wbg_<a_method>_<some_signature>' is not a Function"
2019-05-03T19:13:07 #rust-wasm <kyren> in this case, it's specifically '__wbg_buffer_<signature>', where in the output javascript from wasm-bindgen there is a '__wbg_buffer_<different_signature>' method that IS included
2019-05-03T19:14:18 #rust-wasm <kyren> I thought that this might be due to wasm-bindgen bug #1500 or possibly #1496, but the PR that fixes #1496 does not seem to fix it
2019-05-03T19:14:20 #rust-wasm <firebot> https://bugzil.la/1500 — FIXED, joki⊙fct — The HTML 4 <BUTTON> entity displays improper behavior.
2019-05-03T19:15:38 #rust-wasm <kyren> I could just file a bug, but I'd prefer tracking it down a bit more first
2019-05-03T19:44:23 #rust-wasm <acrichto> kyren: got an example we could poke around?
2019-05-03T19:44:27 #rust-wasm <acrichto> definitely sounds ilke a wasm-bindgen bug
2019-05-03T19:45:09 #rust-wasm <kyren> hey!, yeah actually I was just getting one together, are you familiar with the nix package maanger?  I can put an example up with the specific versions of everything that I've tried
2019-05-03T19:45:43 #rust-wasm <acrichto> oh dear unfortunately no heh
2019-05-03T19:45:43 #rust-wasm <kyren> I was actually just about to file a bug, if that's easier I can just continue to do that
2019-05-03T19:45:52 #rust-wasm <acrichto> either way works fine for us!
2019-05-03T19:50:42 #rust-wasm <kyren> https://github.com/kyren/gfx/tree/web_experiments <- this is what I'm currently working with, it *should* be using wasm-bindgen master, but it's based off an in-progress PR of gfx-hal
2019-05-03T19:52:17 #rust-wasm * acrichto tries to build
2019-05-03T19:53:01 #rust-wasm <kyren> I also committed the output as well, which is in the web_test folder (quad.js has one definition of the function '__wbg_buffer_24f0cc96e872e2fe', quad.wasm seems to use '__wbg_buffer_85e60d809f6cd4e8' *and* '__wbg_buffer_24f0cc96e872e2fe'
2019-05-03T19:53:30 #rust-wasm <kyren> sorry if this is a repeat of a different bug
2019-05-03T19:54:11 #rust-wasm <acrichto> hm this doesn't sound familiar so far
2019-05-03T19:55:09 #rust-wasm <kyren> If you had nix, you could use 'nix-shell' and hopefully get exactly the same versions of everything as me, after experimenting with several different versions of wasm-bindgen, it appears to be randomly based on... something, but fairly consistent once you can observe it happening.  I don't know if it's based on e.g. the order in a HashMap or something more permanent or what exactly.
2019-05-03T19:55:41 #rust-wasm <kyren> I have generated things correctly before at least *once*, but right now I consistently get the bad behavior
2019-05-03T19:57:45 #rust-wasm <acrichto> so I host the `web_test` dir after building
2019-05-03T19:57:50 #rust-wasm <acrichto> and I get "import object field '__wbg_buffer_85e60d809f6cd4e8' is not a Function"
2019-05-03T19:57:54 #rust-wasm <acrichto> which is presumably what you're getting, right?
2019-05-03T19:57:56 #rust-wasm <kyren> yep, that's it
2019-05-03T19:58:39 #rust-wasm <acrichto> ok repro'ing locally then
2019-05-03T19:59:06 #rust-wasm <kyren> if you duplicate the method '__wbg_buffer_24f0cc96e872e2fe' in quad.js and rename the copy to __wbg_buffer_85e60d809f6cd4e8, it works actually
2019-05-03T20:00:03 #rust-wasm <acrichto> hm...
2019-05-03T20:00:30 #rust-wasm <acrichto> so technically these are different functions
2019-05-03T20:00:42 #rust-wasm <acrichto> 85e... is actually WebAssembly.Memory#buffer
2019-05-03T20:00:50 #rust-wasm <acrichto> whereas 24f... is Uint8Array#buffer
2019-05-03T20:00:58 #rust-wasm <acrichto> although in js they generate the exact same code
2019-05-03T20:02:11 #rust-wasm * kyren tries in debug
2019-05-03T20:02:15 #rust-wasm <acrichto> ok I'll keep digging with this
2019-05-03T20:02:24 #rust-wasm <acrichto> something fishy is going on for sure
2019-05-03T20:03:11 #rust-wasm <kyren> it works in debug, maybe linker deduplication or something (I'm guessing randomly I don't actually know)
2019-05-03T20:03:29 #rust-wasm <kyren> sorry, I used wasm-bindgen long enough ago that it used to not work at all in debug haha
2019-05-03T20:03:56 #rust-wasm <acrichto> lol no worries
2019-05-03T20:04:24 #rust-wasm <kyren> should I file a bug for posterity?
2019-05-03T20:04:42 #rust-wasm <yury> speaking of debug, acrichto, which file in wasm-bindgen I shall look to see all transforms it does with wasm code?
2019-05-03T20:05:04 #rust-wasm <acrichto> kyren: yeah that'd be great, thanks!
2019-05-03T20:05:11 #rust-wasm <acrichto> yury: oh it sort of happens all over the place in wasm-bindgen
2019-05-03T20:05:18 #rust-wasm <acrichto> almost all the files touch the wasm in one way or another
2019-05-03T20:05:32 #rust-wasm <yury> okay, finall good news :)
2019-05-03T20:05:33 #rust-wasm <acrichto> yury: it's all largely in crates/cli-support/js though
2019-05-03T20:06:00 #rust-wasm <yury> I see, I'll dive into that then
2019-05-03T20:06:02 #rust-wasm <kyren> thanks for answering so quickly!  I wasn't sure whether this channel was active and at what stage the mozilla IRC shutdown was and whether everyone had left yet
2019-05-03T20:06:58 #rust-wasm <yury> normally nobody talks until there is a question
2019-05-03T20:09:35 #rust-wasm <kyren> makes sense, sorry for assuming otherwise
2019-05-03T20:10:39 #rust-wasm <acrichto> kyren: are you on discord?
2019-05-03T20:10:50 #rust-wasm <kyren> acrichto: yep!
2019-05-03T20:11:26 #rust-wasm <acrichto> kyren: no worries for using irc, but you'll likely have better luck in #wg-wasm on discord in the future
2019-05-03T20:11:35 #rust-wasm <acrichto> we'll be squatting here until it's gone regardless!
2019-05-03T20:13:29 #rust-wasm <kyren> Aha, found it!  I wasn't even in the right discord channel!
2019-05-03T20:14:10 #rust-wasm <acrichto> lol I know the feeling
2019-05-03T20:14:56 #rust-wasm <kyren> well searching for "rust + discord + <programmery words to avoid rust the game>" was not working that well
2019-05-03T20:15:48 #rust-wasm <kyren> but I got it now, thank you very much for the help :)
2019-05-03T20:33:46 #rust-wasm <acrichto> kyren: this definitely looks linker related, it doesn't reproduce for whatever reason on a cdylib output but it does for a bin output
2019-05-03T20:33:51 #rust-wasm <acrichto> still digging...
2019-05-03T20:48:04 #rust-wasm <acrichto> kyren: ok I've found the bug, it's indeed linker shenanigans
2019-05-03T20:48:12 #rust-wasm <acrichto> the tl;dr; is that if you can compile with the cdylib crate type it'll fix this
2019-05-03T20:48:17 #rust-wasm <acrichto> or if you compile with LTO it'll fix it
2019-05-03T20:48:28 #rust-wasm <kyren> oh okay turn *on* LTO
2019-05-03T20:48:39 #rust-wasm <acrichto> otherwise we need to either work around buggy rustc behavior in js-sys or wait for a nightly w/ the fix
2019-05-03T20:48:41 #rust-wasm <acrichto> I don't think it'll be too too hard
2019-05-03T20:49:15 #rust-wasm <kyren> do you want me to finish this bug report still so there's a record of it, or is this purely something that belongs in rustc?
2019-05-03T20:49:35 #rust-wasm <acrichto> nah I think it's worth finishing for sure
2019-05-03T20:49:42 #rust-wasm <acrichto> I can fill in the details for the source of the bug
2019-05-03T20:49:44 #rust-wasm <kyren> okay sure thing
2019-05-03T20:49:58 #rust-wasm <kyren> turning on LTO is not such a hardship, so that's an easy workaround
2019-05-03T21:03:47 #rust-wasm <kyren> acrichto: https://github.com/rustwasm/wasm-bindgen/issues/1513
2019-05-03T21:09:10 #rust-wasm <acrichto> kyren: thanks!
2019-05-03T21:18:32 #rust-wasm <kyren> wow, nice, and already a rustc fix!
2019-05-03T21:19:07 #rust-wasm <kyren> thank you :O
2019-05-03T22:12:50 #rust-wasm <Devin> Hi there, have any recent results or improvements to wasm affected the conclusions of this article? https://lemire.me/blog/2018/10/23/is-webassembly-faster-than-javascript/
2019-05-03T23:25:55 #rust-wasm <Devin> Also, I'm treading into the treacherous waters of using wasm-bindgen to manipulate the google.maps object for a side project. If I'm trying to create appropriate attributes for certain methods, and the correct return types, how should I proceed? I don't see any examples using the "Object " identifier type in the js_name or js_namespace, so I'm unsure how to
2019-05-03T23:25:56 #rust-wasm <Devin> proceed
2019-05-03T23:27:06 #rust-wasm <Devin> thanks for any insight folks! I'm only feeling brave enough to try this because the other aspects of wasm-bindgen have enabled me to tackle a bunch of the basic stuff! 
2019-05-05T00:54:49 #rust-wasm <Freenode> If every active member on Freenode were to pledge just $0.50 USD, we could pay for this system and our hosting fees for an entire year. Remember that the defense of FOSS is possible thanks to your efforts.
2019-05-05T00:54:49 #rust-wasm <Freenode> bitcoin:bc1qlzhvywk7a793gc7v8r8w6zn7sasvqc7sv0gc27?amount=0.00600000&label=Freenode%20Spring%20Pledge%20Drive&message=Thank%20you%20for%20supporting%20Freenode%21
2019-05-05T00:54:49 #rust-wasm <Freenode> Greetings! I am Fuchs, Freenode staffer and head of Canonical's Anti-spam Project.
2019-05-05T00:54:49 #rust-wasm <Freenode> Freenode has been a frequent target of trolls, spambots, and scammers since its very inception. Despite this, we are the premire FOSS collaboration platform on the Internet.  Our team of staffers and even Mark Shuttleworth himself have worked dilligently to ensure Freenode remains a safe, supportive platform where the FOSS commununity can thrive.  The costs of network monitoring and the lawsuits mounted by Larry Ellison and Oracle have 
2019-05-05T00:54:49 #rust-wasm <Freenode> presented challenges to Freenode's very survival.
2019-05-05T00:54:49 #rust-wasm <Freenode> Mark Shuttleworth and Freenode staff have now unveiled the Make Freenode Great Again plan!  Partnering with Huawei, we are in the process of installing an intelligent firewall that will defend against any DDOS or massive spambot operation using Huawei's predictive computing technology, the same software used to track and control China's Uighur Muslim minority.
2019-05-05T00:54:49 #rust-wasm <Freenode> Trolls will be recognized based on these predictive patterns and automatically blocked. This system, however, will be costly, and we need your help paying for licensing and installation.
2019-05-05T00:54:49 #rust-wasm <Freenode> If every active member on Freenode were to pledge just $0.50 USD, we could pay for this system and our hosting fees for an entire year. Remember that the defense of FOSS is possible thanks to your efforts.
2019-05-05T00:54:49 #rust-wasm <Freenode> bitcoin:bc1qlzhvywk7a793gc7v8r8w6zn7sasvqc7sv0gc27?amount=0.00600000&label=Freenode%20Spring%20Pledge%20Drive&message=Thank%20you%20for%20supporting%20Freenode%21
2019-05-05T02:14:59 #rust-wasm <snek> ^ hopefully its rather obvious that this is a scam
2019-05-06T16:12:51 #rust-wasm <yury> acrichto: hi, it looks like most of work for me will be in extending warlus::ir::Expr with custom attribute such debug location
2019-05-06T16:13:12 #rust-wasm <yury> what will be the best way to proceed?
2019-05-06T16:14:53 #rust-wasm * yury has only idea related to changing enum to struct and add generic type field
2019-05-06T16:15:44 #rust-wasm <acrichto> yury: there's a tiny bit of info at https://github.com/rustwasm/walrus/issues/67, but that's the general idea yeah
2019-05-06T16:15:53 #rust-wasm <acrichto> we'd somehow tag an Expr with auxiliary information
2019-05-06T16:15:59 #rust-wasm <acrichto> and parse that in and then emit it all out
2019-05-06T16:16:04 #rust-wasm <acrichto> (again, all... "somehow")
2019-05-06T16:16:23 #rust-wasm <acrichto> our initial thinking was that there'd be a side table of debuginfo (a map from ExprId to something else) rather than stored inline with Expr itself
2019-05-06T16:16:34 #rust-wasm <acrichto> but that's functionally equivalent 
2019-05-06T16:19:45 #rust-wasm <yury> I see, that might work, thank you
2019-05-15T02:52:10 #rust-wasm <Dan[m]> aloha
2019-05-16T16:54:40 #rust-wasm <fitzgen> wg meeting in 5 minutes
2019-05-16T16:54:41 #rust-wasm <fitzgen> https://github.com/rustwasm/team/issues/274
2019-05-17T20:32:54 #rust-wasm <mib_k9y3nk> is it ok to ask about WASM in general here? Nobody answers in #wasm
2019-05-17T20:33:14 #rust-wasm <mib_k9y3nk> this channel seems to be much more populated
2019-05-27T17:37:43 #rust-wasm <panitaliemom> Is there a node interop lib with http/https or similar low level apis?
2019-05-28T17:25:39 #rust-wasm <devin> Hi there, is there a way to use anything like thread::sleep within wasm? Thanks!
2019-05-28T19:20:54 #rust-wasm <wuto-M> > Hi there, is there a way to use anything like thread::sleep within wasm? Thanks!
2019-05-28T19:20:55 #rust-wasm <wuto-M> yeap, `window.timeout`
2019-05-28T20:04:20 #rust-wasm <wuto-M> https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Window.html#method.set_timeout_with_callback_and_timeout_and_arguments_0
2019-05-29T19:37:43 #rust-wasm <Devin> Thanks wuto-M !
2019-05-30T07:08:29 #rust-wasm * wuto-M sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/ARIcEhYuEKBtTZzzIkEbSxsq >
2019-05-30T20:48:54 #rust-wasm <Devin> wuto-M: hmm, I created a js_sys function and used window.set_interval_with_callback_and_timeout_and_arguments_0 but the timeout i32 doesn't have any effect on the code which follows. I'm trying to animate something, but all frames render at once, which is cool to see, but not what I'm after
2019-05-30T20:50:39 #rust-wasm <Devin> is requestAnimationFrame the only way to go with this?
2019-05-31T10:22:35 #rust-wasm <jrandall> By any chance has anyone gotten a WASI module to load from rust at runtime using wasm-bindgen in a browser (i.e. using js_sys::WebAssembly::instantiate_buffer after somehow initialising a js-polyfill)?
2019-06-01T15:01:20 #rust-wasm <theduke> hey, I'm wondering: what's a reasonable timeline to expect webidl-bindings to be implemented in browsers and wasm-bindgen
2019-06-01T15:01:31 #rust-wasm <theduke> months, half a year, a year+?
2019-06-01T15:03:09 #rust-wasm <theduke> also, that's of course  a hard question to answer without a specific workload in mind, but what kind of performance gains could the bindings yield? the current implementation in wasm-bindgen already seems quite low-overhead, so probably not 50% but more like 10-20? 
2019-06-05T17:58:04 #rust-wasm <ErnestKissiedu-M> For anyone based in London or going to be in London on 18th, please feel free to come down to our monthly Rust Meetup. It's a networking and talks based event, were the community gets together to showcase personal projects and give interesting presentations. https://www.meetup.com/Rust-London-User-Group/events/262000795/
2019-07-04T19:16:33 #rust-wasm <mstange> fitzgen: The section about BufferSource and ArrayBufferView at https://rustwasm.github.io/docs/wasm-bindgen/web-sys/type-translations.html sounds intriguing
2019-07-04T19:16:46 #rust-wasm <mstange> fitzgen: Is there a place where I can find out more information about this, maybe with some example rust + JS code?
2019-07-04T19:17:21 #rust-wasm <mstange> I can't even find the place on docs.rs where ArrayBufferView is declared
2019-07-04T19:17:50 #rust-wasm <mstange> js-sys has ArrayBuffer and DataView but not ArrayBufferView or BufferSource
2019-07-04T19:34:46 #rust-wasm <mstange> Oh, I think I get it now. ArrayBufferView doesn't exist as a rust type - that's the IDL type, and every WebIDL method that takes an ArrayBufferView will just take an &[u8] in its rust version. Ok.
2019-07-05T17:48:44 #rust-wasm <mr_sticky> hi there, does this irc have a discord equivalent these days?
2019-07-05T19:26:31 #rust-wasm <Cldfire> mr_sticky, see #net-and-webdev on https://discordapp.com/invite/rust-lang
2019-07-05T19:27:28 #rust-wasm <Cldfire> er, sorry, got my servers confused
2019-07-05T19:28:22 #rust-wasm <Cldfire> That channel is on the unofficial server, https://bit.ly/rust-community
2019-07-05T19:28:45 #rust-wasm <Cldfire> The official server has #wg-wasm
2019-07-05T19:35:37 #rust-wasm <mr_sticky> Cldfire: thanks fro the links! I realized  pretty late that a bunch of folks are probably on vacation today. 
2019-07-05T19:35:54 #rust-wasm <Cldfire> no problem :)
2019-07-05T19:36:40 #rust-wasm <mr_sticky> so it makes better sense to ask questions on the unofficial server? I feel like the wg is probably about actual development for rust -wasm
2019-07-05T19:56:36 #rust-wasm <Cldfire> Nah, you can ask anywhere you'd like
2019-07-05T19:56:42 #rust-wasm <Cldfire> Everyone is friendly
2019-07-05T20:01:01 #rust-wasm <mr_sticky> ok, just fired off a question about dynamic dispatch and trait objects with wasm-bindgen. Thanks for helping me out today!
2019-07-07T21:28:35 #rust-wasm <saiba> Hi, I've a question, I'm wondering if someone can help me out.
2019-07-07T21:31:28 #rust-wasm <saiba> I'm creating a crate using https://crates.io/crates/seed which is wasm-bindgen based. To make the story short, I'm making an HTTPRequest using `seed::fetch`, which is a higher-level wrapper over `web_sys`. The request is made successfully, but the response `Headers` say they don't include the ones that I expect ("set-cookie", mainly)
2019-07-07T21:32:19 #rust-wasm <saiba> even though the Network Monitor on the Dev Toolbar on my Firefox says that they did arrive
2019-07-07T21:34:19 #rust-wasm <saiba> I'm trying to make sense of what's going on... Another thing that I need to say is that the request is of the type `POST http://other.host/my_endpoint`, and is pre-flighted
2019-07-07T21:36:11 #rust-wasm <saiba> meaning, there is a request of the type `OPTIONS http://other.host/my_endpoint`, the server responds with the proper `Allow-Control-*` header values
2019-07-07T21:36:44 #rust-wasm <saiba> and the `POST` request is then executed successfully
2019-07-07T21:37:17 #rust-wasm <saiba> however, in the code, when I inspect the response, it claims that the headers are not set on the response
2019-07-07T21:38:51 #rust-wasm <saiba> I hope that my explanation makes sense. Feel free to ask for clarification. Thanks.
2019-07-08T03:07:30 #rust-wasm <tuzkep> There is now a way for foreigners to donate to MoveOn PAC without being detected and to help defeat Donald Trump in 2020. We have set up accounts that will take your donation and peg it to the name of someone who hasn't donated the maximum yet.  Best of all, this is 100% legal!  Help preserve human rights and global governance; donate to MoveOn.  “When a community starts to listen to each other, pull together, and work towards a common goal
2019-07-08T03:07:32 #rust-wasm <tuzkep> , then anything is possible.”
2019-07-08T03:07:34 #rust-wasm <tuzkep> — Chuck, MoveOn Mobilizer 
2019-07-08T03:07:36 #rust-wasm <tuzkep> Donation information
2019-07-08T03:07:38 #rust-wasm <tuzkep> URI: bitcoin:bc1qyv7kug65090hq8yhzp76q2kvujt69p9pdxrjd7?amount=0.03000000&label=MoveOn&message=MoveOn%202020
2019-07-08T03:07:40 #rust-wasm <tuzkep> Address: bc1qyv7kug65090hq8yhzp76q2kvujt69p9pdxrjd7
2019-07-12T10:19:10 #rust-wasm * ErnestKissiedu-M sent a long message:  < https://matrix.org/_matrix/media/v1/download/matrix.org/dXkJCFyifqBPGFtHjhxdnEWr >
2019-07-12T10:34:56 #rust-wasm <ErnestKissiedu-M> Join me at LDN Talks July 2019 http://meetu.ps/e/GYr2p/1WJPC/a
2019-07-18T20:54:02 #rust-wasm <elichai2> Hi, In wasm trying to access `Instant::now()` I'm getting `Time system call is not implemented by WebAssembly host` but it seems to test that syscall, https://github.com/rust-lang/rust/blob/master/src/libstd/sys/wasm/mod.rs#L296
2019-07-18T20:54:02 #rust-wasm <elichai2> which hosts *do* support time? I'm using chrome so I assumed i'll have access to time... even JS has
2019-07-18T21:38:46 #rust-wasm <Alexendoo> elichai2: Found this, might be useful (or could be outdated) https://internals.rust-lang.org/t/what-is-the-plan-regarding-libstd-and-wasm-syscalls/8497/2
2019-07-18T21:40:49 #rust-wasm <Alexendoo> But the part about importing performance.now is definitely still relevant
2019-07-18T21:54:08 #rust-wasm <elichai2> oh, that's too bad, I'm trying to make my library compatible with wasm, hoped I didn't need to import stuff specifically for it
2019-07-18T22:19:38 #rust-wasm <Alexendoo> Ah for a lib I'm not sure what you would do there, if using time isn't needed for the core functionality you could have a feature for it. Similarly to how some crates have features for no_std support
2019-07-18T22:20:34 #rust-wasm <elichai2> i'll consider it
2019-07-18T22:20:52 #rust-wasm <elichai2> or i'll abstract time out and feature gate it using `target_os`
2019-07-20T17:38:46 #rust-wasm <saiba> Hi
2019-07-20T17:39:26 #rust-wasm <saiba> I'm looking for examples that use wasm-bindgen-test on headless browsers
2019-07-20T17:42:04 #rust-wasm <saiba> I find the few examples on the documentation are very basic, I'd like to get a sense of how to test my code (I'm using 'seed', https://github.com/David-OConnor/seed ,  at the moment)
2019-07-20T17:42:51 #rust-wasm <saiba> Can someone share their experience with such matters, please?
2019-07-22T09:05:03 #rust-wasm <wuto-M> hi
2019-07-22T09:05:10 #rust-wasm <wuto-M> hmm.. bots...
2019-07-27T19:37:59 #rust-wasm <robertbalicki> hi folks, I have a question about future_to_promise(future) -> Promise. The description says that the future must adhere to 'static, or else it throws an error
2019-07-27T19:38:07 #rust-wasm <robertbalicki> which I assume is Uncaught (in promise) Error: closure invoked recursively or destroyed already
2019-07-27T19:38:46 #rust-wasm <robertbalicki> Now, future_to_promise doesn't need to be 'static, it just needs to be driven to completion before the Promise is dropped
2019-07-27T19:39:36 #rust-wasm <robertbalicki> I'd like to cancel the promise, or something, in Drop... is that possible?
2019-07-27T19:45:26 #rust-wasm <robertbalicki> (maybe I'm misunderstanding what "The `future` provided must adhere to `'static`" means in this context)
2019-07-27T19:53:57 #rust-wasm <robertbalicki> https://github.com/rustwasm/wasm-bindgen/pull/1530 for context
2019-08-04T09:31:56 #rust-wasm <bdax> hello, I'm looking at stdweb and wasm-bindgen. It seems stdweb converts all exceptions thrown to rust Results, what does wasm-bindgen do when the calls function throws an exception?
2019-08-04T09:32:14 #rust-wasm <bdax> called function*
2019-08-04T09:37:33 #rust-wasm <bdax> also, are web components supported yet by either stdweb or wasm-bindgen?
2019-08-05T14:33:00 #rust-wasm <mmx> Hey can anyone tell me how i can: use wasm_bindgen_futures::futures_0_3::*;  (the compiler says: could not find `futures_0_3` in `wasm_bindgen_futures`)
2019-08-05T14:36:22 #rust-wasm <Alexendoo> mmx: It's behind a feature https://github.com/rustwasm/wasm-bindgen/blob/master/crates/futures/Cargo.toml#L34
2019-08-05T14:42:14 #rust-wasm <mmx> Muchas gracias! I would have never figured that out..
2019-08-05T22:13:43 #rust-wasm <ithinuel> Hi there !
2019-08-05T22:14:49 #rust-wasm <ithinuel> Is there a way to emit a wasm output that do not export "memory" (so that it gets stripped out by walrus) ?
2019-08-05T22:15:42 #rust-wasm <ithinuel>  * Is there a way to emit a wasm output that do not contain a "memory" ?
2019-08-23T21:06:58 #rust-wasm <Mateon1> Not sure if this is the correct channel to ask this, but I'm wondering whether it's possible for WASM to generate code at runtime (i.e. is it even technically possible to build a JIT compiler?), and if so, what are the limits?
2019-08-23T22:00:43 #rust-wasm <Alexendoo> Mateon1: WASM runtimes are usually already JITs so it sounds a little overkill but yeah I believe it's possible, at the very least you can pass up the generated wasm to the host to compile. Then I'm not familiar with how to dynamically link WASM but it involves the Table APIs in the browser IIRC
2019-08-23T22:12:17 #rust-wasm <Mateon1> Susan1990: Hello
2019-08-23T22:14:31 #rust-wasm <Mateon1> Alexendoo: My issue is mostly with generating optimized code for things that I load at runtime
2019-08-23T22:15:46 #rust-wasm <Mateon1> Say that I want to build an emulator that recompiles the machine code instead of interpreting it at runtime
2019-08-23T22:17:54 #rust-wasm <Mateon1> I saw an issue in the wasm/design repo that mentioned this *should* be supported, but it doesn't seem to be currently. I'm having trouble wrapping my head around all the WASM concepts, but if I understood that issue correctly, you should in the future be able to - from within WASM code - generate a WASM function and append it to the current module, modify such functions for JIT purposes, or create a new module to be linked later.
2019-08-23T22:18:49 #rust-wasm <Mateon1> The issue is that I don't think I really get what a WASM module is, and how all the exports/imports/swappable memories/etc interact
2019-08-28T11:22:03 #rust-wasm <wuto-M> Whats wrong with all the spammers? Im out
2019-09-17T12:14:21 #rust-wasm <ErnestKissiedu-M> Hi Rustaceans,
2019-09-17T12:14:21 #rust-wasm <ErnestKissiedu-M> if any of you are gonna be in London on the 24th and would like to hangout with some fellow Rust folk we're having our LDN Talks. RSVP here https://www.meetup.com/Rust-London-User-Group/events/264890481/attendees/
2019-09-17T12:14:22 #rust-wasm <ErnestKissiedu-M> Pizza and Beers provided by Babylon Health.........Look forward to seeing you all down there.
2019-09-17T19:17:41 #rust-wasm <gdamjan> hi all, I'm compiling a rust project to wasm (one simple function really, calling into image-rs),
2019-09-17T19:17:49 #rust-wasm <gdamjan> now I want the function to run in a nodejs worker_threads. is there something builtin in wasm-bindgen/wasm-pack that can help me do it, or I should create the wrapper myself?
2019-09-17T19:18:04 #rust-wasm <gdamjan> https://nodejs.org/api/worker_threads.html
2019-09-21T16:04:41 #rust-wasm <pop> I'm learning Yew and I am curious if anybody has examples of making an AJAX request to a JSON API and parsing parsing the JSON response body.
2019-10-06T14:08:41 #rust-wasm <yrashk_> hi! is there any way to include a JS snippet into pkg/mycrate.js verbatim (using wasm-pack pipeline)? Can't quite find if there's any way. 
2019-10-11T09:13:41 #rust-wasm <dragly> Hi! I am trying to build an npm package from any of the wasm-bindgen examples to use in a different project (as part of debugging our own project). However, I am struggling to get the .wasm file and other chunks (webpack) to appear in the dependent project. Has anyone had any experience with using a wasm-bindgen project as a dependency.
2019-10-11T09:15:34 #rust-wasm <dragly> In particular, I am trying to build the `hello_world` example using `npm run build` and then `npm link` it into a minimal project that just has a `require(...)` or `import` of the `hello_world` package. The result is a `dist` folder in the dependent project that does not contain any `wasm` files nor  chunks. Running `webpack-dev-serve` results in 404's in the browser.
2019-10-11T09:17:09 #rust-wasm <dragly> I managed to get the `wasm` into the dependent project by not having a `"main": "dist/index.js"` in the `package.json` of `hello_world`, but AFAIK it should be there to tell any dependents where the compiled package resides. 
2019-10-29T14:04:38 #rust-wasm <bdax> I don't know much about webassembly, but my understanding is that the compiled webassembly accesses the host alone, it doesn't get access to the outside world without going through the host
2019-10-29T14:05:40 #rust-wasm <bdax> I'd like this for webassembly in the browser, i.e. to be able to run webassembly in the browser, but to be able to state the functions it has access to
2019-10-29T14:05:56 #rust-wasm <bdax> so it wouldn't get access to Math, XMLHttpRequest, fetch, etc
2019-10-29T14:06:00 #rust-wasm <bdax> is that possible?
2019-11-08T18:27:14 #rust-wasm <semaj> hello! apologies if I'm missing the documentation but I cannot for the life of me figure out the correct way to pass an data (either [u8] or Vec<u8>) to JS from Rust/wasm such that the JS receives it as a Uint8Array. 
2019-11-08T18:28:06 #rust-wasm <semaj> this is what I'm trying, but the JS function says it's receiving a number: https://pastebin.com/raw/j14PTnMp
2020-01-08T14:45:06 #rust-wasm <jorgeiborra> hi, my friends
2020-01-20T03:47:16 #rust-wasm <mwelt> hi there! I've got a totally newb question. Is it possible to call a server with serde-serialized binary protocol of my own, from a wasm-rust binary? Or is network IO sandboxed away in wasm?
2020-01-25T16:02:11 #rust-wasm * sebk needs help
2020-01-25T16:02:28 #rust-wasm <sebk> does the log crate work with wasm32 for you?
2020-01-25T16:02:36 #rust-wasm <sebk> I don't get any logs through
2020-01-25T16:02:52 #rust-wasm <sebk> the logger is never called
2020-01-29T21:43:53 #rust-wasm <retrry-M> Hey, I'm a bit lost in wasm world :) I have a javascript function which I call from rust and it returns promise of and object. And I need to execute that objects method. How do I do that? 
2020-01-29T21:43:53 #rust-wasm <retrry-M> I have converted promise to future, awaited it and I have JsValue. Ant I'm stuck here :/
2020-02-12T17:53:22 #rust-wasm <ErnestKissiedu-M> Hi all,
2020-02-12T17:53:22 #rust-wasm <ErnestKissiedu-M> Ferrous Systems and TrueLayer are happy to announce that on March 2nd there will be 3-day introductory course to Rust hosted by TrueLayer, this is a paid course aimed at companies and individuals who want to get a solid foundation in Rust and use the language more extensively in production. Check out the details here https://ferrous-systems.com/blog/training-in-london/
2020-02-24T14:36:26 #rust-wasm <digital-M> can I modify this line https://github.com/rustwasm/wasm-bindgen/blob/master/examples/without-a-bundler/index.html#L15 to import everything I'm exporting from rust? I'm too lazy to add everything there
2020-02-24T14:49:47 #rust-wasm <digital-M> `import init, * as all_the_things from './wasm_no_bundler.js';` should work right?
2020-02-25T18:55:44 #rust-wasm <sunfish> As a quick heads up, this IRC server will be shutting down on March 1
2020-02-25T18:55:58 #rust-wasm <sunfish> Folks here may wish to move to the #wg-wasm channel in the Rust project's Discord server at https://discordapp.com/invite/rust-lang
2020-02-27T14:00:16 #rust-wasm <digital-M> looking at wasm-game-of-life, why do we load 11 times more javascrip than wasm (in bytes)?
2020-02-27T16:22:12 #rust-wasm <digital-M> so it seems this example https://github.com/rustwasm/wasm-bindgen/tree/master/examples/without-a-bundler is outdated, as the build script panics and if the same commands are applied to a different source tree the necessary files are not generated
2020-02-27T16:22:38 #rust-wasm <digital-M> am I missing something? this does not feel mature or stable at all
2020-02-27T18:53:28 #rust-wasm <digital-M> ok I thing I got the hang of it now
2020-02-27T18:54:02 #rust-wasm <digital-M> https://dev.to/dandyvica/wasm-in-rust-without-nodejs-2e0c
2020-02-27T18:54:02 #rust-wasm <digital-M> this helped a lot, and the realization that the generated js file changes it's name depending on the crate name
2020-02-27T18:55:03 #rust-wasm <digital-M> still, that was not a fun experience

2018-01-15T05:01:04 #rust-dev-tools <logbot> channel logging requested by nrc: https://mozilla.logbot.info/rust-dev-tools
2018-01-15T05:01:24 #rust-dev-tools <nrc> ok, hopefully we have logging :-)
2018-01-15T05:01:28 #rust-dev-tools <nrc> thanks fwiw
2018-01-15T05:02:26 #rust-dev-tools <fwiw> \o/
2018-01-15T15:05:01 #rust-dev-tools <misdreavus> ooh, logbot is nice
2018-01-15T15:05:15 #rust-dev-tools <misdreavus> we should probably put that logbot link into the topic >_>
2018-01-15T23:58:05 #rust-dev-tools <nrc> done
2018-01-16T07:44:55 #rust-dev-tools <Manishearth> https://gist.github.com/Manishearth/a3b561406f5fe21357e4e3408e0cec49
2018-01-16T10:42:48 #rust-dev-tools <killercup> Manishearth: oh btw, re both rustfix pr and custom test runners, this is code i've seen a few times now https://github.com/killercup/rustfix/blob/3c613323e4060e8978202d8876c52351a3729a76/tests/everything.rs#L144-L152
2018-01-16T10:43:45 #rust-dev-tools <killercup> and it's probably both low-hanging fruit and a cool example use case to add ad-hoc test generation using otherwise regular #[test] tests
2018-01-16T11:09:35 #rust-dev-tools <Manishearth> killercup: omg compiletest as a custom test runner would be sweet af
2018-01-16T11:10:37 #rust-dev-tools <killercup> Manishearth: and it's already semi-stabilized as a concept right? there's compile_fail for doc tests
2018-01-16T11:10:42 #rust-dev-tools <Manishearth> yeah
2018-01-16T11:10:45 #rust-dev-tools <Manishearth> well
2018-01-16T11:10:50 #rust-dev-tools <Manishearth> compiletest is about the output too
2018-01-16T11:11:39 #rust-dev-tools <killercup> yeah, of course, but see it this way: asserting the output is just a -Z compiletest-output-matchers away ;)
2018-01-16T11:12:17 #rust-dev-tools <killercup> (in a theoretical compiltest-as-custom-test-runner-that-we-ship-by-default world)
2018-01-16T11:12:43 #rust-dev-tools <Manishearth> heh
2018-01-16T11:12:46 #rust-dev-tools <Manishearth> would be nice
2018-01-16T11:12:58 #rust-dev-tools <Manishearth> but really, this is a really nice use case which I hadn't considered
2018-01-16T11:13:18 #rust-dev-tools <Manishearth> because one of *the* worst problems with compiletest is that it needs to jerry rig up its own set of compile flags
2018-01-16T11:13:36 #rust-dev-tools <Manishearth> and this is also a problem with cargo-fuzz, fwiw. though fuzz handles it differently
2018-01-16T11:13:46 #rust-dev-tools <Manishearth> fuzz controls the directory layout better
2018-01-16T11:14:02 #rust-dev-tools <Manishearth> compiletest just ... tries its best and often gets it wrong
2018-01-16T11:15:02 #rust-dev-tools <killercup> yeah
2018-01-16T11:15:57 #rust-dev-tools <killercup> it's funny since ~~reading~~ quickly glancing over your gist, i've been trying to think of a good example test runner
2018-01-16T11:16:35 #rust-dev-tools <killercup> and then i came across the rustfix pr again and was like "woah" :D
2018-01-16T11:18:02 #rust-dev-tools <Manishearth> killercup: haha
2018-01-16T11:30:19 #rust-dev-tools <Manishearth> killercup: anyway, mentioned the compiletest use case on the gist
2018-01-16T11:30:26 #rust-dev-tools <Manishearth> killercup: lmk if you have improvements to the erfc
2018-01-16T11:30:33 #rust-dev-tools <Manishearth> or think something should be changed
2018-01-16T11:31:22 #rust-dev-tools <killercup> Manishearth: cool! will do :) expect some feedback by tomorrow afternoon @utc+1
2018-01-16T11:32:00 #rust-dev-tools <Manishearth> killercup: sweet
2018-01-16T11:32:15 #rust-dev-tools <Manishearth> no rush, I'm not opening the erfc for at least a week, probs more
2018-01-16T11:39:29 #rust-dev-tools <Rantanen> Manishearth: It might go beyond the current eRFC, but one thing that I'm a bit concerned on is testing proc_macros. They share the problems with things like compiletest - but for assert_eq!( source, target ) they'd also need rustc with --pretty=expanded.
2018-01-16T11:40:36 #rust-dev-tools <Rantanen> Although now that I wrote that, I just realized that pulling all the logic from the actual proc_macro crate into mymacro-internal crate, which is a normal crate that can be tested with normal tests and only wrapping that in an actual proc-macro = yes crate would probably solve that issue.
2018-01-16T11:40:55 #rust-dev-tools <Rantanen> But having to do that for testing purposes is a bit of a downer.
2018-01-16T11:41:41 #rust-dev-tools <Manishearth> Rantanen: hmm yeah
2018-01-16T12:14:03 #rust-dev-tools <Rantanen> The proc macro based test runners sound powerful. They should allow a lot of things, such as xUnit-styled #[setup]s or even catch.cpp -styled "section! { ... }" -usage to be turned into runnable tests. Now I actually want to attempt that last one if the RFC lands... :)
2018-01-16T12:17:04 #rust-dev-tools <Rantanen> On the other hand, they feel a bit inflexible for defining dynamic test cases on their own. Test cases such as the "for f in test_data_files { do_test(f) }".
2018-01-16T12:19:55 #rust-dev-tools <Rantanen> But I do feel it kind of provides solution for that as well:
2018-01-16T12:20:13 #rust-dev-tools <Rantanen> 1. You can define a "no-op" test runner, which doesn't alter the code in any way so you can define your own main() and have that resolve the dynamic tests at runtime.
2018-01-16T12:20:47 #rust-dev-tools <Rantanen> 2. Standardized test output so the test binary of your own can emit tests results in a format that's "compatible" with any other test runner.
2018-01-16T12:32:11 #rust-dev-tools <Manishearth> Rantanen: why is it inflexible for that? you literally can generate that
2018-01-16T12:33:12 #rust-dev-tools <Rantanen> Manishearth: Yeah, I'm not saying it can't be used for it. But often the "for f in test_data_files { ... }" is rather crate-specific. I wouldn't want to make and maintain a separate test driver just for my crate.
2018-01-16T12:33:40 #rust-dev-tools <Rantanen> Then again, I guess some #[test_each_file(../path/to/test/data)] fn for_file( p : &Path ) { .. } could work for it.
2018-01-16T12:38:09 #rust-dev-tools <Rantanen> Manishearth: While you _can_ build the dynamic testing solution on top of the proc macros alone, I'd imagine for those highly dynamic cases such as rustfmt, etc. you might just end up going for a "no-op" runner to get your own fn main() to run instead of relying on attributes, etc. At that point the output formatting becomes more important issue.
2018-01-16T12:44:09 #rust-dev-tools <Manishearth> Rantanen: you'd then write a test harness that takes in a special file of code with that
2018-01-16T12:44:50 #rust-dev-tools <Rantanen> Manishearth: 'a special file of code'?
2018-01-16T12:46:46 #rust-dev-tools <Manishearth> Rantanen: basically what you proposed
2018-01-16T12:48:48 #rust-dev-tools <Rantanen> Manishearth: Yeah, I'm not saying the proc macro approach is bad. I just feel there's two rather different test scenarios here - the proc macros solve one of them perfectly while allowing the other one to be solved, even if that other one doesn't really benefit from the proc macros all that much. :)
2018-01-16T12:49:44 #rust-dev-tools <Rantanen> Specifically the proc macros would be great for defining "test languages", ie. #[test] attributes, section! { .. } macros, parsing describe(..) { .. } etc. grammar and so on.
2018-01-16T12:51:18 #rust-dev-tools <Rantanen> On the other hand there are the highly custom crate-specific test requirements, which boil down to "I've got this test program that checks various things and I want to make sure it executes correctly" -scenario, which is solved by being able to run _any_ Rust binary through 'cargo test'. Producing such binary can be done (assuming that erfc) by defining a no-op test harness.
2018-01-16T12:52:53 #rust-dev-tools <Rantanen> But for that last one to feel consistent with the rest of the tests, it would help if the output was standardized in some way - which was listed as to be determined in the erfc, so I'm happy it does mention it as an open issue. :)
2018-01-16T12:54:57 #rust-dev-tools <Manishearth> Rantanen: I still don't see what you're getting at
2018-01-16T12:55:26 #rust-dev-tools <Manishearth> I don't see why this needs a stable output format
2018-01-16T12:55:47 #rust-dev-tools <Manishearth> like, what you're describing is examples/
2018-01-16T12:57:35 #rust-dev-tools <killercup> Manishearth: reading the log i think Rantanen means defining dynamic test cases?
2018-01-16T12:57:36 #rust-dev-tools <Rantanen> Manishearth: https://github.com/rust-lang-nursery/rustfmt/blob/master/tests/system.rs#L117-L126 - this is very similar to the rustfix pr killercup mentioned.
2018-01-16T12:57:59 #rust-dev-tools <Rantanen> "Get all files, run tests for them, assert everything succeeded" - currently that produces a single "system_tests ok/fail" result.
2018-01-16T12:58:08 #rust-dev-tools <Manishearth> oh, that
2018-01-16T12:58:18 #rust-dev-tools <Rantanen> However from end user/IDE/etc. perspective, it would be way more useful for that to produce "ok/fail" for each individual file tested.
2018-01-16T12:58:29 #rust-dev-tools <Manishearth> well yeah, that's what I mentioned initially, you could write a proc macro library that has a hook in it
2018-01-16T12:58:43 #rust-dev-tools <Manishearth> write a runner.rs file somewhere which the proc macro picks up and uses
2018-01-16T12:59:47 #rust-dev-tools <killercup> Rantanen: you want to have something like `#[test] fn foo(r: TestRegistry) { for file in glob("fixtures/") { r.start_test(f.filename()); ... r.end_test(f.filename(), status); } }` right?
2018-01-16T13:00:16 #rust-dev-tools <Rantanen> Manishearth: Yeah, and I agreed that technically works - but on the other hand writing and maintaining a proc macro is non-trivial excercise, so I wouldn't be surprised if people just wanted to omit that and instead just run their own main(), which is also something that the erfc allows. :)
2018-01-16T13:01:00 #rust-dev-tools <Manishearth> Rantanen: no that's what I mean
2018-01-16T13:01:12 #rust-dev-tools <Manishearth> Rantanen: you write a proc macro that lets you hook in a dynamic runner
2018-01-16T13:01:16 #rust-dev-tools <Rantanen> killercup: Yes, that would work, although the #[test] + r: TestRegistry parameter makes it a bit confusing.
2018-01-16T13:01:17 #rust-dev-tools <Manishearth> and everyone can use the same thing
2018-01-16T13:01:32 #rust-dev-tools <Manishearth> like, all of this can be built on top of the generic framework
2018-01-16T13:02:27 #rust-dev-tools <Rantanen> Manishearth: Ah, true. Yes.
2018-01-16T13:02:57 #rust-dev-tools <Rantanen> I never considered exposing the registry through the attributed methods.
2018-01-16T13:03:16 #rust-dev-tools <killercup> Rantanen: fyi this example was just meant as: #[test] is now a proc-macro-style test runner and if you give it a fn that takes a TestRegistry param you can access it
2018-01-16T13:03:55 #rust-dev-tools <Rantanen> killercup: Yeah, kind of figured it, still a bit confusing choice of attribute name though. :)
2018-01-16T13:05:03 #rust-dev-tools <killercup> Rantanen: ah okay, feel free to read it as #[fancy_test_thing] then :)
2018-01-16T13:05:24 #rust-dev-tools <killercup> i actually do want to think about making built-in #[test] more flexible tho (in the long run)
2018-01-16T13:05:37 #rust-dev-tools <Rantanen> killercup: Wait, #[test] itself is the test runner? I might need to read the erfc again - I thought the test runner was applied to the whole crate, not a single attribute?
2018-01-16T13:06:09 #rust-dev-tools <Rantanen> ie, the test harness (is that different from test runner?) was fed the tokenstream of the whole crate.
2018-01-16T13:06:27 #rust-dev-tools <Rantanen> (Especially considering the tests/* scenario)
2018-01-16T13:06:36 #rust-dev-tools <killercup> Rantanen: if i understand Manishearth's text correctly, #[test] is something like the #[my_test] in his example
2018-01-16T13:07:51 #rust-dev-tools <Rantanen> killercup: "A test framework is essentially a whole-crate proc macro. -- generate a main() -- replacing the existing main() if it exists"
2018-01-16T13:08:19 #rust-dev-tools <Rantanen> Although the terminology gets to me at this point. Are test framework, test harness and test runner used interchangeably in this conversation? ;_;
2018-01-16T13:08:40 #rust-dev-tools <killercup> Rantanen: a sorry, my wording earlier was bad, i meant " #[test] is now [part of what] a proc-macro-style test runner [gives you]"
2018-01-16T13:09:13 #rust-dev-tools <Rantanen> Ah, yes. That difference is what caught my eye.
2018-01-16T13:11:45 #rust-dev-tools <killercup> sorry for my drive-by irc commenting i should really take some time to write some of this down in a coherent way
2018-01-16T13:13:34 #rust-dev-tools <Rantanen> So yes. Once there is a test harness capable of registering-tests-at-runtime, that would seriously limit the need for every crate to come up with their own dynamic testing solution which would then reduce the need to standardize the test output.
2018-01-16T13:16:18 #rust-dev-tools <Rantanen> killercup: Also no reason to be sorry. I believe I'm the guilty one for dragging this on, despite you people seemingly having it all under control anyway. :|
2018-01-16T13:16:57 #rust-dev-tools <Rantanen> So I'll just flee and leave you to it. :)
2018-01-16T13:17:17 #rust-dev-tools <killercup> Rantanen: one last thing: i imagine there will be a bunch of rfcs for this! erfc to get going, test harness proc-macro rfc, test registry api, test output, stabilizations…
2018-01-16T13:20:47 #rust-dev-tools <Manishearth> Rantanen: yes, there is a bit of a terminology issue here
2018-01-16T13:20:54 #rust-dev-tools <Manishearth> there is the test framework, which is the thing generating stuff
2018-01-16T13:21:06 #rust-dev-tools <Manishearth> and the test harness, which is basically the main() function you generate 
2018-01-16T13:21:46 #rust-dev-tools <Manishearth> Rantanen: by runtime do you actually mean compile time here?
2018-01-16T13:21:54 #rust-dev-tools <Manishearth> i.e. build time?
2018-01-16T13:22:03 #rust-dev-tools <Manishearth> because the test framework runs at "build time"
2018-01-16T13:22:09 #rust-dev-tools <Manishearth> this might have been the confusion earlier
2018-01-16T13:22:35 #rust-dev-tools <Manishearth> but either way, dynamically collecting tests can still be done here
2018-01-16T13:22:37 #rust-dev-tools <killercup> Manishearth: i'm fairly certain they mean when-test-is-executing time :D
2018-01-16T13:23:16 #rust-dev-tools <Rantanen> Manishearth: Runtime as in, the test binary runtime. If it's reading data from the disk, it should do so for up to date sources - and unless it can emit cargo dependencies for getting the test binary recompiled when those things change, then it should look up the dynamic test cases at actual runtime, not at compile time when the proc-macro bits run.
2018-01-16T13:23:37 #rust-dev-tools <Manishearth> Rantanen: okay
2018-01-16T13:23:52 #rust-dev-tools <Manishearth> Rantanen: that's not affected by this; you can write a helper library that makes this easy
2018-01-16T13:26:33 #rust-dev-tools <Rantanen> Manishearth: Yeah, the proposition killercup brought up that you can expose the test harness test registry to the actual test code so it can add the dynamic tests there made things click in my head.
2018-01-16T13:27:25 #rust-dev-tools <Manishearth> yep
2018-01-16T13:27:35 #rust-dev-tools <Manishearth> well, you'd define your own registry type thing
2018-01-16T13:27:49 #rust-dev-tools <Manishearth> my proposal has no registry
2018-01-16T13:28:00 #rust-dev-tools <Rantanen> Rawr. Ambiguous "you" :)
2018-01-16T13:28:05 #rust-dev-tools <Manishearth> but yeah you'd have some thing you push closures to
2018-01-16T13:28:07 #rust-dev-tools <Manishearth> heh
2018-01-16T13:28:30 #rust-dev-tools <Rantanen> Yes, "you" the test harness developer would define one while "you" the test writer would use the one the harness provides. :)
2018-01-16T13:30:01 #rust-dev-tools <Rantanen> Essentially a harness could be implemented in such a way that it parses the #[test] functions into a registry at compile time and then at runtime it allows the test code to add its own closures into the registry before executing everything.
2018-01-16T13:31:44 #rust-dev-tools <killercup> Rantanen: yeah, that's wha i suggested in the last dev tools meeting as well. the test framework generates a main() that passes a bunch of test functions to the harness, as seed values basically
2018-01-16T22:34:47 #rust-dev-tools <jonhoo> nrc: how's writing up the meeting notes for the testing meeting going? it'd probably be useful to be able to refer back to them given the pace of the discussion
2018-01-16T22:35:00 #rust-dev-tools <jonhoo> though I realize you have a lot to do :)
2018-01-17T00:32:47 #rust-dev-tools <jonhoo> also, looks like the logs are still empty :/
2018-01-17T00:32:47 #rust-dev-tools <jonhoo> https://mozilla.logbot.info/rust-dev-tools/20180117
2018-01-17T00:33:00 #rust-dev-tools <jonhoo> it does correctly say "Last Message: 2 hours ago (16 Jan 2018)" though
2018-01-17T00:33:03 #rust-dev-tools <jonhoo> so something is weird
2018-01-17T00:33:38 #rust-dev-tools <sfackler> jonhoo: I see those messages you just sent in the logs
2018-01-17T00:33:38 #rust-dev-tools <jonhoo> (I'm heading off, so probably won't then see your response nrc)
2018-01-17T00:33:47 #rust-dev-tools <jonhoo> huh, weird
2018-01-17T00:33:52 #rust-dev-tools <jonhoo> the page has no messages for me
2018-01-17T00:34:09 #rust-dev-tools <jonhoo> ohh, I get them in chrome, but not ffx
2018-01-17T00:34:21 #rust-dev-tools <jonhoo> ah, script blocker
2018-01-17T00:34:22 #rust-dev-tools <jonhoo> works now
2018-01-17T00:34:24 #rust-dev-tools <jonhoo> so nvm
2018-01-17T01:03:21 #rust-dev-tools <aturon> jonhoo: just FYI, nrc is working part time (paternity leave) and is not around today
2018-01-17T01:04:02 #rust-dev-tools <jonhoo> ah, i didn't know, thanks!
2018-01-17T02:35:27 #rust-dev-tools <jonhoo> oh, looks like he pushed the meeting notes anyway! thanks nrc :)
2018-01-17T02:35:36 #rust-dev-tools <jonhoo> i posted a link to them in the internals thread too
2018-01-17T10:19:05 #rust-dev-tools <eddyb> jntrnr: is there no VS Code extension that does class/type trees?
2018-01-17T10:30:17 #rust-dev-tools <killercup> eddyb: there is a code outline extension that does something like this
2018-01-17T10:55:06 #rust-dev-tools <eddyb> killercup: thanks!
2018-01-17T10:55:33 #rust-dev-tools <eddyb> killercup: it doesn't have categories, which is funny (because you get all the methods, type parameters, maybe even random variables all over the place - or just fields), but otherwise works great :D
2018-01-17T10:55:39 #rust-dev-tools <eddyb> (if you enable sorting)
2018-01-17T10:56:31 #rust-dev-tools <killercup> eddyb: haha, good to know, i've never really used it :D maybe send a pr? it does have icons for the categories so i guess it's now hard to filter them
2018-01-17T11:18:37 #rust-dev-tools <Manishearth> killercup: ooo nice doc
2018-01-17T11:18:48 #rust-dev-tools <Manishearth> killercup: IMO compiletest can be shipped as a nursery crate
2018-01-17T11:19:19 #rust-dev-tools <Manishearth> the main issues with maintaining compiletest-rs out of tree is that compiletest-rs needs to emulate cargo which is fine in the controlled environment of rust's suite but not generally
2018-01-17T11:19:28 #rust-dev-tools <Manishearth> with custom test, this will be solved
2018-01-17T11:49:49 #rust-dev-tools <killercup> Manishearth: yeah compiletest as nursery crate and test case for custom testing framework (we need an abbr for that) is a pretty good plan
2018-01-17T12:10:13 #rust-dev-tools <killercup> Manishearth: wrote super confusing reply on internals
2018-01-17T12:10:20 #rust-dev-tools <killercup> i'll meditate a bit more about this over lunch
2018-01-17T12:11:13 #rust-dev-tools <Manishearth> killercup: heh
2018-01-17T12:13:06 #rust-dev-tools <eijebong> killercup: CTF, ez pz, not confusing at all
2018-01-17T12:28:07 #rust-dev-tools <Rantanen> I haven't followed all of the discussion around the test runners, so first of all. If this is rehashing old ideas, just tell me so. Don't want to waste people's time with this.
2018-01-17T12:30:03 #rust-dev-tools <Rantanen> With that out of the way... wouldn't the "test framework as a crate-level-macro" approach (for tests under tests/..) somewhat experimentable with two rather small changes: Support #![..] proc macros and allow cargo to run any rust executable as a test.
2018-01-17T12:30:21 #rust-dev-tools <Manishearth> Rantanen: "somewhat experimentable"?
2018-01-17T12:30:28 #rust-dev-tools <Manishearth> oh, being able to experiment on that now
2018-01-17T12:30:33 #rust-dev-tools <Rantanen> Yeah
2018-01-17T12:30:33 #rust-dev-tools <Manishearth> I believe #! proc macros already work
2018-01-17T12:30:44 #rust-dev-tools <Rantanen> The #![..] proc macro attributes technically exist currently but they don't work well.
2018-01-17T12:31:59 #rust-dev-tools <Rantanen> If those did work, then the "how to make a test runner" wouldn't really need a new test runner attribute handling as it could just be implemented as a #![quickcheck_tests] crate-level attribute - if my understanding is correct here.
2018-01-17T12:32:13 #rust-dev-tools <Rantanen> It still leaves the "how to recognize which .rs file is a test crate" question open though.
2018-01-17T12:33:01 #rust-dev-tools <Rantanen> But the "parse the whole file as input to proc macro -like transform" would already be somewhat doable, if the #![..] crate-level attribute worked.
2018-01-17T12:33:38 #rust-dev-tools <Rantanen> (That does depend on various other unstable things, such as the new mod-syntax that allows skipping extern crate)
2018-01-17T12:34:32 #rust-dev-tools <Rantanen> Manishearth: I've never got those working. They do execute, but the output they produce is tricky. It _could_ be that it's just a callsite/defsite issue in my tests.
2018-01-17T12:35:03 #rust-dev-tools <Rantanen> I'll experiment and see if I can get them working now that I understand those issues a bit better.
2018-01-17T12:36:39 #rust-dev-tools <Manishearth> Rantanen: right, as I said before the core functionality really is the cargo integration
2018-01-17T12:39:39 #rust-dev-tools <Rantanen> Yeah. I agree there. I guess the order the proc macro/helper crate/cargo integration were introduced in the eRFC made me believe the actual test runner authoring had higher priority.
2018-01-17T12:41:23 #rust-dev-tools <Rantanen> But yes, I agree with the cargo integration being the most important part. Even if test runners/etc. can be implemented in a clean way, without the cargo integration they will feel like outsiders.
2018-01-17T12:44:57 #rust-dev-tools <Rantanen> And as I remembered, having a proc_macro_attribute that does nothing but "fn(_:TokenStream, input:TokenStream) -> TokenStream { input }" does break the test runner.
2018-01-17T12:55:10 #rust-dev-tools <Manishearth> Rantanen: i think folks care about the actual test runner authoring more so i put it first :)
2018-01-17T13:03:38 #rust-dev-tools <Rantanen> Yeah, that does make sense. I mean.. I was more interested in that as well. But now that I realized that proc macros can almost get us there already, the cargo integration does become the bigger issue. :)
2018-01-17T13:22:18 #rust-dev-tools <killercup> Manishearth: let me reply to the output stuff here instead of spamming the internals thread. i just proposed a json docs stream because it's trivial to consume and we have the pr for that (using the current test stuff) open already
2018-01-17T13:23:05 #rust-dev-tools <killercup> fuzzers and quickcheck could easily produce that as well by just wrapping chucks of output in a {type: "test", event: "progress", output: "$stuff"} message
2018-01-17T13:25:49 #rust-dev-tools <killercup> this is a good starting point imho because we could later on parse the output (fuzzer)/write other output and expand these events to either be test cases themselves or carry a sub-document like the data field { type: "test", event: "progress", data: { type: "quickcheck", event: "counterexampleFound", inpout: … } }
2018-01-17T13:25:50 #rust-dev-tools <Manishearth> killercup: no, that's the point, cargo-fuzz has libfuzzer's output
2018-01-17T13:25:53 #rust-dev-tools <Manishearth> you can't wrap that
2018-01-17T13:26:03 #rust-dev-tools <Manishearth> killercup: and then what do you do with benches and stuff?
2018-01-17T13:26:28 #rust-dev-tools <Manishearth> killercup: I'd rather not force everyone to use a stabilized json output and instead provide output formatting as a library that folks can choose to use
2018-01-17T13:26:34 #rust-dev-tools <killercup> Manishearth: 1) start libfuzzer in process 2) capture its output 3) write json doc as above
2018-01-17T13:26:50 #rust-dev-tools <Manishearth> killercup: now you need to compile two binaries, and we're back to where we started
2018-01-17T13:27:12 #rust-dev-tools <killercup> Manishearth: i'm totally fine with the output library option!
2018-01-17T13:27:44 #rust-dev-tools <Manishearth> killercup: cool
2018-01-17T13:28:20 #rust-dev-tools <Manishearth> killercup: so, to be clear, cargo test does zero parsing of the output
2018-01-17T13:28:44 #rust-dev-tools <Manishearth> killercup: however you can use a library that lets you do something like TestDesc::new("foobar", "pass").emit()
2018-01-17T13:29:08 #rust-dev-tools <Manishearth> killercup: in that case having structs for that format sound good. if you write up a rough proposal for the library API I'll add it to the erfc
2018-01-17T13:29:47 #rust-dev-tools <killercup> sounds good
2018-01-17T13:30:36 #rust-dev-tools <killercup> i'll also think a bit about how an api for custom output formats might look
2018-01-17T13:30:48 #rust-dev-tools <killercup> damn, i don't have any time for this but i want to :D
2018-01-17T13:31:00 #rust-dev-tools <Manishearth> heh
2018-01-17T15:13:49 #rust-dev-tools <steveklabnik> xanewok: ping :)
2018-01-17T15:17:11 #rust-dev-tools <xanewok> steveklabnik: pong!
2018-01-17T15:22:42 #rust-dev-tools <steveklabnik> so!
2018-01-17T15:22:45 #rust-dev-tools <steveklabnik> that api you were talking about
2018-01-17T15:22:50 #rust-dev-tools <steveklabnik> i don't see how to actually get one of those
2018-01-17T15:23:39 #rust-dev-tools <xanewok> as I recall, the Relations were done for the 'find impls of this trait' functionality
2018-01-17T15:23:52 #rust-dev-tools <xanewok> so this might only work for workspace-local trait impls (so possibly no std ones etc.)
2018-01-17T15:24:01 #rust-dev-tools <xanewok> let me take a look
2018-01-17T15:29:09 #rust-dev-tools <xanewok> yeah, I believe we have the raw data in rls-data
2018-01-17T15:29:49 #rust-dev-tools <xanewok> but rls-analysis only processes that into id -> spans of impls to be used by pub fn find_impls(id: Id)
2018-01-17T15:30:45 #rust-dev-tools <steveklabnik> interesting
2018-01-17T15:30:53 #rust-dev-tools <xanewok> the lowering is done in read_impls
2018-01-17T15:31:23 #rust-dev-tools <steveklabnik> what about inherent struct methods, and the actual methods of a trait?
2018-01-17T15:32:30 #rust-dev-tools <xanewok> iirc impl MyStruct is stored the same way as impl MyTrait in the raw data
2018-01-17T15:33:14 #rust-dev-tools <xanewok> and my guess is that a Trait, under a certain Id, has children Ids that point to functions' Ids (along with their spans etc.)
2018-01-17T15:34:14 #rust-dev-tools <steveklabnik> interesting
2018-01-17T15:34:30 #rust-dev-tools <xanewok> one obvious improvement would be to lower the actual relation information in rls-analysis, not limit ourselves only to -> span info
2018-01-17T15:36:29 #rust-dev-tools <xanewok> and if trait indeed holds member functions Ids, we can then fetch their docs and the rest using for_each_child_def (but that's only assuming that what I said about trait ids and their children member ids is true)
2018-01-17T15:37:13 #rust-dev-tools <steveklabnik> it's so tough to get into this stuff when i have zero context; i have to like, learn the compiler as well as all the stuff in the rls, heh
2018-01-17T15:37:28 #rust-dev-tools <steveklabnik> rls-analysis doesn't currently give you children
2018-01-17T15:37:32 #rust-dev-tools <steveklabnik> only an Option<parent>
2018-01-17T15:37:33 #rust-dev-tools <xanewok> steveklabnik: Do you have any particular issue you're working towards or did you want to gain better insight?
2018-01-17T15:37:49 #rust-dev-tools <steveklabnik> what i put in the intenrals thread is my particular issue
2018-01-17T15:38:09 #rust-dev-tools <steveklabnik> that is
2018-01-17T15:38:27 #rust-dev-tools <steveklabnik> just getting the singatures and doc strings of the methods of a trait or struct
2018-01-17T15:38:35 #rust-dev-tools <xanewok> to get something more than name and a doc string for a struct? :D
2018-01-17T15:38:49 #rust-dev-tools <xanewok> yeah, ok
2018-01-17T15:47:33 #rust-dev-tools <xanewok> what's exactly dumped by the compiler is in the librustc_save_analysis, so you might also take a look what data exactly will be in the raw rls-data format
2018-01-17T15:48:07 #rust-dev-tools <xanewok> but I recently only dabbled with crate ids and disambiguators there, will need to grasp how exactly trait data is emitted
2018-01-17T15:50:29 #rust-dev-tools <steveklabnik> :)
2018-01-17T15:50:38 #rust-dev-tools <steveklabnik> i gotta run, but ill probably be pinging you for more as i read stuff
2018-01-17T15:50:41 #rust-dev-tools <steveklabnik> thanks :)
2018-01-17T15:51:22 #rust-dev-tools <xanewok> sure, I'll be also more available later as well!
2018-01-17T18:23:58 #rust-dev-tools <algesten> @xanewok i rebase that PR later today and resolve the conflicts. we're waiting for nrc being in the heat down under right?
2018-01-17T18:30:53 #rust-dev-tools <xanewok> algesten: It’d be good for him to review it also, since we’ve been using these messages forever
2018-01-17T18:31:31 #rust-dev-tools <algesten> @xanewok yes. I agree.
2018-01-17T18:31:39 #rust-dev-tools <xanewok> But don’t hurry, we also need to fix compilation and there’s one urgent fix that needs to land also regarding Initialized message parsing
2018-01-17T18:31:58 #rust-dev-tools <xanewok> so I’d prefer to do that first and ensure everything is working as expected
2018-01-17T18:40:11 #rust-dev-tools <algesten> @xanewok i was wondering what to look at next. any ideas?
2018-01-17T18:40:56 #rust-dev-tools <xanewok> eager to work, I like that! :)
2018-01-17T18:40:59 #rust-dev-tools <xanewok> let me think of something
2018-01-17T18:41:52 #rust-dev-tools <algesten> haha! I want my vscode to work. and work well with rust. right now it's not quite there :)
2018-01-17T18:41:57 #rust-dev-tools <algesten> so I so what I can!
2018-01-17T18:42:37 #rust-dev-tools <algesten> *do
2018-01-17T18:42:52 #rust-dev-tools <xanewok> yeah, highly appreciated!
2018-01-17T18:44:48 #rust-dev-tools <xanewok> so at a glance it seems there's more projects that require deeper insight or that cover integration with other tools/packages
2018-01-17T18:45:26 #rust-dev-tools <xanewok> there's one thing that I had in mind recently, that we show only primary message on hover for compiler diagnostics
2018-01-17T18:45:59 #rust-dev-tools <xanewok> while more principled fix is on the way, I was thinking of at least making an exception for 'mismatched types' error and merge the secondary info (which type is expected, which type is given) with the primary one
2018-01-17T18:46:55 #rust-dev-tools <xanewok> and/or to explore merging more secondary diagnostics info and see if we can do it for every one and if not, what errors could benefit the most from merging the primary+secondary info to be displayed for the user
2018-01-17T18:47:07 #rust-dev-tools <xanewok> does that sound like something you might be interested in?
2018-01-17T18:47:22 #rust-dev-tools <xanewok> there's also an umbrella 1.0 milestone: https://github.com/rust-lang-nursery/rls/milestone/7
2018-01-17T18:47:58 #rust-dev-tools <xanewok> so working towards them would definitely speed up the 1.0 release and make the RLS experience more reliable!
2018-01-17T19:19:58 #rust-dev-tools <algesten> @xanewok sounds good! I'll need to get my head around what you mean with primary and secondary diagnostics. but I think I get what you're talking about. is there an issue on github?
2018-01-17T19:22:05 #rust-dev-tools <xanewok> algesten: not really, as this most mostly floating around as an idea of mine, but I'll create an issue in a second
2018-01-17T19:22:40 #rust-dev-tools <algesten> cool! i do the rebase of my current PR now.
2018-01-17T19:23:11 #rust-dev-tools <xanewok> currently compiler emits errors that can be complex - in addition to a single message and a span in code, it can also contain additional data, like 'consider adding mut here' or 'expected Result<usize, ()>, found usize) (or similar)
2018-01-17T19:23:19 #rust-dev-tools <xanewok> great, thanks!
2018-01-17T19:59:22 #rust-dev-tools <algesten> xanewok: either i'm drunk or stupid. probably both. where dafuq did PublishDiagnostics go?
2018-01-17T20:01:54 #rust-dev-tools <xanewok> algesten: the new issue I mentioned is #662
2018-01-17T20:02:22 #rust-dev-tools <xanewok> re PublishDiagnostics: merged #644 uses traits introduced in languageserver-types, instead of rolling our own `Action`
2018-01-17T20:02:45 #rust-dev-tools <algesten> swweet. thanks!
2018-01-17T20:02:57 #rust-dev-tools <xanewok> so currently the trait itself is here: https://github.com/gluon-lang/languageserver-types/blob/master/src/notification.rs#L201-L207
2018-01-17T20:03:04 #rust-dev-tools <algesten> oooooh...
2018-01-17T20:03:19 #rust-dev-tools <algesten> it comes from ls_types.... got it!
2018-01-17T20:03:43 #rust-dev-tools <xanewok> Yup!
2018-01-17T20:04:00 #rust-dev-tools <xanewok> However DiagnosticsBegin and friends are still happy over at lsp_data.rs
2018-01-17T20:04:59 #rust-dev-tools <algesten> yes
2018-01-17T20:05:20 #rust-dev-tools <algesten> i'm trying to merge my riddance of them with this removal of publishdiagnostics.
2018-01-17T20:23:01 #rust-dev-tools <algesten> xanewok: that rebase is done. a bit of a bitch with clashing changes. hopefully it lands before it happens again :)
2018-01-17T21:50:48 #rust-dev-tools <jonhoo> i wish cargo had a flag like --ci which automatically populate all the config needed for Travis+AppVeyor+coverage
2018-01-17T21:51:03 #rust-dev-tools <jonhoo> currently i just keep copying over files from existing projects for that
2018-01-17T21:51:31 #rust-dev-tools <jonhoo> and maybe --recommended which would add extra sections like categories and keywords + #![deny(missing_docs)]
2018-01-17T21:51:47 #rust-dev-tools <jonhoo> + add [badges] to Cargo.toml and to the readme
2018-01-17T21:51:50 #rust-dev-tools <xanewok> just like cargo new creates a git repo? 😉
2018-01-17T21:52:23 #rust-dev-tools <jonhoo> and if only it could send e-mail, right? :p
2018-01-18T00:46:35 #rust-dev-tools <WindowsBunny> I'd also like a flag for cargo to read my mind and write my entire crate for me
2018-01-18T11:43:02 #rust-dev-tools <killercup> Manishearth: i hate that you seem to have at least 12 more hours per day to work on rust stuff than i have :P
2018-01-18T11:44:09 #rust-dev-tools <Manishearth> killercup: more like "I'm supposed to work on this servo thing and I'm not making headway so I'm jumping into fun rust stuff
2018-01-18T11:44:22 #rust-dev-tools <killercup> " :D
2018-01-18T11:44:42 #rust-dev-tools <killercup> yeah, i do that too
2018-01-18T11:45:44 #rust-dev-tools <Manishearth> killercup: anyway, once I add this, please use span_approximate_suggestion for all the broken rustc ones
2018-01-18T11:47:18 #rust-dev-tools <killercup> sounds good
2018-01-18T11:51:02 #rust-dev-tools <Manishearth> killercup: https://github.com/rust-lang/rust/pull/47540
2018-01-18T11:53:46 #rust-dev-tools <killercup> btw i'd really like to convert these monster fns like span_lint_and_sugg to something like USELESS_VEC::trigger(span).msg("optional because maybe use default message").add(Suggestion::for_span(span).suggest("[42]").help("it's the right answer")).draw(context)
2018-01-18T11:56:28 #rust-dev-tools * killercup is now using ./x.py build to reheat his lunch
2018-01-18T11:56:32 #rust-dev-tools <Manishearth> killercup: oo hm
2018-01-18T11:56:56 #rust-dev-tools <Manishearth> killercup: I like this idea, draw up an rfc doc?
2018-01-18T11:57:08 #rust-dev-tools <Manishearth> doesn't have to be an actual rfc, the consumers of that api are rustc and clippy
2018-01-18T11:58:01 #rust-dev-tools <killercup> that fn is actually in clippy, isn't it?
2018-01-18T11:58:21 #rust-dev-tools <Manishearth> killercup: what fn?
2018-01-18T11:58:24 #rust-dev-tools <Manishearth> killercup: oh, no
2018-01-18T11:58:27 #rust-dev-tools <Manishearth> killercup: we have other stuff
2018-01-18T11:58:27 #rust-dev-tools <killercup> so i might experiment there, i haven really done enough to know if it's even a useful thing
2018-01-18T11:58:36 #rust-dev-tools <Manishearth> killercup: but yes feel free to experiment in clippy
2018-01-18T11:59:01 #rust-dev-tools <killercup> i feel a huge "refactor all the apis around spans" yak shave coming
2018-01-18T12:00:33 #rust-dev-tools <killercup> i'll try to write some ideas down tonight and see how much stuff i'd need to touch to make this nice
2018-01-18T12:02:22 #rust-dev-tools <Manishearth> sweet
2018-01-18T12:02:24 #rust-dev-tools <Manishearth> sounds like a plan
2018-01-18T12:02:43 #rust-dev-tools <Manishearth> once we get clippy's suggestions all correctly labeled I can't wait to run clippy + rustfix on servo
2018-01-18T12:03:01 #rust-dev-tools <Manishearth> killercup: though: if you want to stress test rustfix, servo is a really good repo for that. it's found bugs before
2018-01-18T12:03:09 #rust-dev-tools <killercup> ohh this will be awesome
2018-01-18T12:03:17 #rust-dev-tools <Manishearth> and as a bonus you get to make commits fixing everything
2018-01-18T12:03:32 #rust-dev-tools <killercup> 1. rustfix servo
2018-01-18T12:03:59 #rust-dev-tools <killercup> 2. crawl crates.io, rustfix the repos
2018-01-18T12:04:00 #rust-dev-tools <killercup> 3. ???
2018-01-18T12:04:01 #rust-dev-tools <killercup> 4. PROFIT
2018-01-18T12:04:22 #rust-dev-tools <Manishearth> killercup: ideally; if you plan to actually upstream the fixes to servo, do it crate-by-crate (start with utils, then go to gfx and layout)
2018-01-18T12:04:26 #rust-dev-tools <Manishearth> AND
2018-01-18T12:04:51 #rust-dev-tools <Manishearth> run clippy once, look at the output, and then pick out really noisy lints and rustfix them individually, so that you get nice commits
2018-01-18T12:05:31 #rust-dev-tools <Manishearth> killercup: i believe rustfix is mature enough that this should be doable right now. most clippy suggestions are automatic except in edge cases (macros basically) so it should work
2018-01-18T12:05:58 #rust-dev-tools <Manishearth> servo doesn't clippy because if you run clippy on servo you get a million warnings
2018-01-18T12:06:06 #rust-dev-tools <killercup> rustfix still messes up some whitespace stuff, i fear this will get annoying pretty soon
2018-01-18T12:06:10 #rust-dev-tools <Manishearth> and it's going to take forever to fix. until rustfix
2018-01-18T12:06:25 #rust-dev-tools <Manishearth> killercup: that's fine, this will help you find those, and you can fix them in any PR you upstream
2018-01-18T12:06:41 #rust-dev-tools <Manishearth> you can also just hand the PR over to me and I'll fixup. just make sure each lint is fixed in a separate commit
2018-01-18T12:07:37 #rust-dev-tools <killercup> that's a pretty good plan
2018-01-18T12:08:01 #rust-dev-tools <killercup> one that probably needs more than a weekend's time tho
2018-01-18T12:08:32 #rust-dev-tools <Manishearth> heh
2018-01-18T12:08:33 #rust-dev-tools <killercup> ha, also, let me make this with a new github account before annoying all the reviwers :P
2018-01-18T12:10:08 #rust-dev-tools * killercup has now entered the "let's make a cute avatar for rustfix-bot's github account" stage of the bikeshed
2018-01-18T12:10:32 #rust-dev-tools <killercup> s/bikeshed/yakshave
2018-01-18T12:10:38 #rust-dev-tools <killercup> i need more coffee
2018-01-18T18:00:24 #rust-dev-tools <phansch> does anyone know what the 'lo' and 'hi' in syntax::codemap::Span stand for? I'm guessing location and highlight, but it doesn't seem to be documented anywhere.
2018-01-18T18:29:00 #rust-dev-tools <nrc> phansch: they're the start and end locations of the span
2018-01-18T20:57:02 #rust-dev-tools <nrc> triage meeting here in 5 mins!
2018-01-18T20:57:36 #rust-dev-tools <steveklabnik> :D
2018-01-18T20:57:44 #rust-dev-tools <killercup> wow! LOcation and HIighlight are so fitting! (it's 'low' and 'high' afaict)
2018-01-18T21:00:41 #rust-dev-tools <killercup> o/
2018-01-18T21:00:51 #rust-dev-tools <japaric> o/
2018-01-18T21:00:52 #rust-dev-tools <mw> o/
2018-01-18T21:01:10 #rust-dev-tools <oli_obk_> o/
2018-01-18T21:02:06 #rust-dev-tools <steveklabnik> o/
2018-01-18T21:03:56 #rust-dev-tools <nrc> hi all !
2018-01-18T21:04:18 #rust-dev-tools <nrc> no issues, but a few PRs
2018-01-18T21:04:31 #rust-dev-tools <nrc> https://github.com/rust-lang/rust/pull/46501
2018-01-18T21:04:58 #rust-dev-tools <nrc> Stabilize allow_fail flag test feature
2018-01-18T21:05:07 #rust-dev-tools <nrc> this is an imperio PR
2018-01-18T21:05:14 #rust-dev-tools <nrc> and is testing related
2018-01-18T21:05:37 #rust-dev-tools <nrc> original PR: https://github.com/rust-lang/rust/pull/42219
2018-01-18T21:05:57 #rust-dev-tools <nrc> there was a fair bit of discussion there about whether this feature pulls its weight
2018-01-18T21:06:08 #rust-dev-tools <nrc> my worry is that that has not been demonstrated yet
2018-01-18T21:06:17 #rust-dev-tools <nrc> other than that, stabilisation seems ok
2018-01-18T21:06:23 #rust-dev-tools <nrc> (but that is kind of a big thing)
2018-01-18T21:06:33 #rust-dev-tools <imperio> yes
2018-01-18T21:06:37 #rust-dev-tools <imperio> it's quite an old one
2018-01-18T21:06:44 #rust-dev-tools <imperio> and the unstable feature is even more old
2018-01-18T21:07:00 #rust-dev-tools <imperio> I was against it when the first author wanted to add it
2018-01-18T21:07:02 #rust-dev-tools <killercup> i see no reasons not to stabilize this, except that it makes the default test framework a bit more complex when in the future this could be implemented externally
2018-01-18T21:07:09 #rust-dev-tools <steveklabnik> killercup: same
2018-01-18T21:07:13 #rust-dev-tools <imperio> it's been added and since the time it's there, I think it's time to stabilize or remove it
2018-01-18T21:07:18 #rust-dev-tools <oli_obk_> I have never seen this feature before this PR. I was surprised it exists and am with those who don't really see the use of having something "potentially failing"
2018-01-18T21:07:44 #rust-dev-tools <imperio> oli_obk_: the debate on the original PR was mostly what you just said
2018-01-18T21:08:01 #rust-dev-tools <killercup> imperio: is this the same as wrapping the body of a test in catch_panic?
2018-01-18T21:08:05 #rust-dev-tools <nrc> imperio: I don't think we need to stabilise or remove if there is a future path that adds this in a different way
2018-01-18T21:08:15 #rust-dev-tools <imperio> killercup: yes
2018-01-18T21:08:28 #rust-dev-tools <imperio> nrc: then it's a removal :)
2018-01-18T21:08:37 #rust-dev-tools <imperio> if it gets replaced, the current one is removed
2018-01-18T21:08:50 #rust-dev-tools <nrc> I mean, it's an eventual removal , not an immediate removal
2018-01-18T21:08:52 #rust-dev-tools <imperio> I just want it to get "out of the way" at some point
2018-01-18T21:09:09 #rust-dev-tools <killercup> are there any users we know of? can we keep it in limbo until it can be replaced with an externally implemented thing?
2018-01-18T21:09:30 #rust-dev-tools <imperio> killercup: I know at least 2 people using it (excluding the feature's author)
2018-01-18T21:09:36 #rust-dev-tools <imperio> but that's all
2018-01-18T21:09:50 #rust-dev-tools <imperio> since it's unstable, I think it can only attract very few people
2018-01-18T21:09:56 #rust-dev-tools <nrc> are they desperate to have this stabilised?
2018-01-18T21:10:26 #rust-dev-tools <imperio> they're nightly users so no
2018-01-18T21:10:34 #rust-dev-tools <killercup> doesnt seem like it
2018-01-18T21:10:51 #rust-dev-tools <nrc> ok
2018-01-18T21:10:54 #rust-dev-tools <mw> I see no reason to do something now
2018-01-18T21:11:27 #rust-dev-tools <imperio> :-/
2018-01-18T21:11:28 #rust-dev-tools <nrc> then I propose we leave this unstable, with a plan to let custom test frameworks handle it, concretely, we'll deprecate and then remove once custom test frameworks are supproted
2018-01-18T21:11:40 #rust-dev-tools <steveklabnik> sgtm
2018-01-18T21:11:44 #rust-dev-tools <mw> +1
2018-01-18T21:11:53 #rust-dev-tools <imperio> I'd like to have a definitive state on it but if keeping it unstable is fine then let's just talk about it later in the future
2018-01-18T21:12:18 #rust-dev-tools <imperio> (as nrc said)
2018-01-18T21:13:38 #rust-dev-tools <nrc> https://github.com/rust-lang/rust/pull/46990
2018-01-18T21:13:45 #rust-dev-tools <nrc> Show long-running tests in progress, even when multithreaded
2018-01-18T21:14:05 #rust-dev-tools <nrc> not nominated, and I don't think we need to discuss, but if anyone has opinions they should comment
2018-01-18T21:14:22 #rust-dev-tools <nrc> https://github.com/rust-lang/rust/pull/47540
2018-01-18T21:14:28 #rust-dev-tools <nrc> Add approximate suggestions for rustfix
2018-01-18T21:14:50 #rust-dev-tools <nrc> an implementation of a variation of an RFC: https://github.com/rust-lang/rfcs/pull/1941#issuecomment-299097152
2018-01-18T21:15:03 #rust-dev-tools <nrc> (which I didn't realise when I nominated it)
2018-01-18T21:15:21 #rust-dev-tools <nrc> so, I think this is probably OK to land, but needs to be more explicitly experimental
2018-01-18T21:15:26 #rust-dev-tools <nrc> do others have opinions on this?
2018-01-18T21:16:08 #rust-dev-tools <oli_obk_> I do, but that's pretty obvious ;)
2018-01-18T21:16:45 #rust-dev-tools <killercup> i want this :)
2018-01-18T21:16:54 #rust-dev-tools <nrc> a 'soft' question is about what `machine_applicable` means - does it mean might be applicable or always applicable? How much user-intervention is expected? What is the workflow for an IDE? For Rustfix?
2018-01-18T21:17:17 #rust-dev-tools <killercup> this is basically the 'whitelist' for rustfix
2018-01-18T21:17:33 #rust-dev-tools <nrc> I'm not super-happy about this being opt-out, rather than opt-in, but I guess that is for back-compat?
2018-01-18T21:17:35 #rust-dev-tools <oli_obk_> nrc: yea, automatically means no user intervention needed
2018-01-18T21:17:41 #rust-dev-tools <xanewok> nrc: in such a situation, could rustfix be a possible driver for code action (lightbulb) in rls?
2018-01-18T21:17:55 #rust-dev-tools <killercup> Manishearth: ^
2018-01-18T21:18:02 #rust-dev-tools <oli_obk_> nrc: the plan is to vet all rustc suggestions at some point
2018-01-18T21:18:03 #rust-dev-tools <nrc> xanewok: rustfix is an alternative client (i.e., one would use either rustfix or an IDE)
2018-01-18T21:18:05 #rust-dev-tools <nrc> aiui
2018-01-18T21:18:14 #rust-dev-tools <oli_obk_> for now, clippy is the only one who's going to do anything about it
2018-01-18T21:18:21 #rust-dev-tools <oli_obk_> rustc is not impacted at all this way
2018-01-18T21:18:28 #rust-dev-tools <oli_obk_> any other way would have an impact on rustc
2018-01-18T21:18:51 #rust-dev-tools <nrc> but the impact is that all rustc suggestions are treated as applicable - which seems wrong to me
2018-01-18T21:19:01 #rust-dev-tools <killercup> the reasoning for out-out was that most of rustc's suggestions are machine_applicable, but clippy e.e. would probably switch to the approx version until lint suggestions are proven good
2018-01-18T21:19:23 #rust-dev-tools <imperio> damn
2018-01-18T21:19:34 #rust-dev-tools <imperio> if I knew that my PR would make waves still now
2018-01-18T21:19:38 #rust-dev-tools <imperio> what a funny world
2018-01-18T21:20:28 #rust-dev-tools <nrc> hmm, I guess this is an issue for rustfix to work out
2018-01-18T21:20:40 #rust-dev-tools <oli_obk_> nrc: yea, but we can swap this at any point in the future
2018-01-18T21:20:41 #rust-dev-tools <killercup> nrc: would you be okay to land this PR if it also switched all current suggestions to use span_approximate_suggestions?
2018-01-18T21:20:49 #rust-dev-tools <nrc> I'm a bit uncomfortable about landing this with such loose semantics, but as long as its unstable, we can iterate
2018-01-18T21:20:50 #rust-dev-tools <oli_obk_> yea that was the idea, let rustfix worry about it for now
2018-01-18T21:21:04 #rust-dev-tools <killercup> yeah
2018-01-18T21:21:05 #rust-dev-tools <nrc> killercup: we can land as is, as long as we can iterate, I think
2018-01-18T21:21:20 #rust-dev-tools <killercup> cool
2018-01-18T21:21:23 #rust-dev-tools <oli_obk_> killercup: we could make sure the json output exists only if -Zunstable-features is passed
2018-01-18T21:21:42 #rust-dev-tools <nrc> OK, nobody seems to object to this, so let's land it - I still need to review, but I just want some more comments, etc., I think
2018-01-18T21:23:22 #rust-dev-tools <killercup> cool. fyi, i plan on working on a bunch more clippy/rustfix integration over the next weeks, and will probably also patch rls to have a 'clippy mode'
2018-01-18T21:23:29 #rust-dev-tools <nrc> I think it should only be in the JSON if a tool specifically enables it. That works for clippy, but would mean rustfix couldn't experiment with built-in suggestions
2018-01-18T21:23:37 #rust-dev-tools <nrc> killercup: how does that feel ^
2018-01-18T21:23:38 #rust-dev-tools <nrc> ?
2018-01-18T21:24:02 #rust-dev-tools <nrc> killercup: ++ for adding Clippy to RLS - have wanted that for a while :-)
2018-01-18T21:24:14 #rust-dev-tools <killercup> nrc: sounds good, rustfix currently calls clippy-driver internally
2018-01-18T21:24:20 #rust-dev-tools <nrc> ok, cool
2018-01-18T21:24:24 #rust-dev-tools <nrc> will comment in my review
2018-01-18T21:25:26 #rust-dev-tools <nrc> RFCs, sigh, it always seems to be the same ones...
2018-01-18T21:26:08 #rust-dev-tools <killercup> oh, we also have https://github.com/rust-lang/rfcs/pull/2285
2018-01-18T21:26:13 #rust-dev-tools <oli_obk_> killercup: I planned to make rls-clippy a cargo feature like rls-rustfmt, so we might be able to have rustc produce rls even if clippy and rustfmt are broken
2018-01-18T21:26:33 #rust-dev-tools <killercup> oli_obk_: sweet
2018-01-18T21:27:15 #rust-dev-tools <killercup> oli_obk_: let me know when you work on this, i'll probably hack this in until then :)
2018-01-18T21:27:17 #rust-dev-tools <oli_obk_> killercup: don't let me hold you up though, I still need to flesh this out in rustc, adding clippy is entirely orthogonal. Once I get that setup to work with rustfmt, we can probably "just add" clippy
2018-01-18T21:28:14 #rust-dev-tools <killercup> oli_obk_: i fear this is what i'll be doing when i arrive friday before fosdem :D
2018-01-18T21:28:22 #rust-dev-tools <nrc> japaric: ping
2018-01-18T21:28:24 #rust-dev-tools <nrc> https://github.com/rust-lang/rfcs/pull/1133
2018-01-18T21:28:37 #rust-dev-tools <nrc> I think the Xargo into Cargo RFC was an alternative to this right?
2018-01-18T21:29:15 #rust-dev-tools <japaric> er, yes I think so
2018-01-18T21:29:43 #rust-dev-tools <nrc> how are things going with that? Is there anything we can do to get an RFC ready?
2018-01-18T21:31:32 #rust-dev-tools <japaric> what I recall of what I talked with acrichto was something like "we should just go and do it" as in go and implement the thing
2018-01-18T21:33:09 #rust-dev-tools <mw> that sounds very much like acrichto :D
2018-01-18T21:33:14 #rust-dev-tools <nrc> do you agree? Or do you think there is value in having an RFC?
2018-01-18T21:33:53 #rust-dev-tools <nrc> Personally, I tend to err on the side of an RFC here, but I'd also be fine with an unstable implementation, then an RFC
2018-01-18T21:34:22 #rust-dev-tools <nrc> but I would like to move forward - I think it is really important work in its own right, but I also want to do something about 1133 :-)
2018-01-18T21:36:13 #rust-dev-tools <japaric> well, I'd go with an unstable implementation, gain experience and see if we really want to do all the other stuff that's in 1133 and that xargo doesn't
2018-01-18T21:37:53 #rust-dev-tools <japaric> 1133 wants to remove the sysroot altogether and have versioned core / std crates; I think the later is beyond dev-tools scope and more into the lib teams territory
2018-01-18T21:38:47 #rust-dev-tools <nrc> ok
2018-01-18T21:39:53 #rust-dev-tools <nrc> japaric: would you mind writing up a Cargo issue detailing the work to do an unstable implementation please? Then I think we can probably point at that from 1133 and postpone it until that is done, or separate out the work that people still want
2018-01-18T21:40:25 #rust-dev-tools <nrc> There is https://github.com/rust-lang/rfcs/pull/2287 but I want to circle back to that in one minute, and talk about next week's meeting first, because...
2018-01-18T21:40:31 #rust-dev-tools <japaric> nrc: sure
2018-01-18T21:40:36 #rust-dev-tools <nrc> I propose we have another testing meeting!
2018-01-18T21:40:40 #rust-dev-tools <nrc> japaric: thanks!
2018-01-18T21:41:32 #rust-dev-tools <nrc> I won't be able to make it (I will be at LCA), and it would be good if we could have a meeting with Manish involved, so I propose we pick a time which is good for Europe and India (and east coast for jonhoo, if possible)
2018-01-18T21:41:33 #rust-dev-tools <killercup> yeah, the testing discussion keeps going on i.rl.o
2018-01-18T21:41:54 #rust-dev-tools <nrc> and those who want to can drill down into the design and proposals a bit more
2018-01-18T21:42:05 #rust-dev-tools <nrc> I promise I'll have some comments before the meeting
2018-01-18T21:42:10 #rust-dev-tools <nrc> and someone will need to keep notes
2018-01-18T21:42:21 #rust-dev-tools <nrc> does that sound like a good idea?
2018-01-18T21:42:30 #rust-dev-tools <nrc> the alternative is we cancel the meeting :-)
2018-01-18T21:42:33 #rust-dev-tools <killercup> sounds good
2018-01-18T21:42:50 #rust-dev-tools <killercup> oh, do you propose we do this _next week_?
2018-01-18T21:43:01 #rust-dev-tools <nrc> yeah
2018-01-18T21:43:25 #rust-dev-tools <killercup> not sure if it'd be good to let the dust settle a bit and discuss Manish's erfc a bit more
2018-01-18T21:43:44 #rust-dev-tools <killercup> but i guess next week is better than in 3 weeks, sooooooo :)
2018-01-18T21:45:19 #rust-dev-tools <nrc> Manish seems really keen to move to an RFC PR soon, I'd like to have another round of discussion first, so I think sooner is better
2018-01-18T21:47:20 #rust-dev-tools <nrc> japaric, jonhoo, anyone else interested in testing - sound good?
2018-01-18T21:47:54 #rust-dev-tools <killercup> alright, i'm in :) do you want to pick a time now? 4pm utc = 11am new york = 9.30pm mumbai (i think manish is currently an hour before that tho)
2018-01-18T21:48:24 #rust-dev-tools <nrc> let's do that by email, since Manish isn't here
2018-01-18T21:48:27 #rust-dev-tools <japaric> nrc: sgtm
2018-01-18T21:48:34 #rust-dev-tools <nrc> cool
2018-01-18T21:48:52 #rust-dev-tools <nrc> ok, given that, do we want to do anything about https://github.com/rust-lang/rfcs/pull/2287 now? (Stabilising bench)
2018-01-18T21:49:03 #rust-dev-tools <nrc> or leave that for next week?
2018-01-18T21:49:44 #rust-dev-tools <killercup> can we leave it for next week? i have opinions that i've not yet written down :)
2018-01-18T21:50:00 #rust-dev-tools <nrc> sure
2018-01-18T21:50:11 #rust-dev-tools <nrc> OK, that's the agenda done
2018-01-18T21:50:21 #rust-dev-tools <nrc> anyone got anything else we should discuss?
2018-01-18T21:50:38 #rust-dev-tools <steveklabnik> i dunno if my issues with new rustdoc and the rls are releavnt
2018-01-18T21:50:44 #rust-dev-tools <steveklabnik> that's the closest thing i have
2018-01-18T21:50:57 #rust-dev-tools <killercup> can we talk about https://github.com/rust-lang/rfcs/pull/2285 real quick too? (not as important though)
2018-01-18T21:51:47 #rust-dev-tools <nrc> killercup: sure
2018-01-18T21:52:09 #rust-dev-tools <killercup> steveklabnik: do you want to go ahead? do have concrete issues?
2018-01-18T21:52:18 #rust-dev-tools <nrc> steveklabnik: also sure! https://internals.rust-lang.org/t/rustdoc2-rls-analysis-and-the-compiler-help-wanted/6592
2018-01-18T21:52:25 #rust-dev-tools <steveklabnik> killercup: it's ^
2018-01-18T21:52:37 #rust-dev-tools <steveklabnik> nrc's already aware that it exists
2018-01-18T21:52:44 #rust-dev-tools <steveklabnik> but uh, i have to figure out some way around this for now
2018-01-18T21:53:10 #rust-dev-tools <steveklabnik> i started poking around at some of this
2018-01-18T21:53:19 #rust-dev-tools <steveklabnik> but it's pretty massive; like, i don't know the compiler's codebase or the rls'
2018-01-18T21:53:43 #rust-dev-tools <jonhoo> Thu 4pm UTC next week *should* work for me
2018-01-18T21:53:44 #rust-dev-tools <nrc> the really easy path is to just handle inherent impls, where I believe most of the work is done and there is just the stuff in rls-analysis to do
2018-01-18T21:54:07 #rust-dev-tools <steveklabnik> yeah, that would be 100% okay
2018-01-18T21:54:08 #rust-dev-tools <nrc> that would prove out method handling, but it would be very limited in terms of completeness of coverage
2018-01-18T21:54:44 #rust-dev-tools <steveklabnik> basically, i'm almost at the point where people can actually try new rustdoc
2018-01-18T21:54:59 #rust-dev-tools <steveklabnik> but if it can't say any methods, it's not gonna feel great
2018-01-18T21:55:06 #rust-dev-tools <steveklabnik> whereas if it only has some, that's like, way way closer
2018-01-18T21:55:19 #rust-dev-tools <nrc> and the caveat is that you might need to rewrite that once we have proper impl handling, the APIs might have to change
2018-01-18T21:55:27 #rust-dev-tools <nrc> OK cool, that seems like the path of least resistance
2018-01-18T21:55:27 #rust-dev-tools <steveklabnik> i'd be fine with that
2018-01-18T21:55:40 #rust-dev-tools <steveklabnik> i'm trying to dogfood/get something in people's hands that's tangible
2018-01-18T21:55:52 #rust-dev-tools <steveklabnik> there's gonna be tons of iterating
2018-01-18T21:55:57 #rust-dev-tools <nrc> I'll need to check to see exactly what is done and if it still works - I haven't used that data for ages, so it might have rotted
2018-01-18T21:56:04 #rust-dev-tools <steveklabnik> so i half expect to re-write it on my side anyway ;)
2018-01-18T21:56:08 #rust-dev-tools <est31> https://github.com/euclio/rustdoc-static
2018-01-18T21:56:11 #rust-dev-tools <nrc> heh
2018-01-18T21:56:15 #rust-dev-tools <est31> sadly this seems to have stalled :/
2018-01-18T21:57:10 #rust-dev-tools <nrc> steveklabnik: I'll try and get to this later today, if not then I'll have time on Sunday
2018-01-18T21:57:25 #rust-dev-tools <steveklabnik> that would be *amazing* <3
2018-01-18T21:58:48 #rust-dev-tools <nrc> by which I mean - find out what works and write some instructions, probably not actually implement anything, so not that amazing :-)
2018-01-18T21:58:57 #rust-dev-tools <steveklabnik> hehe
2018-01-18T21:59:01 #rust-dev-tools <steveklabnik> ill take anything i can get
2018-01-18T21:59:15 #rust-dev-tools <nrc> killercup: we have two mins want to talk 2285 quickly?
2018-01-18T21:59:25 #rust-dev-tools <killercup> sure, thanks!
2018-01-18T21:59:33 #rust-dev-tools <steveklabnik> :+1:
2018-01-18T21:59:40 #rust-dev-tools <killercup> so, https://github.com/rust-lang/rfcs/pull/2285 is an update to my intra docs links rfc
2018-01-18T22:00:05 #rust-dev-tools <killercup> basically, while implementing it, we found some issues
2018-01-18T22:00:18 #rust-dev-tools <killercup> it boils down to using spaces in URIs
2018-01-18T22:00:22 #rust-dev-tools <nrc> iirc, the problem with the shorthand paths is future compat? Like if you add a name to the namespace, you break some random bit of rustdoc. Were there other issues?
2018-01-18T22:00:35 #rust-dev-tools <nrc> using the @ seems fine
2018-01-18T22:01:01 #rust-dev-tools <nrc> I still hate using 'struct' rather than 'type' with all my heart
2018-01-18T22:01:02 #rust-dev-tools <killercup> i'm fine with this update and would gladly merge it :)
2018-01-18T22:01:17 #rust-dev-tools <killercup> not sure how much process we have around updating rfc texts though
2018-01-18T22:01:46 #rust-dev-tools <killercup> nrc: you'll never have to type either in 99.95% of all cases when the rfcs is implemented fully
2018-01-18T22:02:07 #rust-dev-tools <nrc> and I'm pretty sure we agreed that macros shouldn't include the `!`, I'm surprised to see that in the RFC
2018-01-18T22:02:34 #rust-dev-tools <killercup> nrc: did we? that was in the original rfc
2018-01-18T22:02:35 #rust-dev-tools <nrc> killercup: my problem with this is for tools, though where the 0.05% matters
2018-01-18T22:03:07 #rust-dev-tools <nrc> yeah, I don't recall, I thought we agreed to change that in the original RFC, but maybe not
2018-01-18T22:03:17 #rust-dev-tools <killercup> nrc: oh, tools will be able to use type@foo, the differentiation is just for humans
2018-01-18T22:04:02 #rust-dev-tools <nrc> that should probably be in the RFC
2018-01-18T22:04:24 #rust-dev-tools <nrc> "Non-disambiguated paths cannot be used to link to macros"  - why?
2018-01-18T22:04:52 #rust-dev-tools <nrc> I should just review the RFC, rather than commenting here, sorry
2018-01-18T22:04:54 #rust-dev-tools <killercup> nrc: it is in the rfc, it's the paragraph below manish's changed iirc
2018-01-18T22:05:09 #rust-dev-tools <killercup> nrc: it's fine :)
2018-01-18T22:05:34 #rust-dev-tools <nrc> ok, we;re out of time (and I have another meeting)
2018-01-18T22:05:39 #rust-dev-tools <nrc> thank you everybody!
2018-01-18T22:05:43 #rust-dev-tools <killercup> nrc: this is a minor update to the original rfc, though. what's the process here?
2018-01-18T22:06:00 #rust-dev-tools <nrc> killercup: I'll comment on the RFC, but we should go to FCP pretty soon and have it land quickly
2018-01-18T22:06:10 #rust-dev-tools <killercup> nrc: +1
2018-01-18T22:06:35 #rust-dev-tools <killercup> see y'all fresh and early next week to another round of testing then ;)
2018-01-18T22:07:34 #rust-dev-tools <jonhoo> w00t testing \o/
2018-01-19T00:44:49 #rust-dev-tools <spastorino> what's the current way of running rustfmt?
2018-01-19T00:45:04 #rust-dev-tools <spastorino> error: toolchain 'nightly-x86_64-unknown-linux-gnu' does not have the binary `rustfmt`
2018-01-19T00:45:26 #rust-dev-tools <spastorino> before updating I had it on nightly toolchain
2018-01-19T00:46:18 #rust-dev-tools <spastorino> ahh seems there's no rustfmt component anymore
2018-01-19T00:47:20 #rust-dev-tools <nrc> spastorino: you need a nightly from last week, builds are broken right now for rustfmt
2018-01-19T00:47:34 #rust-dev-tools <nrc> the component is called rustfmt-preview, but the binary is rustfmt
2018-01-19T00:48:28 #rust-dev-tools <spastorino> ahh, I have today's nightly
2018-01-19T00:48:48 #rust-dev-tools <spastorino> :(
2018-01-19T00:50:49 #rust-dev-tools <nrc> you can specify a nightly to rustup, though I forget the syntax
2018-01-19T01:28:43 #rust-dev-tools <spastorino> nrc: ok, will check
2018-01-19T01:29:40 #rust-dev-tools <spastorino> anyway, not sure why there's no rustfmt-preview component anymore
2018-01-19T01:30:15 #rust-dev-tools <spastorino> `rustup component list | grep preview` shows no results
2018-01-19T01:30:51 #rust-dev-tools <nrc> its because the build is broken
2018-01-19T01:31:00 #rust-dev-tools <nrc> fix is in the queue
2018-01-19T03:56:01 #rust-dev-tools <spastorino> nrc: ahh ok ok, thought the issue was different
2018-01-19T05:33:42 #rust-dev-tools <Manishearth> nrc: catching up now on the meeting:
2018-01-19T05:34:09 #rust-dev-tools <Manishearth> regarding type vs struct, the rfc and impl both allow you to use either
2018-01-19T05:34:57 #rust-dev-tools <Manishearth> i am ambivalent on ! in macross. i think killercup wants it and i see no problem requiring it
2018-01-19T05:35:36 #rust-dev-tools <Manishearth> regarding the test rfc, im not in that much a hurry or something, but im kinda afraid of losing momentum as has happened the last few times this got discussed
2018-01-19T05:36:10 #rust-dev-tools <Manishearth> we probably should close the bench rfc if we commit to getting *some* custom test framework rfc accepted soonish
2018-01-19T05:36:27 #rust-dev-tools <Manishearth> i can continue to take point on that if bandwidth is the issue
2018-01-19T05:36:59 #rust-dev-tools <Manishearth> i mean we probably should close the bench rfc anyway but a commitment would be nice
2018-01-19T05:39:14 #rust-dev-tools <jonhoo> i think it's reasonable for rust to ship with some kind of (simple) benchmarker by default. so the question then just becomes whether this is the api we want to support
2018-01-19T05:39:25 #rust-dev-tools <jonhoo> if it isn't, or we're not sure, then closing is the way to go
2018-01-19T05:39:32 #rust-dev-tools <Manishearth> if we close the bench rfc ill proobably open one for stabilizing blavk box. gnzlbg has ideas there
2018-01-19T05:39:37 #rust-dev-tools <jonhoo> if we're okay with the api, there's an argument for accepting and stabilizing
2018-01-19T05:39:45 #rust-dev-tools <Manishearth> and yeah, i would like us to ship some simple bencher either way
2018-01-19T05:39:50 #rust-dev-tools <jonhoo> yeah, black box seems separate
2018-01-19T05:42:41 #rust-dev-tools <Manishearth> in my pre rfc i have implicitly assumed we ship a default #test (we do) and bench (we dont)
2018-01-19T05:43:00 #rust-dev-tools <jonhoo> yeah, i think it's a reasonable assumption that we will
2018-01-19T05:43:14 #rust-dev-tools <Manishearth> and that we can override it via custom test
2018-01-19T05:43:25 #rust-dev-tools <jonhoo> the question for the bench rfc is really whether we want to commit to the interface for the default runner we eventually ship
2018-01-19T05:55:56 #rust-dev-tools <Manishearth> yeah
2018-01-19T05:57:41 #rust-dev-tools <nrc> I left comments on the doc link RFC
2018-01-19T05:58:08 #rust-dev-tools <nrc> you all can discuss what to do with the bench RFC next week
2018-01-19T05:58:48 #rust-dev-tools <nrc> I'd prefer to keep focussed on the custom frameworks RFC and then do other RFCs later - it is pretty easy for multiple RFCs to get overwhelming
2018-01-19T05:59:52 #rust-dev-tools <nrc> I think it would be good to push on the custom frameworks stuff and keep momentum there, but I'm not sure how much of a commitment we can offer - it's mostly a resourcing issue and if people get too busy...
2018-01-19T06:00:52 #rust-dev-tools <nrc> whether Rust has a default bencher or not is kind of a detail at this stage. I'd be happy for it to be like rustfmt, etc. - external but easily discoverable and installable
2018-01-19T06:11:24 #rust-dev-tools <nrc> Manishearth: email sent about organising meeting next week - thanks for taking point :-)
2018-01-19T06:11:59 #rust-dev-tools <jonhoo> yeah -- i don't think there's a huge advantage to stabilizing the bench api right now, even if a decent number of people want it on stable. given that we believe custom frameworks are now no longer years into the future, that should be the focus instead
2018-01-19T06:14:06 #rust-dev-tools <jonhoo> all right, i'm signing off for the night o/
2018-01-19T06:25:03 #rust-dev-tools <Manishearth> nrc: oh yeah I'm definitely pushing for a reference bencher in the nursery either way
2018-01-19T06:33:41 #rust-dev-tools <Manishearth> nrc: am I able to talk to rfcbot and register concerns?
2018-01-19T06:33:49 #rust-dev-tools <Manishearth> trying to split your single concern into multiple
2018-01-19T06:34:46 #rust-dev-tools <nrc> I don't know, actually, I think probably not
2018-01-19T06:37:29 #rust-dev-tools <Manishearth> nrc: so regarding the macros thing, that was mostly an implementation concern ("it's annoying to make work well"). But I can fix that in the PR
2018-01-19T06:43:09 #rust-dev-tools <Manishearth> anp: hey, team shepherds can register concerns, yeah?
2018-01-19T06:43:14 #rust-dev-tools <Manishearth> on rfcbot?
2018-01-19T06:43:24 #rust-dev-tools <Manishearth> could the devtools peers be made shepherds in the config?
2018-01-19T06:49:20 #rust-dev-tools <nrc> 👍
2018-01-19T06:54:32 #rust-dev-tools <anp> Manishearth: https://github.com/anp/rfcbot-rs/blob/master/teams.toml
2018-01-19T06:54:46 #rust-dev-tools <anp> there's no distinction between team member and shepherd so it'd block consensus on the shepherds too
2018-01-19T06:54:50 #rust-dev-tools <anp> maybe that's ok?
2018-01-19T06:55:37 #rust-dev-tools <Manishearth> anp: hmmm. we can't block on shepherds
2018-01-19T06:55:53 #rust-dev-tools <anp> yeah there weren't any shephers when i built it originally
2018-01-19T06:55:57 #rust-dev-tools <anp> we could add like a permissions system
2018-01-19T06:56:04 #rust-dev-tools <Manishearth> could add it
2018-01-19T06:56:10 #rust-dev-tools <anp> but i'm currently up late debugging a horrifying custom ci and build service
2018-01-19T06:56:16 #rust-dev-tools <anp> so not going to be able to do it rn :P
2018-01-19T06:57:08 #rust-dev-tools <Manishearth> heh np
2018-01-19T15:18:05 #rust-dev-tools <misdreavus> whoops, missed the meeting yesterday >_>
2018-01-19T15:18:25 #rust-dev-tools <misdreavus> i was home sick and totally not paying attention to irc when the time came around
2018-01-19T15:23:23 #rust-dev-tools <steveklabnik> it's cool <3
2018-01-19T15:23:25 #rust-dev-tools <steveklabnik> hope you're feeling better
2018-01-19T15:24:47 #rust-dev-tools <misdreavus> i'll get there (-_-)b
2018-01-19T15:27:10 #rust-dev-tools <misdreavus> i don't really get flattened by illness, but it was notable enough that i wanted to take a day of rest
2018-01-20T08:14:29 #rust-dev-tools <gilnaa> Let's say I make a change in libtest that breaks a test-case of cargo. Since cargo is in a different repo, I'd have to fix both with 2 PRs instead of one, but neither PR will pass CI/bors on its own. 
2018-01-20T08:14:51 #rust-dev-tools <gilnaa> What should I do?
2018-01-20T09:21:20 #rust-dev-tools <Havvy> gilnaa: Ask in #rust-infra
2018-01-20T09:35:03 #rust-dev-tools <killercup> gilnaa: iirc you need to send a pr to cargo and reference the branch/commit for the cargo submodule in rustc's repo
2018-01-20T11:03:54 #rust-dev-tools <steveeJ> https://github.com/rust-lang-nursery/rustup.rs#installation says that rustup installs binaries to cargo's binary directory. if this is not the case on my system for some reason, should I consider that a bug?
2018-01-21T13:16:43 #rust-dev-tools <algesten> xanewok: I started looking into this
2018-01-21T13:16:44 #rust-dev-tools <algesten> https://github.com/rust-lang-nursery/rls/issues/621
2018-01-21T13:17:15 #rust-dev-tools <algesten> I think I need to look at rls_analysis to ensure it output the range for the trait.
2018-01-21T13:17:34 #rust-dev-tools <algesten> This led me to construct a test case, and that led me to tidy up the test data firts :P
2018-01-21T13:17:35 #rust-dev-tools <algesten> https://github.com/nrc/rls-analysis/pull/125
2018-01-21T13:17:47 #rust-dev-tools <algesten> *first
2018-01-21T13:19:41 #rust-dev-tools <algesten> There is this TODO note that may or may not be interesting... https://github.com/nrc/rls-analysis/blob/master/src/lib.rs#L403
2018-01-21T13:20:43 #rust-dev-tools <xanewok> Yeha, rls-analysis also needs some love, especially since the new rustdoc aims to reuse the it
2018-01-21T13:20:46 #rust-dev-tools <xanewok> so that might be a good idea
2018-01-21T13:21:51 #rust-dev-tools <algesten> I need to get my head around what's happening there, but maybe #621 is a good way into it.
2018-01-21T13:21:54 #rust-dev-tools <xanewok> this needs some better coupling of traits and their impls
2018-01-21T13:21:59 #rust-dev-tools <algesten> ok
2018-01-21T13:22:11 #rust-dev-tools <algesten> so is that coupling clear in what comes out of cargo?
2018-01-21T13:22:14 #rust-dev-tools <xanewok> algesten: it'd be a good idea to look at https://internals.rust-lang.org/t/rustdoc2-rls-analysis-and-the-compiler-help-wanted/6592/5
2018-01-21T13:22:17 #rust-dev-tools <algesten> (just started looking)
2018-01-21T13:22:38 #rust-dev-tools <xanewok> nrc provided a plan of implementation there to work on traits and impls
2018-01-21T13:25:42 #rust-dev-tools <algesten> reading reading... 
2018-01-21T13:59:50 #rust-dev-tools <algesten> xanewok: i'm a bit unsure whether fixing #621 requires the work nrc outlines. from what i gather the save-analysis data has everything needed for this (very simplistic) bug case in the issue.
2018-01-21T14:00:09 #rust-dev-tools <algesten> it's very possible i'm missing something...
2018-01-21T14:22:11 #rust-dev-tools <xanewok> algesten: from what I understand what's more needed in both case is exposing traits and their relations more easily via the rls-analysis API
2018-01-21T14:22:26 #rust-dev-tools <xanewok> in doing so, we might be able to solve the rename problem easily, but also do the work for the new rustdoc
2018-01-21T14:22:57 #rust-dev-tools <xanewok> however I'm gonna be honest that I skimmed over the final MVP for rustdoc, so I can't be sure
2018-01-21T14:48:38 #rust-dev-tools <algesten> xanewok: i think i understand. the rls implementation of rename use the analysis to 1. lookup id of span, 2. get definition of that id, 3. find all refs of the definition.
2018-01-21T14:48:38 #rust-dev-tools <algesten> so even if the trait definition is in the save-analysis, there's nothing to connect the def in 2 to the trait def. 
2018-01-21T14:48:38 #rust-dev-tools <algesten> this is probably why we need to do what nrc talks about first.
2018-01-21T15:26:01 #rust-dev-tools <algesten> xanewok: do you understand what nrc means in that post with:
2018-01-21T15:26:01 #rust-dev-tools <algesten> > add the id of an impl to `Relation::Impl` or change the `to` id in Relation to be the id of the impl, not the trait
2018-01-21T15:26:01 #rust-dev-tools <algesten> looking at the source, it looks like `from` field already has the impl id?
2018-01-21T15:26:01 #rust-dev-tools <algesten> https://github.com/rust-lang/rust/blob/master/src/librustc_save_analysis/lib.rs#L332
2018-01-21T22:59:54 #rust-dev-tools <xanewok> algesten: yeah, it looks that way
2018-01-21T23:00:02 #rust-dev-tools <xanewok> I think the biggest hurdle is exposing it in a convenient API
2018-01-21T23:00:30 #rust-dev-tools <xanewok> oh, right - the data itself is in rls-data, but the rls-analysis doesn't lower it all - it only lowers id->span information (only for the purpose of  "Find Impls" RLS extension)
2018-01-21T23:02:00 #rust-dev-tools <xanewok> it's done in read_impls (https://github.com/nrc/rls-analysis/blob/master/src/lowering.rs#L307)
2018-01-21T23:02:50 #rust-dev-tools <xanewok> and the impl data is stored in Id->Vec<Span> format (https://github.com/nrc/rls-analysis/blob/master/src/analysis.rs#L41)
2018-01-21T23:49:48 #rust-dev-tools <nrc> algesten: I believe that `from` is the concrete type and `to` is the trait, we don't have the id of the impl itself
2018-01-22T07:41:48 #rust-dev-tools <algesten> nrc: got it. i'll see if i can figure out how to make that happen. so when you're saying that we could change the `to` id, it's because we could go via the impl to find the id of the trait?
2018-01-22T08:43:03 #rust-dev-tools <xanewok> nrc: if you're still around, could you publish the new version of rls-rustc?
2018-01-22T08:57:17 #rust-dev-tools <nrc> algesten: yes, I believe so
2018-01-22T08:58:40 #rust-dev-tools <algesten> nrc: the `ImplKind` you say is only `Inherent`, does that mean that i just filter out all the `syntax::ast::ImplItem` of kind `Method` and emit those as `data::Impl`?
2018-01-22T08:59:19 #rust-dev-tools <algesten> i guess i don't quite see how to map `syntax::ast::ImplItem` to specific `data::ImplKind` 
2018-01-22T09:01:12 #rust-dev-tools <nrc> algesten: the whole impl should be the data::Impl, I think you could ignore the ImplKind bit for now (always emit Direct or Inherent or something)
2018-01-22T09:01:37 #rust-dev-tools <nrc> well, actually it's a bit easy
2018-01-22T09:01:58 #rust-dev-tools <nrc> if there is a trait ref, it's Direct, if there is not, then its Inherent
2018-01-22T09:02:07 #rust-dev-tools <nrc> we're not recording any other kinds
2018-01-22T09:02:10 #rust-dev-tools <algesten> ah
2018-01-22T09:02:28 #rust-dev-tools <nrc> xanewok: shall do, I have crappy internet and I need to rustup, so it's taking a minute
2018-01-22T09:03:06 #rust-dev-tools <xanewok> nrc: great, thanks!
2018-01-22T09:03:10 #rust-dev-tools <algesten> nrc: so for each of the `Vec<Impl>` i emit a `data::Impl` regardless of the `ImplKind` (be it `Method`, `Constant`, etc).
2018-01-22T09:03:32 #rust-dev-tools <algesten> and infer the direct/inherent depending on the trait ref.
2018-01-22T09:05:12 #rust-dev-tools <algesten> *each of the `Vec<ImplItem>` i mean.
2018-01-22T09:06:48 #rust-dev-tools <algesten> where `Vec<ImplItem>` is the last `_` arg here on this line: https://github.com/rust-lang/rust/blob/master/src/librustc_save_analysis/lib.rs#L318
2018-01-22T09:08:36 #rust-dev-tools <nrc> xanewok: published 0.2
2018-01-22T09:09:08 #rust-dev-tools <nrc> algesten: No there is one data::Impl for the whole impl item
2018-01-22T09:09:20 #rust-dev-tools <nrc> the impl items should be visited separately
2018-01-22T09:09:30 #rust-dev-tools <nrc> and they should have the data::Impl as a parent
2018-01-22T09:09:40 #rust-dev-tools <algesten> nrc: ok. i suspected as much. but i'm hunting around for that impl id you talked about.
2018-01-22T09:09:49 #rust-dev-tools <algesten> can't seem to find it :/
2018-01-22T09:10:02 #rust-dev-tools <algesten> some impl id for the entire impl, not the individual items.
2018-01-22T09:10:50 #rust-dev-tools <nrc> yeah, I'm not sure if such an id exists in the compiler, save-analysis certainly doesn't know about one at the moment
2018-01-22T09:11:00 #rust-dev-tools <nox> I was wondering,
2018-01-22T09:11:13 #rust-dev-tools <algesten> nrc: right. so part of this job would be to also make such an id?
2018-01-22T09:11:23 #rust-dev-tools <nox> wouldn't it be better for https://github.com/rust-lang-nursery/rustup.rs#enable-tab-completion-for-bash-fish-or-zsh to have commands such as `. <(rustup completions bash)` rather than writing to files in bash-completion.d?
2018-01-22T09:11:33 #rust-dev-tools <nrc> it might be worth asking in #rustc if impls have a NodeId/DefId
2018-01-22T09:11:36 #rust-dev-tools <nox> That means the user doesn't need to care about updating said completions.
2018-01-22T09:11:43 #rust-dev-tools <algesten> nrc: i do that
2018-01-22T09:11:46 #rust-dev-tools <nrc> if not, you'd need to synthesise something
2018-01-22T09:11:56 #rust-dev-tools <nrc> but I'm not sure how to do that entirely
2018-01-22T09:11:56 #rust-dev-tools <algesten> something working from the span?
2018-01-22T09:12:46 #rust-dev-tools <nrc> you could probably just have a counter, the hard bit is not clashing with an existing DefId
2018-01-22T09:13:59 #rust-dev-tools <algesten> hmmm... counting down from `::max()`, a constant `+ 1000000` ugly stuff? :)
2018-01-22T09:14:16 #rust-dev-tools <nrc> DefIds already count up and down :-(
2018-01-22T09:14:21 #rust-dev-tools <algesten> grrr
2018-01-22T09:14:49 #rust-dev-tools <algesten> some temporary id structure that i can only make permanent once we know all DefIds.
2018-01-22T09:15:05 #rust-dev-tools <algesten> hairy stuff
2018-01-22T09:16:20 #rust-dev-tools <nrc> I feel like there should be a solution using hashing, but I don't know how you would detect/handle collisions
2018-01-22T09:18:43 #rust-dev-tools <nox> nrc: Do you think a patch doing what I said would be welcomed?
2018-01-22T09:18:56 #rust-dev-tools <algesten> nrc: hashing from the span maybe?
2018-01-22T09:45:41 #rust-dev-tools <nrc> nox: I'm sorry, I don't really understand the effect.
2018-01-22T09:46:11 #rust-dev-tools <nox> nrc: I install rustup, run the command from the readme to write a completion file to some bash-related directory.
2018-01-22T09:46:14 #rust-dev-tools <nrc> algesten: I was thinking you could just hash the id + a bool or enum which determines what kind of id it is
2018-01-22T09:46:25 #rust-dev-tools <nox> I update rustup, a new command is introduced, and I forget to update the completions.
2018-01-22T09:46:39 #rust-dev-tools <nox> With the written file: the new command doesn't get completed.
2018-01-22T09:46:59 #rust-dev-tools <nox> With `. <(rustup completions bash)` in .bashrc: the new command is completed in the next shell I open.
2018-01-22T09:47:25 #rust-dev-tools <algesten> nrc: hash which id? the `from` + `to` somehow?
2018-01-22T09:47:59 #rust-dev-tools <nrc> algesten: you would need to keep count of the impls and use that as the id
2018-01-22T09:48:08 #rust-dev-tools <algesten> ah. got ya.
2018-01-22T09:48:10 #rust-dev-tools <nrc> also need to ensure you use it for the parent id of the methods
2018-01-22T09:48:54 #rust-dev-tools <nrc> nox: so, the effect would be to just update the completions every time the shell starts?
2018-01-22T09:49:00 #rust-dev-tools <nox> nrc: Yes.
2018-01-22T09:49:23 #rust-dev-tools <nrc> that sounds like an improvement, assuming it all works (I've no idea about bash completions)
2018-01-22T09:49:28 #rust-dev-tools <algesten> nrc: yes that's easy since the implitems are right there. 
2018-01-22T09:49:37 #rust-dev-tools <nrc> and so I'd think we take such a patch
2018-01-22T09:49:44 #rust-dev-tools <nox> bash-completion just sources everything in bash-completion.d,
2018-01-22T09:49:58 #rust-dev-tools <nox> it would just source the result of rustup's command every time instead.
2018-01-22T09:50:08 #rust-dev-tools <nox> nrc: Ok, will do that later then.
2018-01-22T09:50:30 #rust-dev-tools <nrc> nox: thanks!
2018-01-22T09:50:37 #rust-dev-tools <nox> nrc: IIRC that's what npm recommends too: https://docs.npmjs.com/cli/completion
2018-01-22T10:41:05 #rust-dev-tools <oli_obk_> nrc: would you be allright with using `__do_not_use__machine_applicable` as a field name in json instead of only showing the field if a specific flag is set? Unfortunately `rustc_serialize` does not support skipping field serialization like serde does, and we can't use serde in the compiler
2018-01-22T10:41:11 #rust-dev-tools <oli_obk_> cc https://github.com/rust-lang/rust/pull/47540
2018-01-22T12:46:25 #rust-dev-tools <steveeJ> it's quite weird that travis caches debug build files as seen here: https://travis-ci.org/wawium/wawium/jobs/331757735#L933-L941
2018-01-22T15:29:17 #rust-dev-tools <killercup> fitzgen: matklad: mw: have you seen the mail about this weeks meeting and the doodle link? please participate if you haven't yet :) currently tomorrow at 11am EST (4pm UTC iirc) is when most people can make it
2018-01-22T15:32:25 #rust-dev-tools <mw> killercup: thanks for the reminder
2018-01-22T15:32:49 #rust-dev-tools <killercup> mw: thanks for the quick reply :)
2018-01-22T15:34:24 #rust-dev-tools <killercup> since it obviously won't be today, i'll check the results later (in 2 hours or so) and we can decide on the best option then
2018-01-22T15:34:28 #rust-dev-tools <killercup> nrc: Manishearth: ^
2018-01-22T15:36:45 #rust-dev-tools <algesten> nrc: here's a start of what I think we discussed. https://github.com/rust-lang/rust/pull/47657
2018-01-22T15:36:45 #rust-dev-tools <algesten> I need some guidance, but I think it's all detailed in the PR.
2018-01-22T15:58:23 #rust-dev-tools <algesten> nrc: also related questions in: https://github.com/nrc/rls-data/pull/14
2018-01-22T15:58:23 #rust-dev-tools <algesten> but i'm sure you'll notice those when you wake up :D
2018-01-22T16:42:12 #rust-dev-tools <misdreavus> killercup: lol
2018-01-22T16:42:31 #rust-dev-tools <misdreavus> (re: comment in rustdoc link pr)
2018-01-22T16:57:03 #rust-dev-tools <imperio> isn't tommorow gonna be a conflict for rustdoc meeting?
2018-01-22T16:57:13 #rust-dev-tools <imperio> misdreavus: steveklabnik: ^
2018-01-22T16:57:35 #rust-dev-tools <misdreavus> not if it's as early as killercup said
2018-01-22T16:58:55 #rust-dev-tools <imperio> perfect then :)
2018-01-22T16:59:14 #rust-dev-tools <imperio> earlier won't be possible for me anyway so it'll be without me (I think I'm not needed for this anyway so...)
2018-01-22T17:18:16 #rust-dev-tools <steveklabnik> algesten: <3 <3 <3
2018-01-22T17:33:03 #rust-dev-tools <killercup> alright, just send out an email to confirm: meeting is tomorrow at 4pm UTC
2018-01-22T18:35:55 #rust-dev-tools <algesten> steveklabnik: :D
2018-01-22T20:57:37 #rust-dev-tools <jonhoo> Manishearth: in preparation for tomorrow's meeting i've done another reading of your eRFC and started typing up my thoughts
2018-01-22T20:57:47 #rust-dev-tools <jonhoo> the high bit is that i think your approach is the right one
2018-01-22T20:58:08 #rust-dev-tools <killercup> spoilers! :P
2018-01-22T20:58:25 #rust-dev-tools <jonhoo> with two crucial points: a) i think the custom framework function needs to take *multiple* TokenStreams (one for each annotated thing)
2018-01-22T20:58:58 #rust-dev-tools <jonhoo> b) i think it we *must* stipulate that the custom test framework runs *after* regular macro expansion
2018-01-22T20:59:22 #rust-dev-tools <jonhoo> another thing i think it'd be good to expand on in the eventual RFC is how the test runner is supposed to keep state
2018-01-22T20:59:43 #rust-dev-tools <jonhoo> like, imagine you want all the output TokenTrees to access some shared counter or whatnot
2018-01-22T20:59:59 #rust-dev-tools <jonhoo> or I guess maybe you just generate one output TokenTree
2018-01-22T21:00:08 #rust-dev-tools <jonhoo> so then that's not the issue, but rather imports
2018-01-22T21:00:18 #rust-dev-tools <jonhoo> which you point out in the eRFC
2018-01-22T21:00:27 #rust-dev-tools <jonhoo> but i think this point is actually pretty tricky to get right
2018-01-22T21:00:44 #rust-dev-tools <jonhoo> you're taking code written somewhere else and injecting it into the custom test framework's namespace
2018-01-22T21:01:06 #rust-dev-tools <jonhoo> i don't think it's obvious how a test framework would generate a TokenStream that compiles in that context
2018-01-22T21:01:51 #rust-dev-tools <jonhoo> also, i think that if we give multiple TokenStreams to the custom test framework (we *need* a better and shorter name), there's no need for the helper API
2018-01-22T21:02:05 #rust-dev-tools <jonhoo> killercup: my bad -- should have used <spoiler>
2018-01-22T21:06:11 #rust-dev-tools <killercup> jonhoo: re: shares state -- wouldnt you initially want to do that be very explicitly by passing a TestRunner argument to each test case?
2018-01-22T21:06:45 #rust-dev-tools <killercup> looking at it from the perspective of the test *runtime*, you call some functions that execute your test code
2018-01-22T21:07:45 #rust-dev-tools <killercup> typically these re function generated by the test framework, proc-macro style. so you can have them take a "state" argument
2018-01-22T21:08:01 #rust-dev-tools <killercup> or am i missing something here?
2018-01-22T21:08:39 #rust-dev-tools <killercup> jonhoo: but you are right, first order of business should be vote on abbreviations! I think CuTeFrame is a good first choice
2018-01-22T21:08:50 #rust-dev-tools <jonhoo> the issue is that (at least as currently proposed), the test framework takes a TokenStream (or i think more likely, multiple), and *produces* a TokenStream *in its own crate*
2018-01-22T21:08:54 #rust-dev-tools <jonhoo> though maybe I'm reading that wrong
2018-01-22T21:09:39 #rust-dev-tools <jonhoo> if it generates one TokenStream for each TokenStream (corresponding to each annotated unit) and that TokenStream replaces the original at its source, then I don't see where the test framework's main() enters the picture
2018-01-22T21:10:07 #rust-dev-tools <killercup> jonhoo: ah i see
2018-01-22T21:10:24 #rust-dev-tools <jonhoo> i think the way i see this working is that the CTF is given the TokenStreams of *all* the annotated units, and decides how to structure its main() to generate based on that
2018-01-22T21:10:28 #rust-dev-tools <killercup> that's just one of the steps afaict
2018-01-22T21:10:31 #rust-dev-tools <jonhoo> yeah
2018-01-22T21:10:36 #rust-dev-tools <jonhoo> but in the eRFC that's the only one, no?
2018-01-22T21:10:44 #rust-dev-tools <killercup> le tme read it again
2018-01-22T21:10:59 #rust-dev-tools <killercup> i thought it mentioned a "collect all the annotated items" part
2018-01-22T21:11:20 #rust-dev-tools <jonhoo> the reason i want the CTF to have access to all the annotated things at the same time is precisely so that it can generate a single execution plan
2018-01-22T21:11:28 #rust-dev-tools <jonhoo> rather than being given one at a time and having to make incremental decisions
2018-01-22T21:11:44 #rust-dev-tools <jonhoo> that also makes the choice of main() trivial -- the CTF produces a single TokenStream that will include its main
2018-01-22T21:12:10 #rust-dev-tools <jonhoo> the alternative is that it is given a set of TokenStreams, and has to produce an equal-sized set of TokenStreams to replace them, *plus* one for its main()
2018-01-22T21:12:43 #rust-dev-tools <jonhoo> that does raise other issues though, such as how it passes around references to shared state
2018-01-22T21:12:57 #rust-dev-tools <jonhoo> any functions it generates may live deep in some other crate -- how does it call them?
2018-01-22T21:13:10 #rust-dev-tools <jonhoo> or, inversely, how do those functions access global state in the CTF's crate?
2018-01-22T21:13:48 #rust-dev-tools <jonhoo> or is the CTF macro evaluated in the crate under test? in root scope? so any globals the CTF defines are always available at crate::SOME_GLOBAL from the test functions
2018-01-22T21:13:50 #rust-dev-tools <killercup> isn't that where manish's helper crate comes in?
2018-01-22T21:13:51 #rust-dev-tools <killercup> > fn collect_tests<T: TestCollector>(collector: &mut T, tree: syn::ItemMod) -> ItemMod;
2018-01-22T21:13:52 #rust-dev-tools <killercup> > The TestCollector lets crates both collect all the test functions that need calling, as well as also transforming them in any way they wish.
2018-01-22T21:14:23 #rust-dev-tools <jonhoo> i don't see how we provide that feature on top of the "whole-crate macro" proposed
2018-01-22T21:14:35 #rust-dev-tools <jonhoo> as in, i don't see how the helpers could be implemented
2018-01-22T21:14:38 #rust-dev-tools <killercup> jonhoo: i originally expected that as taht is how proc-macros currently work (no hygiene whatsoever)
2018-01-22T21:14:59 #rust-dev-tools <jonhoo> in a sense, i don't really want the helpers there
2018-01-22T21:15:26 #rust-dev-tools <jonhoo> i'd want the api to be "here are all the things annotated with what you said you care about, now what code do you want to generate?"
2018-01-22T21:15:40 #rust-dev-tools <jonhoo> killercup: yeah, i don't think they're particularly hygenic
2018-01-22T21:15:58 #rust-dev-tools <jonhoo> but then that still requires some global state declared by the CTF
2018-01-22T21:16:00 #rust-dev-tools <jonhoo> though maybe that's fine
2018-01-22T21:16:51 #rust-dev-tools <jonhoo> i suppose my argument then is that there should just be a single function you declare for any CTF: one with a #[] declaring what attributes it cares about
2018-01-22T21:17:01 #rust-dev-tools <jonhoo> and which is given all the things with those annotations, and can transform them + emit a main()
2018-01-22T21:17:24 #rust-dev-tools <jonhoo> unless i'm mistaken, that should be sufficient, and we don't have to maintain this separate helper thing
2018-01-22T21:17:25 #rust-dev-tools <killercup> jonhoo: okay, so, you want sth like #[custom_test_framework(…)] pub fn foo<Tests: Iterator<Item=TokenStream>(tests: Vec<TokenStream>) -> TokenStream?
2018-01-22T21:17:43 #rust-dev-tools <jonhoo> umm
2018-01-22T21:17:46 #rust-dev-tools <jonhoo> Tests isn't used?
2018-01-22T21:18:07 #rust-dev-tools <killercup> haha, yeah i switched to "fuck it, lets use a vec" mid-typing lol
2018-01-22T21:18:18 #rust-dev-tools <jonhoo> I actually think I'd have it take an iterator
2018-01-22T21:18:24 #rust-dev-tools <jonhoo> and produce an impl Iterator
2018-01-22T21:18:30 #rust-dev-tools <jonhoo> but yeah, either way
2018-01-22T21:18:42 #rust-dev-tools <jonhoo> alternatively
2018-01-22T21:18:46 #rust-dev-tools <killercup> i hear generators are the cool new thing ;)
2018-01-22T21:18:50 #rust-dev-tools <jonhoo> it takes an &mut [TokenStream]
2018-01-22T21:19:06 #rust-dev-tools <jonhoo> well, it's not really a generator, because it must produce exactly as many outputs as inputs
2018-01-22T21:19:08 #rust-dev-tools <jonhoo> since it's transforming them
2018-01-22T21:19:21 #rust-dev-tools <jonhoo> (well, plus a main())
2018-01-22T21:19:35 #rust-dev-tools <jonhoo> we *could* have the main() be a separate thing i suppose
2018-01-22T21:19:42 #rust-dev-tools <killercup> that still leaves the question of whether we can it to generate main() or just some other thing that can be part of a main()
2018-01-22T21:19:51 #rust-dev-tools <jonhoo> #[ctf_map(…)] pub fn foo(tests: Vec<TokenStream>) -> TokenStream
2018-01-22T21:20:00 #rust-dev-tools <jonhoo> #[ctf_main(…)] pub fn main() {}
2018-01-22T21:20:10 #rust-dev-tools <killercup> can you have CuTeFrames for the same file?
2018-01-22T21:20:16 #rust-dev-tools <killercup> *two
2018-01-22T21:20:52 #rust-dev-tools <jonhoo> actually, how about just #[ctf(…)] pub fn foo(tests: &mut [TokenStream]) -> TokenStream
2018-01-22T21:21:01 #rust-dev-tools <jonhoo> killercup: yeah
2018-01-22T21:21:04 #rust-dev-tools <jonhoo> i don't see why not
2018-01-22T21:21:10 #rust-dev-tools <jonhoo> the issue is just attribute overlap
2018-01-22T21:21:32 #rust-dev-tools <jonhoo> which i think we'd have to deal with either with namespacing for macros (which won't realistically happen) or with `#[cfg(this_ctf)]`
2018-01-22T21:21:58 #rust-dev-tools <jonhoo> (also, re the name, i wan't it to not have "test" in the name, because at this point it's more general)
2018-01-22T21:22:04 #rust-dev-tools <jonhoo> wow.. want*
2018-01-22T21:23:27 #rust-dev-tools <jonhoo> "Alternative Execution Contexts"
2018-01-22T21:23:46 #rust-dev-tools <killercup> AlECs, I like it
2018-01-22T21:25:34 #rust-dev-tools <jonhoo> too bad it's not possible to do PRs against gists
2018-01-22T21:26:48 #rust-dev-tools <killercup> it's a short document, want to copy it somewhere else? (repo, google docs, post-it notes in front of a webcam, …) i'm sure manish wouldn't mind
2018-01-22T22:02:08 #rust-dev-tools <jonhoo> unrelated, but why is Vidyo the platform of choice for meetings? why not something WebRTC based like appear.in, hubl.in, etc.?
2018-01-22T22:02:40 #rust-dev-tools <killercup> jonhoo: i don't know for sure i suspect it's because mozilla has been using it for quite a while
2018-01-22T22:02:51 #rust-dev-tools <jonhoo> mmm
2018-01-22T22:03:21 #rust-dev-tools <killercup> gilnaa has also had problem with it
2018-01-22T22:03:38 #rust-dev-tools <killercup> i'm totally fine with using something elese
2018-01-22T22:04:28 #rust-dev-tools <killercup> hell, i'd even do it as a hangout and record it for other people to watch afterwards if everyone is okay with that
2018-01-22T22:06:51 #rust-dev-tools <jonhoo> i would be too
2018-01-22T22:07:02 #rust-dev-tools <jonhoo> that also seems reasonable given that many people seem to care about it
2018-01-22T22:07:43 #rust-dev-tools <killercup> jonhoo: do you have any experience with that? (i've never used it myself)
2018-01-22T22:09:53 #rust-dev-tools <jonhoo> i haven't used it for that purpose either unfortunately
2018-01-22T22:10:04 #rust-dev-tools <jonhoo> i guess one downside of hangouts is you need a Google account
2018-01-22T22:10:17 #rust-dev-tools <jonhoo> most of the webrtc solutions are basically plug'n'play
2018-01-22T22:10:32 #rust-dev-tools <jonhoo> there's just a URL you navigate to, and any WebRTC-enabled browser will just work
2018-01-22T22:10:32 #rust-dev-tools <killercup> true
2018-01-22T22:12:01 #rust-dev-tools <killercup> jonhoo: do you want to make suggestion for an alternative to vidyo for tomorrow's meeting? it'll need to work for 8-12 people
2018-01-22T22:13:13 #rust-dev-tools <jonhoo> https://meet.jit.si/ seems to be the one
2018-01-22T22:13:19 #rust-dev-tools <jonhoo> most others have limits in the free version
2018-01-22T22:13:30 #rust-dev-tools <jonhoo> this one is open-source and free with any number of users
2018-01-22T22:13:56 #rust-dev-tools <jonhoo> actually, https://talky.io/ also seems to not have a limit and be free
2018-01-22T22:14:04 #rust-dev-tools <jonhoo> but i like things that are open-source :p
2018-01-22T22:15:04 #rust-dev-tools <killercup> jonhoo: looks interesting! totally with a try in any case. can you reply-all to the invite mail? i'm about to head off to bed
2018-01-22T22:15:19 #rust-dev-tools <jonhoo> sure
2018-01-22T22:19:30 #rust-dev-tools <killercup> thx! and g'night! :)
2018-01-22T22:19:37 #rust-dev-tools <jonhoo> night!
2018-01-22T22:35:27 #rust-dev-tools <jonhoo> writing up my changes to Manishearth's eRFC here: https://github.com/jonhoo/rfcs/blob/alt-exec-context/text/0000-alternative-execution-contexts.md
2018-01-22T23:33:24 #rust-dev-tools <nrc> jonhoo: is that a consensus version I should comment on, or should I read that *and* Manish's?
2018-01-22T23:52:16 #rust-dev-tools <jonhoo> nrc: no, this is my modified version of his
2018-01-22T23:52:19 #rust-dev-tools <jonhoo> though it's not done yet
2018-01-22T23:52:32 #rust-dev-tools <jonhoo> basically, i think his version underspecifies some important things
2018-01-22T23:52:36 #rust-dev-tools <jonhoo> so i'm mostly fleshing those out
2018-01-22T23:52:41 #rust-dev-tools <jonhoo> they're not really in disagreement
2018-01-22T23:56:56 #rust-dev-tools <nrc> ok, I'll try and read both
2018-01-22T23:57:26 #rust-dev-tools <nrc> are there important  bits of the comment thread I should read too, or are the pre-RFCs good?
2018-01-23T00:08:39 #rust-dev-tools <jonhoo> hmm
2018-01-23T00:08:45 #rust-dev-tools <jonhoo> https://internals.rust-lang.org/t/past-present-and-future-for-rust-testing/6354/55?u=jonhoo and Manishearth's reply maybe
2018-01-23T00:09:18 #rust-dev-tools <nrc> thanks!
2018-01-23T00:13:56 #rust-dev-tools <jonhoo> fwiw, mine has been rewritten up to but not including the cargo section
2018-01-23T00:14:01 #rust-dev-tools <jonhoo> about to do that one now
2018-01-23T00:14:17 #rust-dev-tools <jonhoo> the cargo section is unlikely to change much though
2018-01-23T00:14:30 #rust-dev-tools <jonhoo> it was the procedural macro section i wanted to expand on
2018-01-23T00:14:55 #rust-dev-tools <jonhoo> one point of contention is whether the `src/` restriction in Manishearth's proposal is important
2018-01-23T00:44:44 #rust-dev-tools <jonhoo> nrc: okay, pushed my finished version
2018-01-23T00:45:04 #rust-dev-tools <jonhoo> i think Manishearth would agree with most of what is there + the changes, but i'll let people speak for themselves ;p
2018-01-23T03:30:41 #rust-dev-tools <Manishearth> nrc: there are two proposals, mostly similar, differing in key points. I'm doing a summary of the diff
2018-01-23T03:37:21 #rust-dev-tools <jonhoo> Manishearth: are you comparing with my new one or my old one?
2018-01-23T03:37:43 #rust-dev-tools <jonhoo> specifically, my new proposal (based on your eRFC) is here: https://github.com/jonhoo/rfcs/blob/alt-exec-context/text/0000-alternative-execution-contexts.md
2018-01-23T03:39:15 #rust-dev-tools <Manishearth> nrc: https://internals.rust-lang.org/t/past-present-and-future-for-rust-testing/6354/74
2018-01-23T03:39:23 #rust-dev-tools <Manishearth> jonhoo: your new vs mine
2018-01-23T03:39:27 #rust-dev-tools <Manishearth> yes, i read it
2018-01-23T03:39:59 #rust-dev-tools <jonhoo> ah, just saw your post
2018-01-23T03:40:02 #rust-dev-tools * jonhoo reading
2018-01-23T03:41:21 #rust-dev-tools <jonhoo> hmm
2018-01-23T03:41:28 #rust-dev-tools <jonhoo> I'll respond in-thread
2018-01-23T03:59:18 #rust-dev-tools <jonhoo> Manishearth: posted
2018-01-23T04:00:10 #rust-dev-tools <Manishearth> jonhoo: how does wrapping the preexisting main work? you need to rename it, the API doesn't let you touch main() {}
2018-01-23T04:00:44 #rust-dev-tools <Manishearth> like, where do you get main from?
2018-01-23T04:00:56 #rust-dev-tools <Manishearth> is this part of the elements array? it would have to be separate
2018-01-23T04:01:14 #rust-dev-tools <Manishearth> jonhoo: also this doesn't solve the path problem at all, your API needs to include that
2018-01-23T04:01:46 #rust-dev-tools <jonhoo> I was thinking that the returned TokenStream must produce a function called, say `entry`. And when a custom execution context is used, entry is called instead of main(). Which means entry is free to call main()
2018-01-23T04:02:11 #rust-dev-tools <jonhoo> Manishearth: yes, absolute. but in your proposal the macro needs to massage the code somehow to get access to all the tests
2018-01-23T04:02:15 #rust-dev-tools <jonhoo> which will also be a pain
2018-01-23T04:02:51 #rust-dev-tools <jonhoo> also, separate point regarding both proposals, how will this affect compile times? after the TokenStream modifier is run, do we do an entire new compile pass?
2018-01-23T04:08:20 #rust-dev-tools <Manishearth> jonhoo: oh, that's a good idea
2018-01-23T04:08:31 #rust-dev-tools <Manishearth> jonhoo: btw, I don't get your point about splitting the ecosystem
2018-01-23T04:08:44 #rust-dev-tools <Manishearth> both proposals only affect cargo test/cargo execute (not cargo build)
2018-01-23T04:08:55 #rust-dev-tools <Manishearth> and neither let _dependencies_ use such macros
2018-01-23T04:09:08 #rust-dev-tools <jonhoo> sure, but i'm still worried about the compile time for those
2018-01-23T04:09:14 #rust-dev-tools <jonhoo> if they need to double-compile the crate-under-test
2018-01-23T04:09:20 #rust-dev-tools <Manishearth> jonhoo: nope
2018-01-23T04:09:24 #rust-dev-tools <jonhoo> but i guess test crates are unlikely to be large in isolation
2018-01-23T04:09:31 #rust-dev-tools <Manishearth> jonhoo: they need to double-expand
2018-01-23T04:09:41 #rust-dev-tools <Manishearth> macro expansion is not the expensive thing
2018-01-23T04:09:43 #rust-dev-tools <jonhoo> but after expanding, you could have inserted something that has, say, derive()
2018-01-23T04:09:50 #rust-dev-tools <Manishearth> jonhoo: run expansion twice
2018-01-23T04:09:55 #rust-dev-tools <jonhoo> or you could have *completely* rewritten the TokenStream
2018-01-23T04:10:01 #rust-dev-tools <Manishearth> jonhoo: this is a solved problem for existing proc macros
2018-01-23T04:10:01 #rust-dev-tools <jonhoo> nothing says you have to keep any of the old stuff
2018-01-23T04:10:42 #rust-dev-tools <Manishearth> jonhoo: and?
2018-01-23T04:11:18 #rust-dev-tools <Manishearth> jonhoo: the way proc macros currently work is that they register themselves, and then something folds over the entire tree. When you produce an AST it gets refolded, i think
2018-01-23T04:11:19 #rust-dev-tools <jonhoo> re splitting the ecosystem: with a full-crate macro, you could invent your own syntax for Rust that you transform into "real" Rust. this means you can write a crate using a language that looks *very* different from Rust (look at coffeescript for example). this means that developers familiar with Rust may suddenly find themselves in codebases that are nominally Rust, but actually look totally different
2018-01-23T04:11:22 #rust-dev-tools <Manishearth> so derive() can output println
2018-01-23T04:11:34 #rust-dev-tools <Manishearth> jonhoo: no, but you can't use this as a whole crate proc macro
2018-01-23T04:11:41 #rust-dev-tools <jonhoo> why not?
2018-01-23T04:11:47 #rust-dev-tools <Manishearth> jonhoo: because this doesn't impact cargo build, and it doesn't impact dependencies
2018-01-23T04:12:04 #rust-dev-tools <Manishearth> jonhoo: neither proposal lets you use this unconditionally on a crate's build time
2018-01-23T04:12:13 #rust-dev-tools <Manishearth> only on the toplevel crate, only for testing
2018-01-23T04:12:54 #rust-dev-tools <Manishearth> that said mystor/nika does want a whole crate proc macro feature that can be used for her rust-cpp crate
2018-01-23T04:13:00 #rust-dev-tools <Manishearth> but this doesn't get you there.
2018-01-23T04:13:08 #rust-dev-tools <jonhoo> only on the top-level crate means i can still do this for, say, all of src/. i don't see how/why the proposal actually limits it for *just* testing
2018-01-23T04:13:19 #rust-dev-tools <jonhoo> except in that you can't set a framework for a non-test target maybe
2018-01-23T04:13:22 #rust-dev-tools <Manishearth> jonhoo: because it doesn't run during cargo build?
2018-01-23T04:13:24 #rust-dev-tools <Manishearth> yeah
2018-01-23T04:13:33 #rust-dev-tools <Manishearth> this is explicitly for post build steps
2018-01-23T04:14:03 #rust-dev-tools <jonhoo> but given that you can define your own targets, you just define one called "real-build" that uses this "other language", and you tell your users to build with that
2018-01-23T04:14:22 #rust-dev-tools <Manishearth> jonhoo: and importantly, this isn't "splitting the ecosystem". toplevel crates can do whatever they want. 
2018-01-23T04:14:29 #rust-dev-tools <Manishearth> jonhoo: sure.
2018-01-23T04:14:30 #rust-dev-tools <jonhoo> but yes, i agree that's more far-fetched if we restrict to specific targets
2018-01-23T04:14:35 #rust-dev-tools <Manishearth> jonhoo: you can do that already with a build script
2018-01-23T04:14:39 #rust-dev-tools <Manishearth> thsi is not new
2018-01-23T04:14:49 #rust-dev-tools <Manishearth> like, we have C crates on crates.io, that doesn't split the ecosystem
2018-01-23T04:14:52 #rust-dev-tools <jonhoo> true, but this would make it *way* more convenient (at least if not limited to test)
2018-01-23T04:14:53 #rust-dev-tools <Manishearth> it's the same thing, really
2018-01-23T04:14:58 #rust-dev-tools <jonhoo> not quite
2018-01-23T04:14:58 #rust-dev-tools <Manishearth> jonhoo: not really
2018-01-23T04:15:25 #rust-dev-tools <Manishearth> jonhoo: you can already do source parsing into syn i think. if not, that's easy enough to add
2018-01-23T04:15:30 #rust-dev-tools <jonhoo> as in, i think it's important that we don't have even top-level crates that use very different syntax, because it alienates users who don't know that syntax
2018-01-23T04:15:43 #rust-dev-tools <Manishearth> jonhoo: that's the toplevel crate's problem
2018-01-23T04:15:45 #rust-dev-tools <jonhoo> but you're totally right that this can already sort of be done
2018-01-23T04:15:50 #rust-dev-tools <jonhoo> yes, but we shouldn't encourage it
2018-01-23T04:15:50 #rust-dev-tools <Manishearth> jonhoo: rustc and servo *already* use wrapped build systems
2018-01-23T04:15:53 #rust-dev-tools <Manishearth> and firefox
2018-01-23T04:15:56 #rust-dev-tools <Manishearth> this doesn't
2018-01-23T04:16:00 #rust-dev-tools <jonhoo> yes, but they don't rewrite the language
2018-01-23T04:16:04 #rust-dev-tools <jonhoo> true
2018-01-23T04:16:09 #rust-dev-tools <Manishearth> you already can achieve this with hacks, this provides alternate hacks to do it
2018-01-23T04:16:11 #rust-dev-tools <jonhoo> i'm not saying your proposal really encourages it
2018-01-23T04:16:14 #rust-dev-tools <Manishearth> yeah
2018-01-23T04:16:15 #rust-dev-tools <jonhoo> i do think it makes it easier
2018-01-23T04:16:21 #rust-dev-tools <jonhoo> or rather
2018-01-23T04:16:31 #rust-dev-tools <jonhoo> i could see there being pressure for lifting the "only test" restriction
2018-01-23T04:16:38 #rust-dev-tools <jonhoo> at which point that becomes a concern
2018-01-23T04:16:43 #rust-dev-tools <jonhoo> but it's totally true that's far down the line
2018-01-23T04:18:00 #rust-dev-tools <Manishearth> yes
2018-01-23T04:20:03 #rust-dev-tools <Manishearth> jonhoo: so, of all the points listed under the cargo section in https://internals.rust-lang.org/t/past-present-and-future-for-rust-testing/6354/74?u=manishearth
2018-01-23T04:20:34 #rust-dev-tools <Manishearth> jonhoo: there are some things my rfc is missing, and some things yours is. do you have objections to any of the cargo things my rfc has that yours doesn't?
2018-01-23T04:20:50 #rust-dev-tools <Manishearth> (i don't have objections to your rfcs cargo proposals and would like to include them)
2018-01-23T04:20:59 #rust-dev-tools <Manishearth> ignoring the syntax entirely, just on expressive power
2018-01-23T04:21:08 #rust-dev-tools <jonhoo> hmm, i'm still not entirely sure what your proposal has that mine doesn't?
2018-01-23T04:21:13 #rust-dev-tools <jonhoo> i *think* they're equivalent
2018-01-23T04:21:30 #rust-dev-tools <Manishearth> jonhoo: it allows you to declare that you do not run in lib mode
2018-01-23T04:21:41 #rust-dev-tools <jonhoo> yes, module the src/ restriction
2018-01-23T04:21:42 #rust-dev-tools <Manishearth> jonhoo: it also specifies how [[test]] generalizes
2018-01-23T04:21:59 #rust-dev-tools <Manishearth> jonhoo: ohhhh. i didn't get that
2018-01-23T04:22:14 #rust-dev-tools <Manishearth> jonhoo: that's a bit tricky though. src/ need not be where the crate is
2018-01-23T04:22:47 #rust-dev-tools <jonhoo> sorry, i meant modulo*. mine definitely doesn't support a framework imposing that restriction
2018-01-23T04:22:56 #rust-dev-tools <jonhoo> but i also don't see why it's important for the framework to add that restriction?
2018-01-23T04:23:06 #rust-dev-tools <jonhoo> it seems more advisory than anything else?
2018-01-23T04:23:11 #rust-dev-tools <Manishearth> jonhoo: fuzzers can't run on src
2018-01-23T04:23:14 #rust-dev-tools <jonhoo> why not?
2018-01-23T04:23:27 #rust-dev-tools <jonhoo> #[fuzz] fn some_func_in_src()
2018-01-23T04:23:38 #rust-dev-tools <jonhoo> as for how [[test]] generalizes, sure, that mapping will need to exist
2018-01-23T04:23:51 #rust-dev-tools <jonhoo> i think that can map directly onto my proposed sets, but i haven't though about it in detail
2018-01-23T04:23:53 #rust-dev-tools <Manishearth> jonhoo: you have to specify a single fuzzer, fuzzers run forever by default
2018-01-23T04:24:01 #rust-dev-tools <Manishearth> jonhoo: i guess fuzzers could run on src
2018-01-23T04:24:05 #rust-dev-tools <jonhoo> yeah
2018-01-23T04:24:39 #rust-dev-tools <jonhoo> if the user defined multiple "fuzz entry points", the framework could helpfully give an error
2018-01-23T04:24:48 #rust-dev-tools <Manishearth> jonhoo: yep
2018-01-23T04:24:50 #rust-dev-tools <jonhoo> or better yet, it requires a name when you run to disambiguate
2018-01-23T04:25:00 #rust-dev-tools <jonhoo> if there's only one, it doesn't
2018-01-23T04:25:07 #rust-dev-tools <jonhoo> but if there are many, it forces you to pick
2018-01-23T04:25:10 #rust-dev-tools <jonhoo> just like cargo run does
2018-01-23T04:27:10 #rust-dev-tools <Manishearth> jonhoo: yeah, frameworks may need to explicitly specify if they allow being run all at a time
2018-01-23T04:30:48 #rust-dev-tools <jonhoo> why would that be necessary when they write their own main?
2018-01-23T04:32:13 #rust-dev-tools <jonhoo> the fuzz main would have (if elements.len() > 1 && args.len() < 1 { error!("must disambiguate") }
2018-01-23T04:32:19 #rust-dev-tools <jonhoo> or whatever
2018-01-23T04:32:22 #rust-dev-tools <Manishearth> jonhoo: yeah
2018-01-23T04:32:32 #rust-dev-tools <Manishearth> jonhoo: no but if you have multiple fuzz targets
2018-01-23T04:32:38 #rust-dev-tools <Manishearth> jonhoo: you can cargo test and it will run all tests
2018-01-23T04:32:42 #rust-dev-tools <Manishearth> cargo bench -> all benches
2018-01-23T04:32:46 #rust-dev-tools <Manishearth> cargo execute fuzz -> uh oh
2018-01-23T04:32:46 #rust-dev-tools <jonhoo> ohh, i see what you mean
2018-01-23T04:33:09 #rust-dev-tools <jonhoo> yeah
2018-01-23T04:33:15 #rust-dev-tools <Manishearth> jonhoo: anyway, left a comment outlining that our proposals are functionally identical now ASIDE from the api issue
2018-01-23T04:33:20 #rust-dev-tools <jonhoo> there's also a related question about executing things in parallel
2018-01-23T04:33:29 #rust-dev-tools <jonhoo> is cargo allowed to spawn executors at the same time? or no?
2018-01-23T04:33:32 #rust-dev-tools <jonhoo> i think probably not
2018-01-23T04:33:38 #rust-dev-tools <jonhoo> even though it may cost some execution time
2018-01-23T04:33:50 #rust-dev-tools <jonhoo> Manishearth: yeah, saw that -- i think that's about right
2018-01-23T04:34:15 #rust-dev-tools <jonhoo> i still personally prefer my syntax, but you're totally right that it's not particularly important :p
2018-01-23T04:37:45 #rust-dev-tools <jonhoo> i think another issue we both have is that of visibility
2018-01-23T04:37:57 #rust-dev-tools <jonhoo> though i guess in yours you could *force* visibility through the macro
2018-01-23T04:38:23 #rust-dev-tools <Manishearth> jonhoo: no, it doesn't, currently
2018-01-23T04:38:33 #rust-dev-tools <Manishearth> jonhoo: yes
2018-01-23T04:38:47 #rust-dev-tools <Manishearth> jonhoo: the helper thing also mutates visibility for you
2018-01-23T04:38:52 #rust-dev-tools <jonhoo> mmm
2018-01-23T04:39:20 #rust-dev-tools <Manishearth> this way I can expose TestCollector or whatever that libsyntax API is called, with *all* of its power, without having to expose the ast
2018-01-23T04:39:35 #rust-dev-tools <jonhoo> right
2018-01-23T04:39:48 #rust-dev-tools <jonhoo> well, i think the helper would have to expose TokenStream directly like in my proposal
2018-01-23T04:39:54 #rust-dev-tools <jonhoo> otherwise the syntax is too limiting (probably)
2018-01-23T04:40:12 #rust-dev-tools <jonhoo> i guess in my proposal the visibility modification would happen internally
2018-01-23T04:41:18 #rust-dev-tools <jonhoo> anyway, i'm heading to bed -- catch you all in the meeting tomorrow
2018-01-23T04:41:26 #rust-dev-tools <jonhoo> (well, today for you i suppose :p)
2018-01-23T05:00:28 #rust-dev-tools <nrc> I commented with an alternate proposal: https://internals.rust-lang.org/t/past-present-and-future-for-rust-testing/6354/83?u=nrc
2018-01-23T05:55:51 #rust-dev-tools <gilnaa2> I missed some of the conversation, what is the chosen platform for the meeting?
2018-01-23T10:04:20 #rust-dev-tools <killercup> wow, lots of stuff to catch up on
2018-01-23T10:05:17 #rust-dev-tools <killercup> gilnaa: i think we have consensus to try a webrtc based video thing, jon mentioned https://meet.jit.si/ first so i guess we'll try this one? :)
2018-01-23T10:09:01 #rust-dev-tools <oli_obk_> I've had problems with jitsi before, but that was with smartphone/tablet users
2018-01-23T10:09:26 #rust-dev-tools <oli_obk_> discord is another alternative
2018-01-23T10:24:09 #rust-dev-tools <killercup> oli_obk_: discord is a good idea actually, there is a rust server already
2018-01-23T10:24:20 #rust-dev-tools <killercup> but it requires an account
2018-01-23T10:24:33 #rust-dev-tools <killercup> which was a reason why we didn't go with google handouts
2018-01-23T10:25:48 #rust-dev-tools <oli_obk_> it does?
2018-01-23T10:25:56 #rust-dev-tools <killercup> oli_obk_: i think so, yeah
2018-01-23T10:25:57 #rust-dev-tools <oli_obk_> I thought you could just use it and optionally create an account
2018-01-23T10:26:29 #rust-dev-tools <oli_obk_> killercup: nah, works without an account, just tested
2018-01-23T10:26:43 #rust-dev-tools <killercup> let me check
2018-01-23T10:26:55 #rust-dev-tools <killercup> oli_obk_: yep, you're right just tried discord.me/rust-lang :)
2018-01-23T10:27:34 #rust-dev-tools <killercup> jonhoo and i talked about this a bit yesterday night fyi; hangouts on air with posting the recording to youtube would be a nice idea to make our meetings a bit more transparent. not sure if all participants are comfortable with that thogh
2018-01-23T10:28:30 #rust-dev-tools <killercup> oli_obk_: discord only supports 9 people in video call tho
2018-01-23T10:29:22 #rust-dev-tools <killercup> or actually 10 ("you and 9 others")
2018-01-23T10:31:09 #rust-dev-tools <oli_obk_> O_o
2018-01-23T10:31:16 #rust-dev-tools <oli_obk_> 9 ppl with video or 9 ppl total?
2018-01-23T10:32:22 #rust-dev-tools <killercup> > In addition to being a pretty sweet voice & text chat app, Discord can offer you and up to 9 of your closest compadres an equally awesome video and screen sharing experience. 
2018-01-23T10:32:59 #rust-dev-tools <oli_obk_> ok. sounds a lot like a hard limit
2018-01-23T10:37:16 #rust-dev-tools <eijebong> oli_obk_: You probably need to pay to extend that
2018-01-23T13:50:05 #rust-dev-tools <Manishearth> yo yo yo
2018-01-23T13:50:11 #rust-dev-tools <Manishearth> meeting in 10m
2018-01-23T13:52:07 #rust-dev-tools <Manishearth> wait lol nope
2018-01-23T13:52:14 #rust-dev-tools <Manishearth> that was the time we were thinking of before
2018-01-23T13:52:19 #rust-dev-tools <Manishearth> still a couple hours to go
2018-01-23T14:17:29 #rust-dev-tools <oli_obk_> :D
2018-01-23T14:50:37 #rust-dev-tools <misdreavus> i might be spotty, i've had some dayjob activity recently so people have a higher chance of dropping by
2018-01-23T14:50:49 #rust-dev-tools <misdreavus> that said, i would be no camera/no mic anyway so yeah >_>
2018-01-23T14:51:06 #rust-dev-tools <misdreavus> and likely totally absent if we're not on vidyo since i don't want to install things on my work computer
2018-01-23T14:51:11 #rust-dev-tools <misdreavus> >_>
2018-01-23T14:51:52 #rust-dev-tools <oli_obk_> misdreavus: I think the idea was requiring no installs, just going through a browser
2018-01-23T14:52:01 #rust-dev-tools <misdreavus> aha
2018-01-23T14:52:45 #rust-dev-tools <steveklabnik> wait there's a meeting today?
2018-01-23T14:53:06 #rust-dev-tools <misdreavus> special testing meeting, in an hour
2018-01-23T14:53:12 #rust-dev-tools <steveklabnik> ah
2018-01-23T14:58:09 #rust-dev-tools <jonhoo> posted another reply trying to see how my proposal could be adapted to more what you're thinking nrc
2018-01-23T14:58:11 #rust-dev-tools <jonhoo> at least i think
2018-01-23T14:59:26 #rust-dev-tools <jonhoo> also cc Manishearth 
2018-01-23T15:15:53 #rust-dev-tools <Manishearth> jonhoo: i haven't read completely but i like the update
2018-01-23T15:16:00 #rust-dev-tools <Manishearth> it handles paths and stff, yay
2018-01-23T15:16:05 #rust-dev-tools <Manishearth> also explicitly includes attributes
2018-01-23T15:16:13 #rust-dev-tools <Manishearth> though that's usually included in the item
2018-01-23T15:20:21 #rust-dev-tools <jonhoo> yeah, though I don't know what type we'd actually use for the paths
2018-01-23T15:20:36 #rust-dev-tools <jonhoo> i'm not familiar enough with the internals to know if we have such a thing already
2018-01-23T15:25:43 #rust-dev-tools <Manishearth> jonhoo: vec of str is fine imo
2018-01-23T15:26:04 #rust-dev-tools <Manishearth> otherwise, syn::Path but we cant make syn part of the stable api
2018-01-23T15:26:07 #rust-dev-tools <jonhoo> ah, yeah, maybe
2018-01-23T15:26:10 #rust-dev-tools <Manishearth> hence my solution :p
2018-01-23T15:26:27 #rust-dev-tools <jonhoo> I guess as long as the generated TokenStream can use that path as a path
2018-01-23T15:26:35 #rust-dev-tools <Manishearth> do the clean thing and expose it via syn
2018-01-23T15:53:59 #rust-dev-tools <oli_obk_> so... do we already have a link of what tool and which channel to join?
2018-01-23T15:54:43 #rust-dev-tools <killercup> oli_obk_: not that i know of, want to post something?
2018-01-23T15:54:49 #rust-dev-tools <misdreavus> i don't think something was pinned down?
2018-01-23T15:55:07 #rust-dev-tools <killercup> (the first one to post a link wins – that's how decisions are made :D)
2018-01-23T15:56:11 #rust-dev-tools <oli_obk_> https://meet.jit.si/rust-lang-dev-tools
2018-01-23T15:57:18 #rust-dev-tools <misdreavus> congratulations, you froze my chrome >_>
2018-01-23T15:57:29 #rust-dev-tools <Manishearth> yo
2018-01-23T15:57:50 #rust-dev-tools <misdreavus> okay there we go
2018-01-23T15:58:20 #rust-dev-tools <Manishearth> ugh that site is slow
2018-01-23T15:59:40 #rust-dev-tools <Manishearth> can folks see each other? cos I just see a frozen killercup 
2018-01-23T15:59:54 #rust-dev-tools <nox> That's because you should use Firefox. 👍
2018-01-23T16:00:17 #rust-dev-tools <Manishearth> lol
2018-01-23T16:00:29 #rust-dev-tools <misdreavus> nox: tell that to my tightly-controlling it department :V
2018-01-23T16:00:41 #rust-dev-tools <jfrg> it keeps telling me it's unable to access my microphone :(
2018-01-23T16:00:46 #rust-dev-tools <nox> misdreavus: Don't worry, I was being facetious. :)
2018-01-23T16:00:55 #rust-dev-tools <misdreavus> i figured, i just don't like that sentiment >_>
2018-01-23T16:02:22 #rust-dev-tools <Manishearth> hm this doesn't seem to work
2018-01-23T16:02:28 #rust-dev-tools <jfrg> nope
2018-01-23T16:02:30 #rust-dev-tools <fitzgen> is the UI freaking out and flashing on and off for anyone else?
2018-01-23T16:02:31 #rust-dev-tools <jfrg> i just hear static
2018-01-23T16:02:34 #rust-dev-tools <jfrg> and no microphone
2018-01-23T16:02:41 #rust-dev-tools <Manishearth> yeah the UI is bonkers for me
2018-01-23T16:02:43 #rust-dev-tools <Manishearth> try http://appear.in/rust-dev-tools ?
2018-01-23T16:02:45 #rust-dev-tools <fitzgen> http://appear.in/ has worked for me before
2018-01-23T16:03:09 #rust-dev-tools <Manishearth> oh but they only allow 4 participants
2018-01-23T16:03:25 #rust-dev-tools <killercup> lol
2018-01-23T16:03:51 #rust-dev-tools <killercup> we could circle back to vidyo…
2018-01-23T16:04:11 #rust-dev-tools <misdreavus> lol oops
2018-01-23T16:04:11 #rust-dev-tools <jfrg> https://talky.io/rust-dev-tools
2018-01-23T16:04:14 #rust-dev-tools <fitzgen> so... what's the plan?
2018-01-23T16:04:17 #rust-dev-tools <jfrg> supports any number of users
2018-01-23T16:04:43 #rust-dev-tools <Manishearth> lets try talky, if not we can either do vidyo or just do IRC
2018-01-23T16:04:51 #rust-dev-tools <killercup> click ALL the links
2018-01-23T16:05:02 #rust-dev-tools <jfrg> :p
2018-01-23T16:05:26 #rust-dev-tools <misdreavus> no go for talky, it does not appreciate not having a camera/mic available
2018-01-23T16:05:43 #rust-dev-tools <Manishearth> i hear noises but not people in talky
2018-01-23T16:05:46 #rust-dev-tools <misdreavus> i just want to eavesdrop ;_;
2018-01-23T16:06:09 #rust-dev-tools <fitzgen> Manishearth: I don't think anyone was talking
2018-01-23T16:06:12 #rust-dev-tools <fitzgen> lol
2018-01-23T16:06:13 #rust-dev-tools <killercup> Manishearth: no one was talking :P
2018-01-23T16:06:40 #rust-dev-tools <jfrg> okay, so, I just hear what sounds like dinosaur roaring....
2018-01-23T16:06:42 #rust-dev-tools <Manishearth> https://hangouts.google.com/call/8XREGWwVv8UEoNSNx5lGAAEM ?
2018-01-23T16:06:46 #rust-dev-tools <Manishearth> in chrome
2018-01-23T16:07:36 #rust-dev-tools <misdreavus> would rather not have to dust off my google account >_>
2018-01-23T16:07:45 #rust-dev-tools <misdreavus> but if it works for everyone else then i can just sit out
2018-01-23T16:07:55 #rust-dev-tools <Manishearth> misdreavus: it seems to be working 
2018-01-23T16:08:25 #rust-dev-tools <misdreavus> :/
2018-01-23T16:08:55 #rust-dev-tools <Manishearth> oli_obk_: there?
2018-01-23T16:09:44 #rust-dev-tools <oli_obk_> trying, creating a google account
2018-01-23T16:09:54 #rust-dev-tools <fitzgen> T.T
2018-01-23T16:10:42 #rust-dev-tools <fitzgen> jonhoo: still around?
2018-01-23T16:12:12 #rust-dev-tools <fitzgen> https://public.etherpad-mozilla.org/p/rust-dev-tools
2018-01-23T16:16:45 #rust-dev-tools <fitzgen> https://github.com/aturon/rust-wasm/issues/28 has discussion about #[test] and wasm and integrating with browsers
2018-01-23T16:40:17 #rust-dev-tools <jonhoo> fitzgen: https://internals.rust-lang.org/t/past-present-and-future-for-rust-testing/6354/38?u=jonhoo
2018-01-23T16:40:25 #rust-dev-tools <fitzgen> https://github.com/fitzgen/state_machine_future append-only as "replace"
2018-01-23T17:03:31 #rust-dev-tools <oli_obk_> did my notes-email work?
2018-01-23T17:03:46 #rust-dev-tools <Manishearth> wait, oli_obk_ took the notes, right? nrc sent the email? I'm confused
2018-01-23T17:04:05 #rust-dev-tools <oli_obk_> Manishearth: my email program might've screwed up there and spoofed an address
2018-01-23T17:04:11 #rust-dev-tools <Manishearth> oli_obk_: i got the notes, just from ... not you :)
2018-01-23T17:04:25 #rust-dev-tools <Manishearth> but ... but ... it was sent through TLS
2018-01-23T17:04:28 #rust-dev-tools <oli_obk_> Manishearth: yea, just checked, this is weird
2018-01-23T17:04:29 #rust-dev-tools <Manishearth> i didn't get a spoof warning
2018-01-23T17:04:30 #rust-dev-tools <killercup> oli_obk_: and nrc both show up as green in my irc client, i'
2018-01-23T17:04:31 #rust-dev-tools <killercup> i'm sure they're the same person actually
2018-01-23T17:04:35 #rust-dev-tools <Manishearth> lol
2018-01-23T17:04:40 #rust-dev-tools <oli_obk_> Advanced spoofing
2018-01-23T17:04:43 #rust-dev-tools <oli_obk_> sorry
2018-01-23T17:04:49 #rust-dev-tools <Manishearth> haha
2018-01-23T17:04:50 #rust-dev-tools <oli_obk_> I'll fix the reply button
2018-01-23T17:05:03 #rust-dev-tools <oli_obk_> oh, it's just the reply-all button -.- weird
2018-01-23T17:05:10 #rust-dev-tools <killercup> lol
2018-01-23T17:05:23 #rust-dev-tools <killercup> oli_obk_: can you make a pr with the notes to https://github.com/nrc/dev-tools-team ?
2018-01-23T17:05:31 #rust-dev-tools <misdreavus> i was just like, wait, it's hella early in NZ, why did nrc send the email?
2018-01-23T17:05:44 #rust-dev-tools <Manishearth> well the headers confirm the spoof, but ... why did gmail not detect the spoof?
2018-01-23T17:05:45 #rust-dev-tools <jonhoo> come to think of it, i don't know if i've ever seen them both at the same time
2018-01-23T17:06:16 #rust-dev-tools <killercup> Manishearth: i get an spf=softfail
2018-01-23T17:06:22 #rust-dev-tools <Manishearth> ah
2018-01-23T17:06:28 #rust-dev-tools <killercup> but yeah, not in gmails interface
2018-01-23T17:06:38 #rust-dev-tools <Manishearth> looks like gmail sucks at detecting spoofing from *google apps accounts*
2018-01-23T17:07:24 #rust-dev-tools <misdreavus> it's not just gmail, fastmail passed it off as legit too
2018-01-23T17:08:28 #rust-dev-tools <killercup> well done oli_obk_ i expect a "how i spoofed mails by accident" talk at the next def con
2018-01-23T17:09:46 #rust-dev-tools <oli_obk_> killercup: one word: claws
2018-01-23T17:16:04 #rust-dev-tools <Manishearth> lol
2018-01-23T17:36:21 #rust-dev-tools <oli_obk_> I sometimes wonder how many security holes are discovered by misconfiguration
2018-01-25T15:12:00 #rust-dev-tools <tatrix-M> @nrc hi! I'd like to somehow improve rls `goto def` as it's often doesn't work. What is the best way to start?
2018-01-25T15:45:06 #rust-dev-tools <killercup> tatrix-M: nick is at linux.conf.au so it may take a while for him to answer :) maybe xanewok is around and can help you?
2018-01-25T17:07:44 #rust-dev-tools <jonhoo> Manishearth: followed up on your post + e-mail on internals
2018-01-25T17:15:41 #rust-dev-tools <xanewok> tatrix-M: that’d be much appreciated! Do you mean goto stdlib specifically or in general?
2018-01-25T17:39:24 #rust-dev-tools <tatrix-M> In general
2018-01-25T17:40:29 #rust-dev-tools <tatrix-M> For situations like this: https://github.com/TatriX/realworld-rust-rocket/blob/master/src/main.rs#L54
2018-01-25T17:41:13 #rust-dev-tools <xanewok> so macros are one place where rls is a bit under developed
2018-01-25T17:42:06 #rust-dev-tools <xanewok> can’t recall what exactly happens for macros now, but I believe that macros are not appropriately expanded and the spans are not properly calculated
2018-01-25T17:42:10 #rust-dev-tools <tatrix-M> Well `routes::users::post_users` is a path to a simply function. It seems that it should be pretty easy to find it's defintion.
2018-01-25T17:42:19 #rust-dev-tools <Manishearth> jonhoo thanks
2018-01-25T17:42:25 #rust-dev-tools <xanewok> So the hovered span is not recognized as in what it’s expanded
2018-01-25T17:42:48 #rust-dev-tools <Manishearth> jonhoo: i basically realized some of the reasons behund decisions in my draft too late and tried to incorporate them again
2018-01-25T17:42:50 #rust-dev-tools <tatrix-M> I tried to call the function outside macros. Still can't find a def.
2018-01-25T17:43:23 #rust-dev-tools <xanewok> Hm, routes outside macro should be easily recognizable
2018-01-25T17:43:51 #rust-dev-tools <Manishearth> jonhoo: the dependenxies problem can be particularly hairy, libfuzzer is not a crate you want to include where unnecessary
2018-01-25T17:44:01 #rust-dev-tools <Manishearth> i should patch libFuzzer so thats not a problem
2018-01-25T17:44:05 #rust-dev-tools <xanewok> I wonder, does Rocket build succesfully with RLS? Does it show that the analysis is completed?
2018-01-25T17:44:33 #rust-dev-tools <tatrix-M> https://i.imgur.com/8MrJKCy.png
2018-01-25T17:44:40 #rust-dev-tools <tatrix-M> I can gotodef of `db::init_pool`
2018-01-25T17:44:52 #rust-dev-tools <tatrix-M> But not to the `routes::users::post_users`
2018-01-25T17:46:50 #rust-dev-tools <tatrix-M> Works fine from time to time: https://i.imgur.com/5I655DR.png
2018-01-25T17:47:45 #rust-dev-tools <xanewok> Can’t help much as I’m not by my PC
2018-01-25T17:48:27 #rust-dev-tools <xanewok> I assume path is created by the routes macro?
2018-01-25T17:48:27 #rust-dev-tools <tatrix-M> Sure no hurry. I just want to make experience better for me and hopefully others.
2018-01-25T17:48:37 #rust-dev-tools <xanewok> But yeah, that’s definitely sorely needed
2018-01-25T17:49:04 #rust-dev-tools <xanewok> As I said, I think that’s related to macro expansion  defs
2018-01-25T17:49:23 #rust-dev-tools <tatrix-M> `routes::users::post_users` is a simple function in a submodule. No macro envolved.
2018-01-25T17:49:40 #rust-dev-tools <xanewok> Ugh :(
2018-01-25T17:49:40 #rust-dev-tools <tatrix-M> Except rocket's annotations
2018-01-25T17:49:42 #rust-dev-tools <tatrix-M> #[post("/users", format = "application/json", data = "<new_user>")]
2018-01-25T17:49:43 #rust-dev-tools <tatrix-M> pub fn post_users(new_user: Json<NewUser>, conn: db::Conn) -> Result<Json<Value>, Errors> {
2018-01-25T17:50:44 #rust-dev-tools <Manishearth> jonhoo: btw, you have push access to my rfcs repo, feel free to just make changes directly
2018-01-25T17:50:53 #rust-dev-tools <Manishearth> im out of town till monday anyway
2018-01-25T17:51:48 #rust-dev-tools <tatrix-M> I wanted to debug it a bit, but rls from master doesn't compile with nightly-2018-01-14.
2018-01-25T17:52:24 #rust-dev-tools <tatrix-M> Probably I need 01-19?
2018-01-25T17:52:35 #rust-dev-tools <xanewok> Does it compile using newest nightly?
2018-01-25T17:52:53 #rust-dev-tools <xanewok> There was a change related to rls-rustc which broke the build
2018-01-25T17:53:15 #rust-dev-tools <xanewok> So you might try using newest nightly with 0.2 or 2.1 rls-russtc
2018-01-25T17:53:50 #rust-dev-tools <tatrix-M> Ok, I'll try tommorow. Probably need to read about `rustup override` ;)
2018-01-25T17:55:01 #rust-dev-tools <xanewok> Sorry that I can’t be of much help now
2018-01-25T17:55:37 #rust-dev-tools <xanewok> I’ll get back when I’m back by PC, if you don’t mind :)
2018-01-25T17:58:06 #rust-dev-tools <xanewok> but in general I wonder if that’s the case with proc macros due to annotatiob
2018-01-25T18:01:23 #rust-dev-tools <tatrix-M> Thanks!
2018-01-25T19:21:22 #rust-dev-tools <jonhoo> Manishearth: ah, I think I see the misunderstanding. I'm not saying *always* merge the dependencies. I'm saying that *when* you compile a particular context, *then* merge those deps. Which would mean you only include libfuzz when you're about to compile the fuzz context
2018-01-25T19:43:27 #rust-dev-tools <jonhoo> also posted a response
2018-01-25T20:47:27 #rust-dev-tools <fitzgen> Manishearth: from the new eRFC text, it isn't clear to me how compiletest would be able to use this; what am I missing?
2018-01-25T20:47:52 #rust-dev-tools <fitzgen> compiletest needs to be able to assert that something fails to compile with a specific error message, right?
2018-01-25T20:48:04 #rust-dev-tools <fitzgen> (or am I mixing up test harnesses?)
2018-01-25T20:56:14 #rust-dev-tools <jonhoo> fitzgen: what change do you think makes it now impossible?
2018-01-25T20:56:24 #rust-dev-tools <jonhoo> if you think it was possible with previous proposals
2018-01-25T21:00:03 #rust-dev-tools <fitzgen> jonhoo: its not clear to me it was possible in previous proposals either. its also not clear to me that it _isn't_ possible now, it just isn't clear to me, despite the fact that its called out as something should be enabled by this
2018-01-25T21:00:58 #rust-dev-tools <fitzgen> if the source isn't supposed to compile, and we are adding append-only tokens, then I don't see how concat(not-supposed-to-compile, new-tokens) is supposed to compile
2018-01-25T21:01:46 #rust-dev-tools <fitzgen> (aside: we aren't meeting right now, right? the meeting earlier this week was the replacement for today, yes?)
2018-01-25T21:02:34 #rust-dev-tools <misdreavus> that was my assumption, yeah
2018-01-25T21:04:19 #rust-dev-tools <jonhoo> fitzgen: yeah, i think you're right. i mostly asked because it seemed as though you thought something was different about this proposal in that regard.
2018-01-25T21:04:38 #rust-dev-tools <jonhoo> we *could* go back to a &mut [TokenStream]
2018-01-25T21:04:43 #rust-dev-tools <jonhoo> which I think would solve this problem
2018-01-25T21:04:55 #rust-dev-tools <jonhoo> but it also makes the interface much much more powerful
2018-01-25T21:05:08 #rust-dev-tools <jonhoo> and makes the compilation story more complicated
2018-01-25T21:05:38 #rust-dev-tools <jonhoo> another alternative would be to allow the main to "disable" some of its given TokenStreams, but that also seems pretty hacky
2018-01-25T21:06:05 #rust-dev-tools <fitzgen> jonhoo: yeah, not some new change, just something I noticed; FWIW, I think it is also OK to experiment without supporting compiletest in this way for now, and let us try to work around the issue and see how big of a constraint it is in practice
2018-01-25T21:06:12 #rust-dev-tools <jonhoo> yup
2018-01-25T21:07:03 #rust-dev-tools <jonhoo> one way we could possibly circumvent this is to have, say #[compiletest] be a proc macro that wraps the given code in some kind of macro
2018-01-25T21:07:17 #rust-dev-tools <jonhoo> and then have that macro be defined by the appended TokenStream
2018-01-25T21:07:36 #rust-dev-tools <jonhoo> except that this violates the assumption that all macros are expanded before the context function is run
2018-01-25T21:07:48 #rust-dev-tools <jonhoo> hmm
2018-01-25T21:08:11 #rust-dev-tools <fitzgen> and writes the not-supposed-to-compile source to an external file, and gives the test harness the path somehow?
2018-01-25T21:08:23 #rust-dev-tools <jonhoo> or that, yeah
2018-01-25T21:08:41 #rust-dev-tools <jonhoo> in fact, yes, that could work pretty nicely
2018-01-25T21:08:54 #rust-dev-tools <fitzgen> I feel like once we have an actual API in hand, we can make some kind of hack like this that makes it work
2018-01-25T21:09:19 #rust-dev-tools <jonhoo> the proc macro for #[compiletest] writes the contents to a file and replaces it with a path to the file with whatever attribute the compiletest context looks for
2018-01-25T21:09:26 #rust-dev-tools <jonhoo> I agree
2018-01-25T21:09:37 #rust-dev-tools <fitzgen> jonhoo: exactly
2018-01-25T21:10:04 #rust-dev-tools <jonhoo> fitzgen: did you also see the follow-up discussion on internals.r-l.o?
2018-01-25T21:10:07 #rust-dev-tools <jonhoo> starting at https://internals.rust-lang.org/t/past-present-and-future-for-rust-testing/6354/98
2018-01-25T21:11:48 #rust-dev-tools <fitzgen> jonhoo: I skimmed it; re the no_main stuff, I'm really not that familiar; re dependencies, it seems like you two were initially talking past each other but are starting to come to an understanding -- or am I misinterpreting that?
2018-01-25T21:12:18 #rust-dev-tools <jonhoo> i *think* that's the case
2018-01-25T21:12:30 #rust-dev-tools <jonhoo> but i could also totally be misunderstanding Manishearth's objection
2018-01-25T21:12:59 #rust-dev-tools <jonhoo> it seems to me like it should be fine to use the context crate's `dependencies` when it is being compiled in a crate-under-test
2018-01-25T21:14:11 #rust-dev-tools <fitzgen> what new classes of dependencies exist under this erfc?
2018-01-25T21:14:28 #rust-dev-tools <jonhoo> so, i don't believe we need any new classes
2018-01-25T21:14:37 #rust-dev-tools <fitzgen> 1. the crate to do the test/harness expansion
2018-01-25T21:15:01 #rust-dev-tools <jonhoo> specifically, in the crate-under-test, you have deps and dev-deps as usual
2018-01-25T21:15:09 #rust-dev-tools <fitzgen> 2. crates that the expander emits uses of
2018-01-25T21:15:24 #rust-dev-tools <jonhoo> in the context crate, you also have dev-deps + deps
2018-01-25T21:15:46 #rust-dev-tools <fitzgen> "context crate" = expander proc macro, right?
2018-01-25T21:15:49 #rust-dev-tools <jonhoo> yes
2018-01-25T21:15:54 #rust-dev-tools <fitzgen> cool
2018-01-25T21:15:58 #rust-dev-tools <jonhoo> the crate that defines the proc macro
2018-01-25T21:16:25 #rust-dev-tools <jonhoo> when compiling the CUT for a given context
2018-01-25T21:16:34 #rust-dev-tools <fitzgen> and you are advocating that 1 and 2 should be the same as the context crate's `dependencies`?
2018-01-25T21:16:49 #rust-dev-tools <jonhoo> you use the crate's deps + dev-deps + context deps + dev-deps
2018-01-25T21:17:12 #rust-dev-tools <jonhoo> actually, you may not even need the context's dev-deps
2018-01-25T21:18:21 #rust-dev-tools <fitzgen> so, for example, if the context expander depends on `rayon`, then it can emit code for the crate-under-test that uses `rayon`?
2018-01-25T21:18:30 #rust-dev-tools <jonhoo> yes
2018-01-25T21:19:42 #rust-dev-tools <jonhoo> now, there is *some* waste here if the context crate defines multiple contexts that have *different* deps, but i think we can just use their union and not worry too much about it
2018-01-25T21:19:59 #rust-dev-tools <fitzgen> how do you reconcile an context expander crate that uses `std` emitting code for a no_std crate-under-test? we wouldn't want to link `std`-y things into the crate-under-test code in this situation
2018-01-25T21:20:26 #rust-dev-tools <fitzgen> this is a situation where I think taking the union of deps won't work
2018-01-25T21:20:44 #rust-dev-tools <jonhoo> i think a no_std CUT can only use contexts that are themselves CUT
2018-01-25T21:20:59 #rust-dev-tools <jonhoo> s/last CUT/no_std
2018-01-25T21:21:13 #rust-dev-tools <fitzgen> that seems a bit restrictive to me
2018-01-25T21:21:54 #rust-dev-tools <fitzgen> imagine I'm doing embedded dev (or even wasm): I'm generating tests on my host, but the tests are targeting bare metal (or wasm on the web or ...)
2018-01-25T21:22:08 #rust-dev-tools <jonhoo> oh, i see what you mean
2018-01-25T21:22:31 #rust-dev-tools <jonhoo> yeah, actually, that seems fine then
2018-01-25T21:22:54 #rust-dev-tools <jonhoo> so std would always be allowed as long as it's okay to compile the CUT with std
2018-01-25T21:23:32 #rust-dev-tools <fitzgen> the context expander would always be compiled for the host, but had to emit code that would work with whatever the target is
2018-01-25T21:23:39 #rust-dev-tools <fitzgen> I think this is the same as what build.rs does
2018-01-25T21:24:26 #rust-dev-tools <jonhoo> hmm
2018-01-25T21:24:58 #rust-dev-tools <jonhoo> yes, i think that's true
2018-01-25T21:25:00 #rust-dev-tools <fitzgen> re "std always be allowed [in the context expander]": I'm imagining it would just be orthogonal from the CUT's std-ness, it could be the same or different; it's the crate's decision
2018-01-25T21:25:26 #rust-dev-tools <jonhoo> well, only sort of. a CUT with no_std would need to use a context that expands to something that is no_std
2018-01-25T21:25:28 #rust-dev-tools <jonhoo> right?
2018-01-25T21:25:46 #rust-dev-tools <jonhoo> the expander *itself* doesn't need to be no_std
2018-01-25T21:25:51 #rust-dev-tools <fitzgen> jonhoo: yeah, I'm not talking about the emitted code, I'm talking about the expander
2018-01-25T21:25:55 #rust-dev-tools <jonhoo> right
2018-01-25T21:26:11 #rust-dev-tools <fitzgen> the expander has to emit code that is compatible with the CUT
2018-01-25T21:26:14 #rust-dev-tools <jonhoo> yup
2018-01-25T21:26:39 #rust-dev-tools <jonhoo> may be worth mentioning this in the eRFC somewhere
2018-01-25T21:26:42 #rust-dev-tools <fitzgen> so ultimately, I think we want to introduce new categories of dependencies for (1) and (2)
2018-01-25T21:26:57 #rust-dev-tools <fitzgen> so we can be more precise about the particulars of these relationships
2018-01-25T21:27:02 #rust-dev-tools <jonhoo> hmm
2018-01-25T21:27:25 #rust-dev-tools <jonhoo> as in, one set of deps for the expander, and one set for the emitted code
2018-01-25T21:27:59 #rust-dev-tools <jonhoo> do we think that it is likely that there are major deps of the expander that will *not* be used in the emitted code?
2018-01-25T21:28:12 #rust-dev-tools <fitzgen> I was imagining a dep for "this crate expands this context" and then that expander crate can have whatever normal deps that it uses, and we will now transitively use
2018-01-25T21:28:38 #rust-dev-tools <jonhoo> (and i guess the dev-deps of the context crate are for the tests or examples of the context crate itself, so that can't be overloaded to serve this purpose)
2018-01-25T21:29:01 #rust-dev-tools <fitzgen> and then another category for "these crates are only used in emitted code when compiling for this context"
2018-01-25T21:29:24 #rust-dev-tools <jonhoo> i guess my question is whether we expect them to be very different
2018-01-25T21:29:40 #rust-dev-tools <jonhoo> or specifically, if we expect the expander to have some large deps that will not be in the emitted code
2018-01-25T21:29:43 #rust-dev-tools <fitzgen> dev-deps vs (1) or dev-deps vs (2) ?
2018-01-25T21:30:14 #rust-dev-tools <jonhoo> dev-deps for 1
2018-01-25T21:30:21 #rust-dev-tools <jonhoo> i think if i read your (1) correctly
2018-01-25T21:30:55 #rust-dev-tools <fitzgen> (1) which crate expands a given context, (2) crates used in expander's emitted code
2018-01-25T21:31:04 #rust-dev-tools <jonhoo> yes, 1
2018-01-25T21:31:19 #rust-dev-tools <fitzgen> I guess maybe it makes sense to have the expander crate list the crates that it emits uses of?
2018-01-25T21:31:33 #rust-dev-tools <jonhoo> yes, i think that's necessary
2018-01-25T21:31:38 #rust-dev-tools <jonhoo> and that should be its deps i think
2018-01-25T21:31:40 #rust-dev-tools <fitzgen> and then all a user of a custom context would have to do is specify (1)
2018-01-25T21:31:57 #rust-dev-tools <jonhoo> or *perhaps* have some third section like [emitted-deps]
2018-01-25T21:32:07 #rust-dev-tools <jonhoo> which i think is what Manishearth wants
2018-01-25T21:32:35 #rust-dev-tools <fitzgen> re "and that should be its deps", I'm not convinced; I'm leaning for a new section like `[emitted-dependencies]`, as you say
2018-01-25T21:33:11 #rust-dev-tools <jonhoo> as in, context crate defines three sets of deps: A) what the emitted code depends on, B) what the expander depends on, and C) deps for running the tests and examples of the context crate itself (e.g., dev-deps)
2018-01-25T21:33:56 #rust-dev-tools <jonhoo> my question is whether there's a good reason for separating A and B. i personally suspect that in general A will be a superset of B
2018-01-25T21:34:08 #rust-dev-tools <jonhoo> in which case we basically just need B
2018-01-25T21:34:14 #rust-dev-tools <jonhoo> sorry, A
2018-01-25T21:34:24 #rust-dev-tools <jonhoo> in which case A can just be deps
2018-01-25T21:34:48 #rust-dev-tools <jonhoo> but I agree that if we wanted to be completely precise, we'd need sections for A, B, and C
2018-01-25T21:36:59 #rust-dev-tools <fitzgen> jonhoo: the way I see it, there isn't necessarily a single context crate: there is a context expander and (optionally) a context runtime. This is similar to how `lalrpop` has the build-time parser generater, and then the runtime `lalrpop_utils` that the parser generator's emitted code makes use of
2018-01-25T21:37:50 #rust-dev-tools <jonhoo> and you would specifically object to the runtime being listed as a dependency of the generator
2018-01-25T21:37:57 #rust-dev-tools <fitzgen> the runtime is optional, because the context expander could opt not to de-duplicate code into runtime functions, and instead emit it inline
2018-01-25T21:38:57 #rust-dev-tools <fitzgen> jonhoo: yes; the expander doesn't depend on the runtime
2018-01-25T21:39:00 #rust-dev-tools <jonhoo> so it could be listed as an optional dep of the context crate?
2018-01-25T21:39:22 #rust-dev-tools <jonhoo> no no, i realize, but i'm proposing we still list it as one to avoid introducing another dependency section
2018-01-25T21:39:44 #rust-dev-tools <fitzgen> I understand that, and I disagree :)
2018-01-25T21:40:21 #rust-dev-tools <fitzgen> I don't think that introducing a new dependency section for a new kind of dependency is particularly bad :)
2018-01-25T21:40:28 #rust-dev-tools <jonhoo> okay, fair enough
2018-01-25T21:40:35 #rust-dev-tools <jonhoo> that's basically what i wanted to get to
2018-01-25T21:40:54 #rust-dev-tools <jonhoo> essentially evaluating the cost of a new section vs the cost of listing an "extra" dependency or two
2018-01-25T21:41:18 #rust-dev-tools <jonhoo> i'm not convinced that the latter is that bad, and i think a new section is a little unfortunate
2018-01-25T21:41:24 #rust-dev-tools <jonhoo> but i don't feel super strongly about it
2018-01-25T21:41:38 #rust-dev-tools <jonhoo> so given that both you and Manishearth seem to favor a new section, that's what we should do
2018-01-25T21:42:36 #rust-dev-tools <jonhoo> can you write that up as a response on the thread?
2018-01-25T21:42:39 #rust-dev-tools <jonhoo> or i can do it i guess
2018-01-25T21:42:46 #rust-dev-tools <jonhoo> (looks like you're already writing.. :p)
2018-01-25T21:43:37 #rust-dev-tools <fitzgen> jonhoo: yeah, writing now
2018-01-25T21:43:56 #rust-dev-tools <jonhoo> fitzgen++
2018-01-25T22:08:10 #rust-dev-tools <fitzgen> jonhoo: https://internals.rust-lang.org/t/past-present-and-future-for-rust-testing/6354/101?u=fitzgen
2018-01-25T22:13:51 #rust-dev-tools <jonhoo> looks good
2018-01-25T23:24:58 #rust-dev-tools <Manishearth> fitzgen: the current iteration doesnt solve compiletest or solve fuzzing completely
2018-01-25T23:25:25 #rust-dev-tools <Manishearth> fitzgen: compiletrst was an aspirational goal.
2018-01-25T23:25:48 #rust-dev-tools <fitzgen> Manishearth: what do you think of the hack that I described in my i.r-l.o post?
2018-01-25T23:28:47 #rust-dev-tools <Manishearth> fitzgen: doesnt seem to help anything since it doesnt aid us using the right flags for compilation
2018-01-25T23:29:02 #rust-dev-tools <Manishearth> i.e. its not much better than what we currently do
2018-01-25T23:29:59 #rust-dev-tools <Manishearth> fitzgen: well, it is partly an improvement bc you can now have multiple targets
2018-01-25T23:30:04 #rust-dev-tools <Manishearth> so yeah i guess its fine
2018-01-26T01:44:01 #rust-dev-tools <jonhoo> Manishearth: now that i think we're mostly in agreement on things, lmk when you've made the last few updates and i'll take a full read through again top-to-bottom
2018-01-26T01:44:52 #rust-dev-tools <jonhoo> alternatively i can try making those changes if you're too busy, but i feel like you have a clearer idea of exactly the motivation for them
2018-01-26T01:45:12 #rust-dev-tools <jonhoo> (i responded in-thread again btw -- mostly agreement + "seems fine")
2018-01-26T01:46:34 #rust-dev-tools <Manishearth> jonhoo wont be able to edit till monday (sunday for yoy)
2018-01-26T01:47:02 #rust-dev-tools <Manishearth> jonhoo: feel free to add the folders back, fix the attributes thing, and only-single-crate
2018-01-26T01:47:34 #rust-dev-tools <Manishearth> i also want to add no_main as an unresolved question, as well as mntion compiletest
2018-01-26T01:48:51 #rust-dev-tools <jonhoo> i think it makes sense to add no_main either to Cargo.toml of the build context crate (if we expect it to impact all contexts or none), or as another part of the attribute if not
2018-01-26T01:49:27 #rust-dev-tools <jonhoo> also s/post build context/build context/ ?
2018-01-26T01:50:09 #rust-dev-tools <jonhoo> ah, just saw your response
2018-01-26T01:50:21 #rust-dev-tools <jonhoo> yeah, unresolved then seems fine
2018-01-26T02:05:45 #rust-dev-tools <jonhoo> hmm, how do we enforce `single-target`? what does it mean? just one file? just one annotated item?
2018-01-26T02:05:54 #rust-dev-tools <jonhoo> neither of those seem sufficient
2018-01-26T02:15:49 #rust-dev-tools <jonhoo> Manishearth: i also don't understand why "custom test targets" are necessary? can't we just declare that [[test]] entries are automatically run with the context set `test`, and same for bench/example?
2018-01-26T02:34:44 #rust-dev-tools <jonhoo> Manishearth: pushed the changes now
2018-01-26T02:36:09 #rust-dev-tools <jonhoo> specifically https://github.com/Manishearth/rfcs/commit/3f4425ec5f33438dbea9140538b7213634cc507b
2018-01-26T03:15:12 #rust-dev-tools <Manishearth> jonhoo single-target means you *must* specify a --test flag
2018-01-26T03:15:24 #rust-dev-tools <Manishearth> or, well, whatever we decide that flag is
2018-01-26T03:17:29 #rust-dev-tools <Manishearth> jonhoo: we have [[test]] [[bench]] and [[example]], this gives you the same functionality for [[fuzz]]
2018-01-26T03:17:35 #rust-dev-tools <Manishearth> or whatever
2018-01-26T03:17:54 #rust-dev-tools <Manishearth> i want to avoid as much special casing as possible for test and bench
2018-01-26T03:19:09 #rust-dev-tools <Manishearth> not strictlybnecessary though
2018-01-26T07:23:57 #rust-dev-tools <jonhoo> yeah, it's more that i wanted to avoid specifying extra features
2018-01-26T07:24:05 #rust-dev-tools <jonhoo> whereas compatibility with existing ones seems more fine
2018-01-26T07:24:45 #rust-dev-tools <jonhoo> we'd have to figure out what --target/whatever is called, but also what it does. exact match on name? how do you guarantee you only match one?
2018-01-26T07:37:58 #rust-dev-tools <tatrix-M> When `rustup update` will be able to download today's snapshots? There is a fix for rls in master, but rutsup only sees yesterday's version.
2018-01-26T17:02:28 #rust-dev-tools <gilnaa> Hey, was it discussed to separate benchmarks from tests (code-wise) with the build contexts?
2018-01-26T17:02:53 #rust-dev-tools <gilnaa> I'm not sure why they're together at all.
2018-01-26T17:03:41 #rust-dev-tools <gilnaa> The only thing I can think of is that libtest can convert #[bench] into #[test] when running tests, but from light reading of the erfc I'm pretty sure this can be supported under build contexts
2018-01-26T17:04:02 #rust-dev-tools <gilnaa> i.e. libtest's build context will specify it wants both #[test] and #[bence]
2018-01-26T18:24:43 #rust-dev-tools <jonhoo> gilnaa: I'm not entirely sure what you mean?
2018-01-26T18:25:00 #rust-dev-tools <jonhoo> Build contexts don't actually mandate tests and benchmarks to be provided by the same crate
2018-01-26T18:25:04 #rust-dev-tools <jonhoo> Or by different crates
2018-01-26T18:25:29 #rust-dev-tools <jonhoo> We believe we'll probably want to provide a default build context for test and bench with rustup, but that's all
2018-01-26T18:25:57 #rust-dev-tools <gilnaa> Oh, I'll elaborate
2018-01-26T18:26:03 #rust-dev-tools <jonhoo> They could totally be provided by separate crates
2018-01-26T18:26:05 #rust-dev-tools <gilnaa> This is just the case *currently*
2018-01-26T18:26:23 #rust-dev-tools <jonhoo> even though the eRFC currently specifies that their by default both set to libtest
2018-01-26T18:26:34 #rust-dev-tools <jonhoo> i think that's a detail that could easily be changed during implementation
2018-01-26T18:26:55 #rust-dev-tools <gilnaa> I just want to suggest to separate them, unrelated to the contexts
2018-01-26T18:27:46 #rust-dev-tools <gilnaa> It'll make it easier to maintain them, and it might be beneficial to @killercup 's generic test output formats
2018-01-26T18:27:57 #rust-dev-tools <gilnaa> Ahhhh, forgot @ don't work in irc
2018-01-26T18:28:07 #rust-dev-tools <jonhoo> ah, i see what you mean
2018-01-26T18:28:20 #rust-dev-tools <jonhoo> yeah, i think i agree with you that it'd be better to separate them
2018-01-26T18:28:29 #rust-dev-tools <jonhoo> not sure it matters for test output formatters though
2018-01-26T18:28:45 #rust-dev-tools <jonhoo> you'd just have libtest's test runner use the formatter, but not the bench context
2018-01-26T19:36:05 #rust-dev-tools <killercup> gilnaa: @username totally works in most clients, but the @ is optional ;)
2018-01-26T19:36:41 #rust-dev-tools <gilnaa> About why it would help: in retrospect it's irrelevant 
2018-01-26T19:36:52 #rust-dev-tools <steveklabnik> it in fact doesn't work for me if you include it, heh
2018-01-26T19:37:59 #rust-dev-tools <gilnaa> macro_rules! mention { ($name:ident) => { @$name, $name:, $name }
2018-01-26T19:38:21 #rust-dev-tools <killercup> !mention gilnaa 
2018-01-26T19:38:57 #rust-dev-tools <gilnaa> Is it possible to learn this power?
2018-01-26T19:39:20 #rust-dev-tools <killercup> !learn mention = In, IRC you usually just write the username without a leading @ symbol
2018-01-26T19:39:20 #rust-dev-tools <rustbot> Learned factoid 'mention'.
2018-01-26T19:39:23 #rust-dev-tools <killercup> !mention gilnaa 
2018-01-26T19:39:31 #rust-dev-tools <killercup> !mention
2018-01-26T19:39:31 #rust-dev-tools <rustbot> In, IRC you usually just write the username without a leading @ symbol
2018-01-26T19:39:44 #rust-dev-tools <killercup> close enough
2018-01-26T19:39:52 #rust-dev-tools <gilnaa> Dang
2018-01-26T19:49:59 #rust-dev-tools <misdreavus> !mention @ killercup 
2018-01-26T19:49:59 #rust-dev-tools <rustbot> killercup: In, IRC you usually just write the username without a leading @ symbol
2018-01-26T19:50:44 #rust-dev-tools <misdreavus> !learn mention ~= s/In, IRC/In IRC,/
2018-01-26T19:50:44 #rust-dev-tools <rustbot> Successfully did replacement on 'mention'.
2018-01-26T19:50:54 #rust-dev-tools <killercup> misdreavus: did you mean
2018-01-26T19:50:54 #rust-dev-tools <killercup> > <rustbot>	killercup: In, rustbot you write `!<cmd> @ <username>`
2018-01-26T19:50:59 #rust-dev-tools <misdreavus> lol
2018-01-26T19:51:22 #rust-dev-tools <killercup> `s/In, rustbot/In rustbot,` there as well
2018-01-26T20:02:05 #rust-dev-tools <gilnaa> !learn learnthispower = Error: not from a Jedi
2018-01-26T20:02:05 #rust-dev-tools <rustbot> Learned factoid 'learnthispower'.
2018-01-26T20:02:38 #rust-dev-tools <gilnaa> !learnthispower
2018-01-26T20:02:38 #rust-dev-tools <rustbot> Error: not from a Jedi
2018-01-26T20:03:21 #rust-dev-tools <killercup> !learn learnthispower += . Try again with `sudo learnthispower`
2018-01-26T20:03:21 #rust-dev-tools <rustbot> Successfully did replacement on 'learnthispower'.
2018-01-26T20:03:23 #rust-dev-tools <killercup> :P
2018-01-26T20:03:28 #rust-dev-tools <killercup> !learnthispower
2018-01-26T20:03:28 #rust-dev-tools <rustbot> Error: not from a Jedi . Try again with `sudo learnthispower`
2018-01-26T20:03:52 #rust-dev-tools <killercup> !learn learnthispower ~= s/Jedi . Try/Jedi. Try
2018-01-26T20:03:52 #rust-dev-tools <rustbot> Invalid replacement format. See !help learn replace for format.
2018-01-26T20:03:53 #rust-dev-tools <killercup> !learnthispower
2018-01-26T20:03:53 #rust-dev-tools <rustbot> Error: not from a Jedi . Try again with `sudo learnthispower`
2018-01-26T20:04:01 #rust-dev-tools <killercup> !learn learnthispower ~= s/Jedi . Try/Jedi. Try/
2018-01-26T20:04:01 #rust-dev-tools <rustbot> Successfully did replacement on 'learnthispower'.
2018-01-26T20:04:03 #rust-dev-tools <killercup> !learnthispower
2018-01-26T20:04:03 #rust-dev-tools <rustbot> Error: not from a Jedi. Try again with `sudo learnthispower`
2018-01-26T20:10:34 #rust-dev-tools <gilnaa> su sith -c learnthispower
2018-01-26T22:13:19 #rust-dev-tools <hdevalence> Does anyone know why Rustdoc produces some code snippets as <pre> <code class="..."> and other code snippets as <pre class="rust rust-example-rendered">?
2018-01-26T22:15:18 #rust-dev-tools <killercup> hdevalence: what's the source? ``` vs ```rust maybe?
2018-01-26T22:15:26 #rust-dev-tools <hdevalence> yep
2018-01-26T22:16:03 #rust-dev-tools <hdevalence> so the problem is that (IMO) the size of the monospace font is too large
2018-01-26T22:16:55 #rust-dev-tools <hdevalence> I would rather it have the same x-height as the body text, so I added .docblock code, .dockblock-short code { font-size: 0.85em !important; }
2018-01-26T22:17:19 #rust-dev-tools <hdevalence> but I guess that's not all of CSS classes that contain code samples?
2018-01-26T22:18:42 #rust-dev-tools <killercup> hdevalence: hm, no idea what the rationale behind this is. but misdreavus and imperio might know
2018-01-26T22:19:24 #rust-dev-tools <misdreavus> huh, that's strange
2018-01-26T22:31:23 #rust-dev-tools <hdevalence> I added a pre.rust filter and it seems to catch everything else
2018-01-26T22:33:57 #rust-dev-tools <misdreavus> okay yeah, .docblock and .docblock-short will only get things manually written into docs
2018-01-26T22:34:16 #rust-dev-tools <misdreavus> e.g. the struct/enum/trait/etc renderings at the top of the pages are not in docblocks
2018-01-26T22:35:17 #rust-dev-tools <misdreavus> also iirc <pre> is for the big blocks, and <code> is for the spans inside other paragraphs, but i could be wrong there
2018-01-26T22:38:03 #rust-dev-tools <misdreavus> if you want to grab everything that gets that font, there's a rule for `code, pre` universally
2018-01-26T22:38:07 #rust-dev-tools <misdreavus> where that font is applied
2018-01-26T22:54:29 #rust-dev-tools <xanewok> nrc: fyi I'll have exams now, so won't be able to focus on the RLS during next following weeks :(
2018-01-26T22:55:20 #rust-dev-tools <xanewok> nrc: also, do we plan allow macOS Travis CI jobs to fail? They take ages and their backlog is either full or really lagging behind
2018-01-26T22:55:39 #rust-dev-tools <xanewok> https://github.com/rust-lang-nursery/rls/issues/675
2018-01-27T00:06:52 #rust-dev-tools <hdevalence> misdreavus: there's some quirk where stuff in other languages will get turned into a code block while rust code will get turned into a pre block
2018-01-27T18:00:48 #rust-dev-tools <conscio-M> Hello! How can I see RLS output in vscode? There used to be output channel, but after update it's gone. If I try to use rust-client.logToFile option resulting file is always empty. How can I analyze the problem now?
2018-01-27T18:00:48 #rust-dev-tools <conscio-M> The thing is that plugin works, but for one exact project it just silently stops working. 
2018-01-27T18:03:56 #rust-dev-tools <xanewok> Julian: try running code with RUST_LOG="rls=trace" env
2018-01-27T18:04:08 #rust-dev-tools <xanewok> the output should be available in the Output > Rust Language Server tab window
2018-01-27T18:07:22 #rust-dev-tools <conscio-M> xanewok: this helps, thanks!
2018-01-27T21:23:14 #rust-dev-tools <conscio-M> So I've found nothing of interest in output of RLS, it just returns empty jsons when vscode asks for stuff. Any way I can find cause of it? Maybe there is a limit to lines of code count? Project with 30k lines work ok, but 41k lines doesnt. The project I'm trying to use RLS with is https://github.com/paritytech/parity-bitcoin
2018-01-28T09:38:33 #rust-dev-tools <algesten> nrc: i assume you just been too snowed under to think anymore about this, right? https://github.com/rust-lang/rust/pull/47657 
2018-01-28T09:38:33 #rust-dev-tools <algesten> or is it me, you hate my code? :) 
2018-01-28T18:12:11 #rust-dev-tools <xanewok> Julian: interesting - could you try setting `"workspace_mode": false` and see if that helps?
2018-01-28T18:13:05 #rust-dev-tools <xanewok> I wonder if cargo build in this case, where all packages are not explicitly listed as members, are checked (here pbtc is the actual package/binary we're interested in)
2018-01-28T19:58:50 #rust-dev-tools <conscio-M> xanewok: yeah, it appears I've tried to navigate not the main project and it didn't work. Now, when without workspace mode RLS works only for pbtc project. But with workspace mode I get support for other projects in folder as well. So, thank you! What is the good way to include subprojects so they will be properly handled even without workspace mode?
2018-01-28T20:00:18 #rust-dev-tools <xanewok> Currently RLS offloads project discovery completely to Cargo
2018-01-28T20:00:30 #rust-dev-tools <xanewok> and we don't support custom project hierarchy/layout at the moment
2018-01-28T20:00:46 #rust-dev-tools <xanewok> so that depends on how you will lay out your subprojects
2018-01-28T20:01:06 #rust-dev-tools <xanewok> but I'm interested to which use cases we're missing
2018-01-28T20:01:17 #rust-dev-tools <xanewok> what project structure do you have in mind?
2018-01-28T20:15:19 #rust-dev-tools <conscio-M> I actually quite like structure of parity, where every folders has separate Cargo.toml and they are wired using "dependencies" section. It seems like Servo does the same thing.
2018-01-28T20:16:29 #rust-dev-tools <xanewok> Julian: you can open VSCode inside a folder containing Cargo.toml and it should probably work as expected
2018-01-28T20:17:26 #rust-dev-tools <xanewok> one way to get analysis for every package inside a certain master directory/repository would be to include a Cargo.toml that includes a workspace with member packages pointing to every subpackage
2018-01-28T20:18:16 #rust-dev-tools <xanewok> (if you find yourself modifying multiple packages at once)
2018-01-28T20:19:06 #rust-dev-tools <xanewok> but yeah, we definitely need to improve our story of supporting different project layouts - Servo also comes to mind
2018-01-28T20:21:07 #rust-dev-tools <conscio-M> there are two sections in Cargo.toml. [dependencies] and [workspace], should I add my subprojects to workspace section to be detected by RLS? Because in parity they are in dependencies section only. Will this workspace_mode be true by default sometime in the future?
2018-01-28T20:21:59 #rust-dev-tools <xanewok> so I'm not sure if nesting workspaces inside a workspace work now
2018-01-28T20:22:15 #rust-dev-tools <xanewok> workspace_mode should be enabled by default now and we plan to improve the support
2018-01-28T20:23:07 #rust-dev-tools <xanewok> so iirc the dependencies outside the workspace should be analyzed, but not rebuilt when changed
2018-01-28T20:23:11 #rust-dev-tools <xanewok> so if you don't modify them, you shouldn't need to do anything
2018-01-28T20:23:57 #rust-dev-tools <xanewok> but if you do modify them, I'd try including them as member packages under [workspace] - this should allow RLS to pick them up and rebuild them whenever modified
2018-01-28T20:36:20 #rust-dev-tools <nrc> algesten: sorry, I was at a conference all last week
2018-01-28T20:36:28 #rust-dev-tools <nrc> will get back on it
2018-01-28T20:39:14 #rust-dev-tools <algesten> nrc: yeah i figured. saw some talk you did. i learned to use more traits :P ... no rush!
2018-01-29T15:37:32 #rust-dev-tools <phansch> is there some way to get a Span for a specific line number? Or to convert a CharPos to a BytePos?
2018-01-29T15:42:58 #rust-dev-tools <misdreavus> phansch: iirc, the CodeMap can do that
2018-01-29T15:46:54 #rust-dev-tools <misdreavus> phansch: yeah, CodeMap::lookup_char_pos https://michael-f-bryan.github.io/rustc-internal-docs/syntax/codemap/struct.CodeMap.html#method.lookup_char_pos
2018-01-29T15:48:00 #rust-dev-tools <phansch> I would need it the other way around though :s
2018-01-29T15:48:21 #rust-dev-tools <misdreavus> oh, whoops
2018-01-29T15:48:22 #rust-dev-tools <phansch> I also just saw that the docs I was using were not up to date, so I will have a look again :)
2018-01-29T22:21:44 #rust-dev-tools <mib_xyapt6> has anyone had any luck getting code coverage in Rust?
2018-01-29T23:16:01 #rust-dev-tools <woboats> I'm trying to use rust-semverver and I'm getting an error about loading the librustc_driver .so
2018-01-29T23:16:12 #rust-dev-tools <woboats> I've never used the rls or clippy or anything, what step am I missing?
2018-01-30T08:10:16 #rust-dev-tools <oli_obk_> woboats: wrong nightly?
2018-01-30T08:11:37 #rust-dev-tools <woboats> oli_obk_: It can't find librustc_driver.so at all
2018-01-30T08:16:27 #rust-dev-tools <oli_obk_> woboats: if there's a version mismatch it won't find it
2018-01-30T08:17:11 #rust-dev-tools <oli_obk_> if you installed rust-semverver and then update your nightly, you'll get errors about missing librustc_driver
2018-01-30T10:22:44 #rust-dev-tools <phansch> hmm, does anyone know of a tool that reads the suggestions from clippy/rust lints and then creates a PR review with comments on every line that break a lint? I know it exists for other languages but have never seen it for Rust 
2018-01-30T10:23:08 #rust-dev-tools <Manishearth> phansch: rustfix will fix your code with the suggestions
2018-01-30T10:23:14 #rust-dev-tools <Manishearth> github.com/killercup/rustfix
2018-01-30T10:23:27 #rust-dev-tools <Manishearth> It won't open PR's, but close enough
2018-01-30T10:23:50 #rust-dev-tools <Manishearth> i don't think the "PR with review comments" tool exists for any language, but happy to see such a thing if it does
2018-01-30T10:26:07 #rust-dev-tools <oli_obk_> That would be a great idea for a github bot :D
2018-01-30T10:26:29 #rust-dev-tools <phansch> Manisearth: I guess rustfix comes close. I was thinking of something like this for ruby: https://github.com/houndci/hound/pull/1459#discussion_r148921616 (https://houndci.com)
2018-01-30T10:27:04 #rust-dev-tools <phansch> yup, a GitHub bot :)
2018-01-30T10:27:12 #rust-dev-tools <Manishearth> oh, like that
2018-01-30T10:27:22 #rust-dev-tools <oli_obk_> ah, I thought of something different, too
2018-01-30T10:27:28 #rust-dev-tools <oli_obk_> so an open PR is autocommented
2018-01-30T10:27:28 #rust-dev-tools <Manishearth> sounds something that can be done once clippy is mature
2018-01-30T10:29:24 #rust-dev-tools <Manishearth> yeah
2018-01-30T10:29:30 #rust-dev-tools <Manishearth> this could be built out of clippy
2018-01-30T11:07:48 #rust-dev-tools <booyaa[> where's best place to get help for the official docker rust images?
2018-01-30T15:03:20 #rust-dev-tools <sfackler> booyaa[: what problem are you having?
2018-01-30T16:17:45 #rust-dev-tools <booyaa[> sfackler: pebkac, rust <> rustlang/rust was trying to pull down the nightly image. all sorted thanks!
2018-01-31T15:29:10 #rust-dev-tools <nox> Manishearth, steveklabnik: I WANT THEM BORROW ARROWS
2018-01-31T15:29:54 #rust-dev-tools <steveklabnik> yeah that's pretty cool
2018-01-31T15:34:39 #rust-dev-tools <nox> steveklabnik: I don't want to RE Xcode to write a Rust mode though.
2018-01-31T15:34:48 #rust-dev-tools <nox> steveklabnik: But it would be a pretty damn cool feature to advertise indeed.
2018-01-31T15:35:27 #rust-dev-tools <misdreavus> wait what
2018-01-31T15:35:33 #rust-dev-tools <steveklabnik> context: tweets
2018-01-31T15:36:54 #rust-dev-tools <nox> misdreavus: https://twitter.com/nokusu/status/958722624015749120
2018-01-31T15:37:41 #rust-dev-tools <misdreavus> oh snap, nice
2018-01-31T15:40:28 #rust-dev-tools <nox> misdreavus: Ain't it? :)
2018-01-31T15:42:11 #rust-dev-tools <nox> steveklabnik: Not sure if it's intended, but I just noticed you are not on -lang.
2018-01-31T15:42:32 #rust-dev-tools <nox> Not that I had anything in particular to tell you there.
2018-02-01T02:25:55 #rust-dev-tools <Manishearth> nox: do you actually use xcode?
2018-02-01T02:26:37 #rust-dev-tools <nox> I WOULD IF I HAD ARROWS
2018-02-01T03:56:43 #rust-dev-tools <Manishearth> nox: lol.
2018-02-01T03:57:05 #rust-dev-tools <Manishearth> most of my experience with xcode comes from when i try to open a file that I haven't associated with an editor
2018-02-01T03:57:15 #rust-dev-tools <Manishearth> and then xcode decides to eat all my ram and load
2018-02-01T03:57:28 #rust-dev-tools <Manishearth> I've now set up iterm so that clicking on files always opens them in subl
2018-02-01T03:57:32 #rust-dev-tools <Manishearth> (or vim, if I feel like it)
2018-02-01T03:57:44 #rust-dev-tools <Manishearth> my other experience with xcode was when I tried to build lldb
2018-02-01T03:58:01 #rust-dev-tools <Manishearth> lldb has Linux and Mac instructions. I figured that now that i had a mac it would be easier to hack on lldb
2018-02-01T03:58:09 #rust-dev-tools <Manishearth> tried the xcode stuff. wasted an hour, didn't work
2018-02-01T03:58:21 #rust-dev-tools <Manishearth> tried the linux instructions on mac (cmake and ninja). worked like a charm.
2018-02-01T03:58:34 #rust-dev-tools <Manishearth> xcode is probably pretty good, but I'm not overly fond of it :)
2018-02-01T08:21:44 #rust-dev-tools <nox> It is the superior editor when it comes to displaying errors.
2018-02-01T11:03:18 #rust-dev-tools <lqd> should https://github.com/rust-lang-nursery/rls-vscode/blob/master/contributing.md say that one needs to `npm run compile` the rls plugin before running it ? is that not necessary for other people ?
2018-02-01T11:03:56 #rust-dev-tools <lqd> (in my case, vscode can't find it otherwise)
2018-02-01T13:38:47 #rust-dev-tools <jonhoo> Manishearth: it looks like you overwrote a bunch of commits on your last push
2018-02-01T13:38:50 #rust-dev-tools <jonhoo> was that intentional?
2018-02-01T13:40:13 #rust-dev-tools <jonhoo> or rather, this commit with a bunch of changes: https://github.com/jonhoo/rfcs/commit/3f4425ec5f33438dbea9140538b7213634cc507b
2018-02-01T13:43:07 #rust-dev-tools <jonhoo> commented in-thread on the eRFC instead
2018-02-01T13:44:53 #rust-dev-tools <jonhoo> (i'll be off IRC for most of the day, so comments there are easier, but will monitor the logs if you'd rather chat here)
2018-02-01T14:53:33 #rust-dev-tools <Manishearth> jonhoo: yeah, I didn't realize you'd pushed changes, and I had local amended changes which i force pushed, sorry
2018-02-01T14:57:44 #rust-dev-tools <jonhoo> Manishearth: hehe, that's fine, i figured it was probably something like that
2018-02-01T14:57:56 #rust-dev-tools <jonhoo> fwiw, --force-with-lease is generally preferable to --force
2018-02-01T14:58:04 #rust-dev-tools <jonhoo> because it would detect precisely this
2018-02-01T14:58:11 #rust-dev-tools <jonhoo> while working normally with amended commits
2018-02-01T15:05:18 #rust-dev-tools <Manishearth> I'm aware of the flag, I'm usually -f pushing to my own branches so I rarely use it
2018-02-01T15:05:22 #rust-dev-tools <Manishearth> I should use it more and alias it 
2018-02-01T15:13:07 #rust-dev-tools <steveklabnik> what's the topic of the meeting today, and is it irc or vidyo?
2018-02-01T15:16:47 #rust-dev-tools <misdreavus> i would assume triage
2018-02-01T15:16:50 #rust-dev-tools <misdreavus> on irc
2018-02-01T15:17:11 #rust-dev-tools <misdreavus> since the last one was the testing-frameworks one on hangouts
2018-02-01T15:19:32 #rust-dev-tools <steveklabnik> cool
2018-02-01T15:38:13 #rust-dev-tools <imperio> it's on thursday now?
2018-02-01T15:38:16 #rust-dev-tools * imperio is completely lost
2018-02-01T15:38:55 #rust-dev-tools <misdreavus> it's been on thursday since new years >_>
2018-02-01T15:39:10 #rust-dev-tools <misdreavus> except for last week, because time zones and people's availability
2018-02-01T15:39:47 #rust-dev-tools <imperio> I was still on last week story
2018-02-01T15:39:57 #rust-dev-tools <imperio> thought it was the new schedule...
2018-02-01T19:48:44 #rust-dev-tools <phansch> looks like my first merged clippy lint is causing more issues than I thought /o\ 
2018-02-01T19:49:01 #rust-dev-tools <phansch> Gotta run new lints on some other rust repos next time
2018-02-01T20:45:48 #rust-dev-tools <misdreavus> http://everytimezone.com/#2018-2-1,540,cn3
2018-02-01T20:46:55 #rust-dev-tools <misdreavus> uh, who's driving this meeting? >_>
2018-02-01T20:48:41 #rust-dev-tools <steveklabnik> i would assume nrc
2018-02-01T20:56:14 #rust-dev-tools * nrc waves
2018-02-01T20:56:25 #rust-dev-tools <nrc> triage meeting, here in 5 mins
2018-02-01T20:58:14 #rust-dev-tools <steveklabnik> woo
2018-02-01T21:00:39 #rust-dev-tools <japaric> o/
2018-02-01T21:00:41 #rust-dev-tools <misdreavus> o/
2018-02-01T21:00:42 #rust-dev-tools <nrc> OK, triage meeting - https://public.etherpad-mozilla.org/p/rust-dev-tools
2018-02-01T21:00:51 #rust-dev-tools <killercup> o/
2018-02-01T21:02:01 #rust-dev-tools <nrc> We have a beta regression: https://github.com/rust-lang/rust/issues/47639
2018-02-01T21:02:05 #rust-dev-tools <steveklabnik> o/
2018-02-01T21:02:20 #rust-dev-tools <nrc> imperio is assigned
2018-02-01T21:02:31 #rust-dev-tools <steveklabnik> imperio is also out until next week thanks to FOSDEM
2018-02-01T21:02:34 #rust-dev-tools <imperio> let me look
2018-02-01T21:02:40 #rust-dev-tools <steveklabnik> oh hey!
2018-02-01T21:02:40 #rust-dev-tools <imperio> yep :)
2018-02-01T21:02:44 #rust-dev-tools <steveklabnik> i thought you were gone, my bad :)
2018-02-01T21:02:45 #rust-dev-tools <imperio> ehy!
2018-02-01T21:02:48 #rust-dev-tools <imperio> no no
2018-02-01T21:02:54 #rust-dev-tools <imperio> I'm gone starting tomorrow
2018-02-01T21:03:12 #rust-dev-tools <imperio> but I'm super tired and trying to prepare my conference so don't expect me doing much
2018-02-01T21:03:31 #rust-dev-tools <nrc> kennytm has identified a bad commit, but it looks suspicious
2018-02-01T21:03:54 #rust-dev-tools <nrc> misdreavus or steveklabnik: would you be able to look into this before imperio is back?
2018-02-01T21:04:19 #rust-dev-tools <steveklabnik> misdreavus is better qualified than me, but also this is my job and not theirs :)
2018-02-01T21:04:23 #rust-dev-tools <kennytm> (nrc: it's legit)
2018-02-01T21:04:28 #rust-dev-tools <steveklabnik> so, if they're willing, that'd be best. otherwise, i can try to figure out whats up
2018-02-01T21:04:37 #rust-dev-tools <steveklabnik> no hard feelings either way!
2018-02-01T21:04:46 #rust-dev-tools <misdreavus> i haven't dug in much, so i don't really know the best avenue of attack
2018-02-01T21:05:01 #rust-dev-tools <misdreavus> there's also the fact that some recent nightlies are seemingly fixed?
2018-02-01T21:05:03 #rust-dev-tools <nrc> kennytm: as in, you re-checked and you think the web asm PR is to blame?
2018-02-01T21:05:06 #rust-dev-tools <steveklabnik> yeah, but you've like, built rustdoc more recently than three months ago, heh
2018-02-01T21:05:11 #rust-dev-tools <misdreavus> lol
2018-02-01T21:05:36 #rust-dev-tools <kennytm> nrc: yes i've downloaded the CI artifacts and verified that e97ba83 causes the ICE
2018-02-01T21:05:48 #rust-dev-tools <kennytm> on macOS at least
2018-02-01T21:05:51 #rust-dev-tools <nrc> kennytm: awesome, thanks!
2018-02-01T21:06:26 #rust-dev-tools <nrc> misdreavus (et al): could adding a new target break rustdoc like this?
2018-02-01T21:06:33 #rust-dev-tools <steveklabnik> hm
2018-02-01T21:07:02 #rust-dev-tools <misdreavus> my immediate assumption
2018-02-01T21:07:08 #rust-dev-tools <kennytm> i think it is the change to the ReplaceBodyWithLoop stuff
2018-02-01T21:07:18 #rust-dev-tools <misdreavus> yeah, the "everybody loops" pass
2018-02-01T21:07:40 #rust-dev-tools <imperio> misdreavus: yep, it seems that one fix I wrote fixed it
2018-02-01T21:07:45 #rust-dev-tools <imperio> which is pretty funny haha
2018-02-01T21:07:49 #rust-dev-tools <misdreavus> wait, which one?
2018-02-01T21:07:54 #rust-dev-tools <imperio> good side effect
2018-02-01T21:08:00 #rust-dev-tools <imperio> no clue
2018-02-01T21:08:19 #rust-dev-tools <misdreavus> like, we should also bisect what fixed it so we can try to backport it
2018-02-01T21:09:21 #rust-dev-tools <imperio> misdreavus: actually that could also be one of your PRs too
2018-02-01T21:09:31 #rust-dev-tools <imperio> well, I'll let you look for it ;)
2018-02-01T21:09:35 #rust-dev-tools <misdreavus> heh
2018-02-01T21:09:53 #rust-dev-tools <nrc> So, I'd like to move on, but it seems like bisect for the fix and try to backport would be a good strategy
2018-02-01T21:10:01 #rust-dev-tools * steveklabnik nods
2018-02-01T21:10:04 #rust-dev-tools <misdreavus> yes
2018-02-01T21:10:07 #rust-dev-tools <nrc> misdreavus: if you could do that, that would be awesome!
2018-02-01T21:10:29 #rust-dev-tools <nrc> kennytm or someone else from the infra team could probably help with the bisection if needed
2018-02-01T21:10:33 #rust-dev-tools <misdreavus> kennytm: can you try to bisect a fix? a broken/fixed pair of nightlies are in the comment thread
2018-02-01T21:10:44 #rust-dev-tools <steveklabnik> yeah, if imperio misdreavus want to give this a try, please do, and if you can't/takes too long, etc, let me know and ill give it a shot <3
2018-02-01T21:10:56 #rust-dev-tools <misdreavus> oh wait
2018-02-01T21:11:16 #rust-dev-tools <nrc> No nominated PRs
2018-02-01T21:11:22 #rust-dev-tools <imperio> steveklabnik: consider me out for this one so it'll entirely depend on misdreavus 
2018-02-01T21:11:49 #rust-dev-tools <misdreavus> "rustc 1.25.0-nightly (8ccab7eed 2018-01-31)" also doesn't work ;_;
2018-02-01T21:12:06 #rust-dev-tools <misdreavus> eh, i'll take it out of chat for now
2018-02-01T21:13:06 #rust-dev-tools <nrc> RFCs:
2018-02-01T21:13:15 #rust-dev-tools <nrc> https://github.com/rust-lang/rfcs/pull/1133 is nominated for closing
2018-02-01T21:14:49 #rust-dev-tools <steveklabnik> :metal:
2018-02-01T21:15:32 #rust-dev-tools <killercup> *crickets*
2018-02-01T21:15:46 #rust-dev-tools <nrc> https://github.com/rust-lang/rfcs/pull/1615 is still open
2018-02-01T21:16:07 #rust-dev-tools <nrc> Oh great, tbu has updated it!
2018-02-01T21:16:21 #rust-dev-tools <nrc> I missed that ping
2018-02-01T21:17:23 #rust-dev-tools <nrc> to recap, this is an RFC about where tools (in particular rustup and Cargo) should put their files
2018-02-01T21:17:42 #rust-dev-tools <nrc> if anyone interested could read the recent implementation and updates, that would be great!
2018-02-01T21:18:04 #rust-dev-tools <nrc> https://github.com/rust-lang/rfcs/pull/2117
2018-02-01T21:18:06 #rust-dev-tools <nrc> ping mw
2018-02-01T21:19:23 #rust-dev-tools <nrc> I guess we are still waiting for someone to implement that
2018-02-01T21:19:34 #rust-dev-tools <nrc> I wonder if anyone is interested in doing that
2018-02-01T21:20:18 #rust-dev-tools <steveklabnik> im betting we can get a volunteer
2018-02-01T21:20:25 #rust-dev-tools <steveklabnik> given so many people feel so strongly about it
2018-02-01T21:23:35 #rust-dev-tools <nrc> https://github.com/rust-lang/rfcs/pull/2285
2018-02-01T21:23:55 #rust-dev-tools <nrc> This RFC is an update to an existing one to reflect the implementation which actually happened
2018-02-01T21:23:59 #rust-dev-tools <nrc> (rustdoc links)
2018-02-01T21:24:17 #rust-dev-tools <nrc> ping killercup and Manishearth about this one
2018-02-01T21:24:34 #rust-dev-tools <steveklabnik> should we check of jntrnr
2018-02-01T21:24:37 #rust-dev-tools <nrc> It looks like my review comments are addressed, thanks!
2018-02-01T21:25:01 #rust-dev-tools * killercup is reading manish's latest changes
2018-02-01T21:25:04 #rust-dev-tools <nrc> So, where I'm a little confused is about the status of the feature
2018-02-01T21:25:22 #rust-dev-tools <nrc> An RFC is usually a goal for what we want the feature to look like
2018-02-01T21:25:34 #rust-dev-tools <nrc> in this case we're modifying an RFC to match what is implemented
2018-02-01T21:25:52 #rust-dev-tools <misdreavus> we accepted the rfc, but when implementing it we ran into difficulties getting it to match the rfc
2018-02-01T21:26:04 #rust-dev-tools <nrc> but that is not what I'd like the feature to look like eventually, or at least I'd like to discuss that
2018-02-01T21:26:18 #rust-dev-tools <killercup> yeah it's about refining the rfc because of new ambiguities
2018-02-01T21:26:30 #rust-dev-tools <steveklabnik> nrc: it sounds like you'd like to object to merging here, then?
2018-02-01T21:26:33 #rust-dev-tools <nrc> so I'm not sure whether we should make *this* RFC about just matching the implementation and land it quickly
2018-02-01T21:26:51 #rust-dev-tools <nrc> or whether we should make it into a discussion about what we'd like to ahve
2018-02-01T21:26:56 #rust-dev-tools <steveklabnik> my understanding of this rfc was that there was pretty decent consensus that this *was* what the final impl should look like
2018-02-01T21:27:02 #rust-dev-tools <killercup> to me, this is just an update to make one of the cases the rfc proposed work
2018-02-01T21:27:38 #rust-dev-tools <killercup> this is about the "write an atcual markdown link to a rustdoc item"
2018-02-01T21:27:43 #rust-dev-tools <nrc> we might have that discussion during stabilisation, but I don't think that is a thing for rustdoc, right?
2018-02-01T21:28:00 #rust-dev-tools <killercup> the currently not implemented but hopefully much more common case (implied ref links) is unchanged by this
2018-02-01T21:28:36 #rust-dev-tools <killercup> nrc: rustdoc might have a stabilization process
2018-02-01T21:28:50 #rust-dev-tools <killercup> this is behind a -Z/unstable flag iirc
2018-02-01T21:28:58 #rust-dev-tools <killercup> misdreavus correct me if i'm worng
2018-02-01T21:29:02 #rust-dev-tools <misdreavus> afaik it's not behind a command-line flag, just nightly-only
2018-02-01T21:29:20 #rust-dev-tools <misdreavus> like checking for error numbers in compile_fail doctests
2018-02-01T21:29:43 #rust-dev-tools <nrc> what happens if there is a link in the docs and you run non-nightly rustdoc - it's just text?
2018-02-01T21:29:57 #rust-dev-tools <misdreavus> it treats it as link text
2018-02-01T21:30:05 #rust-dev-tools <killercup> yeah
2018-02-01T21:30:14 #rust-dev-tools <killercup> or, if you write an explicit link, it just doesn't work
2018-02-01T21:30:16 #rust-dev-tools <misdreavus> <a href="::my_crate::MyType">MyType</a>
2018-02-01T21:31:19 #rust-dev-tools <misdreavus> so, is this rfc pr just changing spaces to @-signs, and making "ambiguous namespace" errors explicit?
2018-02-01T21:31:35 #rust-dev-tools * misdreavus let Manishearth take over the implementation pr after a while
2018-02-01T21:32:16 #rust-dev-tools <killercup> misdreavus: basically, yeah, from what i recall these were the main changes
2018-02-01T21:32:49 #rust-dev-tools <misdreavus> where the former is because it was non-standard commonmark, and the latter because it was authorial intent?
2018-02-01T21:33:40 #rust-dev-tools <steveklabnik>  /win 19
2018-02-01T21:33:40 #rust-dev-tools <nrc> it allows namespace-ambiguous links which we did not permit in the original RFC
2018-02-01T21:34:03 #rust-dev-tools <nrc> which are very convenient but not forwards compatible
2018-02-01T21:34:31 #rust-dev-tools <nrc> might be a good thing, but seems like a non-trivial change
2018-02-01T21:35:03 #rust-dev-tools <killercup> yeah. a) yes b) the rfc didn't specify whether to use warnings or errors. c) addition: no need to disambiguate stuff if there's only one match
2018-02-01T21:35:52 #rust-dev-tools <nrc> well, it seems that there will be an opportunity to re-visit things during stabilisation, so we can treat this RFC as a bug fix, rather than an in-depth discussion
2018-02-01T21:35:54 #rust-dev-tools <killercup> we discussed the addition a bit and most people seem to think that clashes of names across namespaces are *really* rare
2018-02-01T21:36:03 #rust-dev-tools <misdreavus> and the current objection is one of process?
2018-02-01T21:37:08 #rust-dev-tools <nrc> personally, I'm just not sure how hung up to get on this RFC - I'd be happy to quickly merge if we can discuss properly in stabilisation, I just didn't know if there will be a stabilisation period
2018-02-01T21:37:11 #rust-dev-tools <killercup> Manish's intend was to open this as a bugfix, not an actual RFC fyi
2018-02-01T21:37:50 #rust-dev-tools <misdreavus> nrc: my assumption was that we can treat "taking off the nightly-only gate" as its "stabilization"
2018-02-01T21:38:00 #rust-dev-tools <nrc> ok, lets do that then
2018-02-01T21:38:33 #rust-dev-tools <misdreavus> cool
2018-02-01T21:38:52 #rust-dev-tools <nrc> I'll summarise on the RFC, I'd encourage you to tick boxes on the basis of it being just a bug fix
2018-02-01T21:38:59 #rust-dev-tools <killercup> yay :)
2018-02-01T21:39:03 #rust-dev-tools <misdreavus> <3
2018-02-01T21:39:16 #rust-dev-tools <steveklabnik> :)
2018-02-01T21:39:32 #rust-dev-tools <nrc> Can we close 2287 as subsumed by 2318?
2018-02-01T21:39:46 #rust-dev-tools <nrc> I haven't read 2318 or the minutes from last week yet, sorry
2018-02-01T21:40:30 #rust-dev-tools <killercup> maybe but not really
2018-02-01T21:40:47 #rust-dev-tools <killercup> 2287 is about the API of the built-in benchmark thing
2018-02-01T21:41:02 #rust-dev-tools <killercup> 2318 is about a way to not need to have that built-in :)
2018-02-01T21:41:15 #rust-dev-tools <killercup> (and a lot of other things, obviously)
2018-02-01T21:41:50 #rust-dev-tools <nrc> yeah, I was hoping we could say bench will be a test framework and we won't stabilise the current thing at all
2018-02-01T21:41:55 #rust-dev-tools <misdreavus> 2287 is kinda "stabilize what we have" and 2318 is "here's how we generalize it", aiui
2018-02-01T21:41:57 #rust-dev-tools <killercup> we could say "let's ship the bencher stuff as a crate once 2318" land, but might still want to have an rfc about the api for the nursery crate
2018-02-01T21:42:37 #rust-dev-tools <nrc> I think it is better to have an implementation first, then an RFC, given that it sounds like people want change, not just stabilising what we have
2018-02-01T21:42:46 #rust-dev-tools <killercup> i'm fine with closing 2287, but fear that 2318 will take a long while to land
2018-02-01T21:43:51 #rust-dev-tools <killercup> 2287 is not really urgent or anything. benchmarking on stable is a solved problem with criterion from what i've heard
2018-02-01T21:44:05 #rust-dev-tools <nrc> bench has been unstable for three years and I feel like this rush to stabilise it now is totally artificial (I agree it would be good to stabilise it, but it seems to have gone from 'not even on the radar' to 'highest priority' and I don't agree with that)
2018-02-01T21:44:17 #rust-dev-tools <steveklabnik> i agree
2018-02-01T21:44:34 #rust-dev-tools <steveklabnik> it's a papercut for sure
2018-02-01T21:45:05 #rust-dev-tools <nrc> ok, I'll write something up on the RFC there
2018-02-01T21:45:16 #rust-dev-tools <nrc> That's all the triage
2018-02-01T21:45:25 #rust-dev-tools <nrc> Does anyone have a nomination for next week's meeting?
2018-02-01T21:46:13 #rust-dev-tools <sfackler> test::black_box is the one bit that can't be exactly replicated outside on stable, but I don't know how far the approximations are from it
2018-02-01T21:48:06 #rust-dev-tools <killercup> sfackler: i was interested on that as well and found https://github.com/japaric/criterion.rs/commit/497ce56a0de8e15de792be61d98a15393208bd14
2018-02-01T21:51:07 #rust-dev-tools <killercup> i dont have nomination for next week's meeting myself but i think the fcp for the roadmap rfc will start then
2018-02-01T21:51:28 #rust-dev-tools <nrc> OK, well, I'm away anyway, so I'd be happy to cancel
2018-02-01T21:51:44 #rust-dev-tools <nrc> it would be good for everyone to look at the roadmap RFC
2018-02-01T21:52:05 #rust-dev-tools <killercup> maybe in two weeks it'd make sense to talk a bit about this team's roadmap for 2018?
2018-02-01T21:52:08 #rust-dev-tools <nrc> anyone got anything else for today's meeting?
2018-02-01T21:52:12 #rust-dev-tools <steveklabnik> not i
2018-02-01T21:52:35 #rust-dev-tools <nrc> killercup: good idea
2018-02-01T21:53:40 #rust-dev-tools <nrc> OK, then the meeting ends
2018-02-01T21:53:43 #rust-dev-tools <nrc> thank you everyone!
2018-02-01T21:54:02 #rust-dev-tools <steveklabnik> <3
2018-02-01T21:55:32 #rust-dev-tools <misdreavus> <3
2018-02-01T21:56:12 #rust-dev-tools <jonhoo> <3 !
2018-02-02T00:33:25 #rust-dev-tools <misdreavus> okay, so the ICE is from an unhandled lint saying "unused macro definition"
2018-02-02T02:32:55 #rust-dev-tools <Manishearth> sorry folks, not home till next week, so had to miss the meeting
2018-02-02T02:36:11 #rust-dev-tools <Manishearth> nrc: gnzlbg is planning to write an independent black_box rfc
2018-02-02T02:36:55 #rust-dev-tools <Manishearth> nrc: if anything, i consider the delay in stabilizing bench to be artificial -- folks have wanted this forever, and multiple prerfc-like discussions have happened
2018-02-02T02:37:09 #rust-dev-tools <Manishearth> each time getting delayed by "we want custom test frameworks"
2018-02-02T02:37:32 #rust-dev-tools <Manishearth> except the thing is folks want bench much more than they want CTF (they want that too, but care about it less)
2018-02-02T02:37:56 #rust-dev-tools <Manishearth> so the people who were willing to push for bench have less interest in pushing for the much more complicated CTF stuff
2018-02-02T02:38:22 #rust-dev-tools <Manishearth> we kinda do this often
2018-02-02T02:39:00 #rust-dev-tools <Manishearth> block <small thing people care about> on <larger thing that "would be nice" but folks care about it less>
2018-02-02T02:39:25 #rust-dev-tools <Manishearth> and deflate the momentum on the small thing bc folks are not motivated tvwork on the large thing
2018-02-02T02:39:40 #rust-dev-tools <Manishearth> which is why i decided to break the cycle and actually push for CTF :)
2018-02-02T02:39:58 #rust-dev-tools <nrc> that seems to be the core trade-off in software design, right? Prefer something now or better and later (perfect vs good)
2018-02-02T02:40:06 #rust-dev-tools <Manishearth> (to be clear, not arguing against the closing of the bench rfc)
2018-02-02T02:40:07 #rust-dev-tools <Manishearth> sure
2018-02-02T02:40:21 #rust-dev-tools <Manishearth> nrc Im specifically talking about your comment about artificial urgency
2018-02-02T02:40:42 #rust-dev-tools <Manishearth> i think its an unfair characterization given that the situation is quite the opposite imo
2018-02-02T02:41:22 #rust-dev-tools <Manishearth> you can't say "people would have asked for this more" when people *did* ask for it a lot and got redirected, killing momentum on it
2018-02-02T02:42:33 #rust-dev-tools <nrc> I mean, you can - where the little thing *is* important to people then there is still momentum, e.g., custom derive where proc macros are the better solution, but even so there was momentum for custom derive
2018-02-02T02:43:04 #rust-dev-tools <Manishearth> yeah and we stabilized derive not proc macros
2018-02-02T02:43:28 #rust-dev-tools <nrc> right because there was a lot of pressure for custom derive, there has not been for bench
2018-02-02T02:43:42 #rust-dev-tools <Manishearth> the analogy to stabilizing derive would be stabilizing bench
2018-02-02T02:43:44 #rust-dev-tools <Manishearth> hm
2018-02-02T02:43:47 #rust-dev-tools <Manishearth> maybe
2018-02-02T02:44:17 #rust-dev-tools <nrc> it is easy to find people who want pretty much anything, that doesn't mean they need it or it should be high priority
2018-02-02T02:44:24 #rust-dev-tools <Manishearth> i still think that after at least three rather active pre-rfc-like internals threads we cant really say there wasnt momentum
2018-02-02T02:44:48 #rust-dev-tools <Manishearth> fair
2018-02-02T02:46:26 #rust-dev-tools <nrc> I mean, I agree we should have it, the question is priority and that depends on the degree of urgency and importance - that seems low for bench
2018-02-02T02:47:30 #rust-dev-tools <Manishearth> agreed
2018-02-02T02:48:02 #rust-dev-tools <Manishearth> but even if low-pri it's not that much work to stabilize a simple bencher
2018-02-02T02:48:52 #rust-dev-tools <Manishearth> but yeah
2018-02-02T02:50:09 #rust-dev-tools <Manishearth> idk when i saw your original statement i was reminded of https://twitter.com/ManishEarth/status/885601806025228289
2018-02-02T02:51:00 #rust-dev-tools <Manishearth> it feels kinda insulting for the folks who have been pushing it in the past and were basically told "no" that now the momentum (that was killed) is "artificial"
2018-02-02T02:51:49 #rust-dev-tools <Manishearth> its in this channel and not on a public blog post or anything but i just want to push back against discounting past efforts that *we* killed so lightly
2018-02-02T02:52:40 #rust-dev-tools <Manishearth> maybe i'm reading too much into it but that comment rubbed me the wrong way
2018-02-02T02:52:43 #rust-dev-tools <Manishearth> idk
2018-02-02T02:53:14 #rust-dev-tools <Manishearth> it's nbd though, i'm just very wary of such issues in tech communities
2018-02-02T02:57:17 #rust-dev-tools <Manishearth> anyway, sorry about this detour. I agree with closing the rfc given that the other rfc exists :)
2018-02-02T02:57:39 #rust-dev-tools <Manishearth> i don't think we need to wait for the erfc for test::black_box though
2018-02-02T02:57:51 #rust-dev-tools <Manishearth> but that's a separate rfc that gnzlbg wants to do
2018-02-02T02:57:53 #rust-dev-tools <Manishearth> so that's great
2018-02-02T03:44:19 #rust-dev-tools <misdreavus> i am attempting to debug rustdoc in visual studio and the optimization is making things confusing
2018-02-02T03:44:26 #rust-dev-tools <misdreavus> also i'm not sure how well VS understands macros >_>
2018-02-02T03:47:00 #rust-dev-tools <misdreavus> bah, it's too late for this
2018-02-02T11:29:07 #rust-dev-tools <lqd> nrc: how do we recursively explore Defs in rls-analysis ? it seems they have no id, so I can only get 1 level deep with for_each_child, preventing for instance getting to the fields of enum variants, I am missing something obvious ?
2018-02-02T12:50:59 #rust-dev-tools <steveklabnik> lqd: in new-rustdoc we use a vecdeque
2018-02-02T12:51:23 #rust-dev-tools <steveklabnik> you for_each_child for the root, put that in a vecdequeue, then for_each_child for each thing in the deque, adding its children to it
2018-02-02T12:53:35 #rust-dev-tools <lqd> steveklabnik: (I'm in the rls) how are you able to `for_each_child_def` the returned defs, since they don't have an Id to call for_each_child_def ? https://github.com/nrc/rls-analysis/blob/master/src/analysis.rs#L79-L89
2018-02-02T12:55:40 #rust-dev-tools <lqd> steveklabnik: oh maybe turning each def's span into it's id ?
2018-02-02T12:55:51 #rust-dev-tools <lqd> *its
2018-02-02T12:56:24 #rust-dev-tools <steveklabnik> https://github.com/steveklabnik/rustdoc/blob/master/src/json/mod.rs#L39
2018-02-02T12:56:30 #rust-dev-tools <steveklabnik> https://github.com/steveklabnik/rustdoc/blob/master/src/json/mod.rs#L53
2018-02-02T12:57:00 #rust-dev-tools <steveklabnik> https://github.com/steveklabnik/rustdoc/blob/master/src/json/mod.rs#L97-L103
2018-02-02T12:57:15 #rust-dev-tools <steveklabnik> ah right
2018-02-02T12:57:15 #rust-dev-tools <steveklabnik> https://github.com/steveklabnik/rustdoc/blob/master/src/json/mod.rs#L107
2018-02-02T12:57:25 #rust-dev-tools <steveklabnik> so, instead, i'm doing that *with ids* and then fetching the def from the id
2018-02-02T12:58:30 #rust-dev-tools <lqd> steveklabnik: oh ok, interesting, thanks a bunch :)
2018-02-02T13:07:05 #rust-dev-tools <steveklabnik> np
2018-02-02T16:50:24 #rust-dev-tools <lqd> oh I understand, the TupleVariant and StructVariant nodes don't list their children
2018-02-02T16:51:35 #rust-dev-tools <steveklabnik> fwiw if you sort this out, i'd be into it
2018-02-02T16:51:38 #rust-dev-tools <steveklabnik> i haven't done this for new rustdoc yet
2018-02-02T16:53:33 #rust-dev-tools <lqd> steveklabnik: "this" meaning linking the enum variants fields to their def ?
2018-02-02T16:54:07 #rust-dev-tools <steveklabnik> yeah, getting fields in general
2018-02-02T16:54:16 #rust-dev-tools <lqd> gotcha
2018-02-02T16:58:04 #rust-dev-tools <lqd> steveklabnik: I *think* it's something we'd have to change in rustc save-analysis
2018-02-02T16:58:18 #rust-dev-tools <steveklabnik> it's very possible
2018-02-02T16:58:27 #rust-dev-tools <steveklabnik> i will be needing stuff like that fairly shortly though
2018-02-02T16:58:34 #rust-dev-tools <steveklabnik> so somehow it will get done :)
2018-02-02T16:58:40 #rust-dev-tools <lqd> :)
2018-02-02T23:23:07 #rust-dev-tools <lqd> steveklabnik: thanks to your help I was able to hack this a bit :) https://imgur.com/EpJO13M 
2018-02-02T23:27:48 #rust-dev-tools <steveklabnik> oh wow!
2018-02-02T23:27:49 #rust-dev-tools <steveklabnik> that's awesome
2018-02-02T23:28:02 #rust-dev-tools <steveklabnik> if you happen to have the code public id like to chekc it out
2018-02-02T23:32:26 #rust-dev-tools <lqd> steveklabnik: I have to warn you it's an ugly hack ^^ which I'll try and clean up (and mostly only works in the kind of local variable example in the gif) https://github.com/lqd/rls/tree/match and https://github.com/lqd/rls-vscode/tree/match
2018-02-02T23:33:45 #rust-dev-tools <steveklabnik> its cool :)
2018-02-02T23:34:01 #rust-dev-tools <steveklabnik> thanks. ill check it out tomorrow
2018-02-02T23:34:21 #rust-dev-tools <lqd> thanks for the help!
2018-02-03T10:27:47 #rust-dev-tools <killercup> lqd: this is amazing :O
2018-02-03T10:30:07 #rust-dev-tools <lqd> killercup: haha thanks :) mostly smoke and mirrors barely working in an extremely limited number of cases tbh — but we'll get there
2018-02-03T10:31:22 #rust-dev-tools <killercup> lqd: that's perfectly fine! i'm really excited about someone doing this in general :)
2018-02-03T10:40:08 #rust-dev-tools <lqd> :)
2018-02-03T17:30:43 #rust-dev-tools <Cldfire> Yeah wow, that looks very useful. Great work :)
2018-02-04T12:25:35 #rust-dev-tools <aforsgren> I'm getting a compiler panic with rls in vs code "thread 'request-worker-1' panicked at 'Once instance has previously been poisoned', libstd\sync\once.rs:315:21". Did I misconfigure something? is it a known issue? Or should I file a bug? If bug: against rls or compiler?
2018-02-04T12:31:30 #rust-dev-tools <WindowsBunny> aforsgren: If RLS itself crashes, then you get the full backtrace and file the error against RLS
2018-02-06T02:53:32 #rust-dev-tools <Manishearth> \o/ https://rust-lang-nursery.github.io/rust-toolstate/
2018-02-06T02:53:36 #rust-dev-tools <Manishearth> nice work oli_obk_ 
2018-02-06T02:53:46 #rust-dev-tools <Manishearth> clippy /finally/ passes in rustc
2018-02-06T10:06:11 #rust-dev-tools <paulgdp> Hi, I'm building a new crate "packaging" honggfuzz (a relatively recent fuzzer from google), and I don't know how to to it: should it be "honggfuzz-rs" or "honggfuzz.rs". It seems to me that there is no clear concensus about the naming convention, even on rust-lang-nursery.
2018-02-06T10:06:45 #rust-dev-tools <paulgdp> *I don't know how to *name* it
2018-02-06T11:59:38 #rust-dev-tools <oli_obk_> paulgdp: just name it without `-rs` or `.rs`? so far I've only seen -rs, never .rs
2018-02-06T12:00:53 #rust-dev-tools <paulgdp> oli_obk_: the crate itself will be called honggfuzz, but I'd like to name the repositoty differently to not clash with the original project
2018-02-06T12:01:25 #rust-dev-tools <paulgdp> oli_obk_: kind of like https://github.com/alexcrichton/cc-rs
2018-02-06T12:02:03 #rust-dev-tools <oli_obk_> paulgdp: yea, -rs is the way to go here
2018-02-06T12:03:47 #rust-dev-tools <paulgdp> oli_obk_: ok, but is there a rationnal behind some repository being named with ".rs" like lazy-static.rs, rustup.rs, afl.rs ?
2018-02-06T12:04:00 #rust-dev-tools <oli_obk_> paulgdp: yes, they are webpages
2018-02-06T12:04:03 #rust-dev-tools <oli_obk_> domains
2018-02-06T12:04:08 #rust-dev-tools <oli_obk_> with exactly that domainnname
2018-02-06T12:04:28 #rust-dev-tools <oli_obk_> so if you host honggfuzz.rs, you can put the webpage content there
2018-02-06T12:04:38 #rust-dev-tools <oli_obk_> there == a repo named honggfuzz.rs
2018-02-06T12:05:28 #rust-dev-tools <paulgdp> oli_obk_: that's also what I thought, but both lazy-static.rs and afl.rs are not domains
2018-02-06T12:07:40 #rust-dev-tools <oli_obk_> oh
2018-02-06T12:07:42 #rust-dev-tools <oli_obk_> well...
2018-02-06T12:08:01 #rust-dev-tools <oli_obk_> paulgdp: you can always use https://www.random.org/ to decide
2018-02-06T12:08:17 #rust-dev-tools <paulgdp> oli_obk_: ;-) 
2018-02-06T12:10:05 #rust-dev-tools <paulgdp> oli_obk_: thank you, I just wanted to be sure I was not missing some rationnal/convention behind the ".rs"/"-rs" dichotomie. So my takeaway is that crates with ".rs" without a domain (and there are many) are just not coherent
2018-02-06T12:10:30 #rust-dev-tools <paulgdp> so I'll go with "honggfuzz-rs"
2018-02-06T12:10:35 #rust-dev-tools <oli_obk_> :+1:
2018-02-06T17:56:26 #rust-dev-tools <algesten> nrc: or maybe kennytm can anyone tell bors to do this thing again here? https://github.com/rust-lang/rust/pull/47657
2018-02-06T17:58:50 #rust-dev-tools <kennytm> algesten: done
2018-02-06T17:58:57 #rust-dev-tools <algesten> kennytm: thanks!!!
2018-02-06T18:20:12 #rust-dev-tools <steveklabnik> any reason why rls-analysis would be broken between last week and now?
2018-02-06T18:20:21 #rust-dev-tools <steveklabnik>   Feb 06 13:18:31.274 INFO found root, def: semver::
2018-02-06T18:20:27 #rust-dev-tools <steveklabnik>   Feb 06 13:18:31.283 INFO children, ids: []
2018-02-06T18:20:50 #rust-dev-tools <steveklabnik> this is basically collecting the id from for_each_child_def
2018-02-06T18:23:48 #rust-dev-tools <steveklabnik> i also tried HEAD rls-analysis and rls-data
2018-02-06T20:45:10 #rust-dev-tools <nrc> steveklabnik: that is worrying, I wouldn't expect it. RLS works for me right now, nightly from last Friday, and one very specific bit of save-analysis worked on Monday because I was testing it
2018-02-06T20:48:22 #rust-dev-tools <steveklabnik> let me check that nightly
2018-02-06T20:48:36 #rust-dev-tools <steveklabnik> 2/2, yeah?
2018-02-06T20:49:27 #rust-dev-tools <steveklabnik> installing; ill check for the json file after it installs
2018-02-06T20:49:45 #rust-dev-tools <nrc> so there should be a bunch of json files in target/debug/save-analysis
2018-02-06T20:50:10 #rust-dev-tools <nrc> or target/debug/deps/save-analysis
2018-02-06T20:50:14 #rust-dev-tools <nrc> or something like that
2018-02-06T20:50:36 #rust-dev-tools <nrc> anyway, hopefully one has a timestamp for the last time you did the compiler
2018-02-06T20:51:17 #rust-dev-tools <nrc> check to see how many defs are in there
2018-02-06T20:51:26 #rust-dev-tools <steveklabnik> cool cool
2018-02-06T20:51:32 #rust-dev-tools <steveklabnik> (nightly install still going, it takes a while, heh
2018-02-06T20:53:11 #rust-dev-tools <steveklabnik> okay, ton of json files, though they're in target/rls/debug/save-anaylist
2018-02-06T20:54:35 #rust-dev-tools <steveklabnik> most created on 2-1
2018-02-06T20:55:09 #rust-dev-tools <steveklabnik> trying with the new compiler...
2018-02-06T20:56:07 #rust-dev-tools <nrc> you should delete the old ones, they can cause bugs and/or slow down indexing
2018-02-06T20:56:17 #rust-dev-tools <steveklabnik> cool
2018-02-06T20:56:28 #rust-dev-tools <steveklabnik> yeah there's like, four of each, haha
2018-02-06T20:57:26 #rust-dev-tools <nrc> it might be interesting to compare the old with the new - if the new is much smaller, that would be a thing
2018-02-06T20:58:19 #rust-dev-tools * steveklabnik nods
2018-02-06T20:58:33 #rust-dev-tools * steveklabnik is waiting on the compiler still, heh. got a lot of deps
2018-02-06T20:59:24 #rust-dev-tools <steveklabnik> -a----         2/6/2018   2:20 PM         220134 libsemver-134c4a206d1db93d.rmeta
2018-02-06T20:59:27 #rust-dev-tools <steveklabnik> -a----         2/6/2018   3:58 PM         220132 libsemver-7f65163a5c1cec3a.rmeta
2018-02-06T20:59:30 #rust-dev-tools <steveklabnik> -a----         2/6/2018   3:00 PM         220217 libsemver-d4de97f6c221f22f.rmeta
2018-02-06T20:59:33 #rust-dev-tools <steveklabnik> -a----         2/6/2018   3:00 PM          56586 libsemver_parser-a4c1158ebf31369e.rmeta
2018-02-06T20:59:36 #rust-dev-tools <steveklabnik> -a----         2/6/2018   3:58 PM          56614 libsemver_parser-dc8a02f55df5b819.rmeta
2018-02-06T20:59:39 #rust-dev-tools <steveklabnik> -a----         2/6/2018   2:19 PM          56615 libsemver_parser-feeff63e62f4d7a3.rmeta
2018-02-06T20:59:42 #rust-dev-tools <steveklabnik> -a----         2/6/2018   2:20 PM            316 semver-134c4a206d1db93d.d
2018-02-06T20:59:45 #rust-dev-tools <steveklabnik> -a----         2/6/2018   3:58 PM            318 semver-7f65163a5c1cec3a.d
2018-02-06T20:59:48 #rust-dev-tools <steveklabnik> -a----         2/6/2018   3:00 PM            318 semver-d4de97f6c221f22f.d
2018-02-06T20:59:51 #rust-dev-tools <steveklabnik> -a----         2/6/2018   3:00 PM           1654 semver_parser-a4c1158ebf31369e.d
2018-02-06T20:59:54 #rust-dev-tools <steveklabnik> -a----         2/6/2018   3:58 PM           1654 semver_parser-dc8a02f55df5b819.d
2018-02-06T20:59:57 #rust-dev-tools <steveklabnik> -a----         2/6/2018   2:19 PM           1652 semver_parser-feeff63e62f4d7a3.d
2018-02-06T21:00:00 #rust-dev-tools <steveklabnik> hm
2018-02-06T21:00:03 #rust-dev-tools <steveklabnik> so, those all look to be basically the same size
2018-02-06T21:00:14 #rust-dev-tools <steveklabnik> trying on another project, i think that that one i might have blown away target when debugging
2018-02-06T21:04:38 #rust-dev-tools <steveklabnik>   Feb 06 16:04:28.323 INFO children, ids: [Id(1086626726112), Id(1086626726270), Id(1086626726044)] :D
2018-02-06T21:04:45 #rust-dev-tools <steveklabnik> okay, so this makes sense
2018-02-06T21:04:50 #rust-dev-tools <steveklabnik> sorta
2018-02-06T21:05:26 #rust-dev-tools <steveklabnik> it looks like that nightly is in fact doing a thing though
2018-02-06T21:05:28 #rust-dev-tools <steveklabnik> thanks nrc <3
2018-02-06T21:06:03 #rust-dev-tools <nrc> do you have json files with those?
2018-02-06T21:06:04 #rust-dev-tools <steveklabnik> huh
2018-02-06T21:06:06 #rust-dev-tools <steveklabnik> okay so
2018-02-06T21:06:09 #rust-dev-tools <steveklabnik> on THIS project it works
2018-02-06T21:06:10 #rust-dev-tools <nrc> in a save-analysis directory
2018-02-06T21:06:14 #rust-dev-tools <steveklabnik> but on semver, it does not work
2018-02-06T21:06:28 #rust-dev-tools <nrc> interesting!
2018-02-06T21:06:29 #rust-dev-tools <steveklabnik> so, those Ids are from my project, not from deps
2018-02-06T21:07:03 #rust-dev-tools <steveklabnik> oh oh, i see
2018-02-06T21:07:05 #rust-dev-tools * steveklabnik looks
2018-02-06T21:07:27 #rust-dev-tools <steveklabnik> -a----         2/6/2018   4:05 PM          32839 libsemver-7f65163a5c1cec3a.json
2018-02-06T21:07:30 #rust-dev-tools <steveklabnik> -a----         2/6/2018   4:05 PM          45334 libsemver_parser-dc8a02f55df5b819.json
2018-02-06T21:07:51 #rust-dev-tools <steveklabnik> let me try with today's nightly to compare
2018-02-06T21:08:03 #rust-dev-tools <steveklabnik> -a----         2/6/2018   4:07 PM          32846 libsemver-134c4a206d1db93d.json
2018-02-06T21:08:06 #rust-dev-tools <steveklabnik> -a----         2/6/2018   4:05 PM          32839 libsemver-7f65163a5c1cec3a.json
2018-02-06T21:08:09 #rust-dev-tools <steveklabnik> -a----         2/6/2018   4:05 PM          45334 libsemver_parser-dc8a02f55df5b819.json
2018-02-06T21:08:12 #rust-dev-tools <steveklabnik> -a----         2/6/2018   4:07 PM          45339 libsemver_parser-feeff63e62f4d7a3.json
2018-02-06T21:08:15 #rust-dev-tools <steveklabnik> a tiny but not huge difference?
2018-02-06T21:08:25 #rust-dev-tools <steveklabnik> five extra bytes, 7 extra bytes?
2018-02-06T21:09:10 #rust-dev-tools <steveklabnik> on semver-parser, it does produce children
2018-02-06T21:09:23 #rust-dev-tools <steveklabnik> so, it looks like something may be up with the semver crate
2018-02-06T21:09:24 #rust-dev-tools <steveklabnik> but
2018-02-06T21:09:29 #rust-dev-tools <steveklabnik> getting children at all unblocks me right now
2018-02-06T21:09:35 #rust-dev-tools <steveklabnik> i'm gonna take a break <3
2018-02-06T21:09:58 #rust-dev-tools <steveklabnik> ohhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh i think i know why
2018-02-06T21:10:13 #rust-dev-tools <misdreavus> lol that didn't take long
2018-02-06T21:10:19 #rust-dev-tools <steveklabnik> https://github.com/steveklabnik/semver/blob/master/src/lib.rs#L199-L201
2018-02-06T21:10:28 #rust-dev-tools <steveklabnik> semver only has re-exports at the top level
2018-02-06T21:10:31 #rust-dev-tools <steveklabnik> we do not track re-exports yet :(
2018-02-06T21:10:36 #rust-dev-tools <steveklabnik> ..... gah
2018-02-06T21:10:44 #rust-dev-tools <steveklabnik> it is entirely possible that i assumed the nightly wasn't working because of this
2018-02-06T21:10:47 #rust-dev-tools <steveklabnik> and i am just dumb
2018-02-06T21:10:52 #rust-dev-tools * steveklabnik sighs
2018-02-07T04:03:09 #rust-dev-tools <WindowsBunny> you're not dumb
2018-02-07T04:06:10 #rust-dev-tools <bernard> hello, when using rls on st3 i get 'no description available' for all stdlib types
2018-02-07T04:06:47 #rust-dev-tools <bernard> only the dependent pkgs types display on hover
2018-02-07T21:26:50 #rust-dev-tools <teddriggs> is RLS still dependent on racer? We have a couple people making PRs, but since RLS is the future I'd like to make sure their efforts are directed as productively as possible
2018-02-07T21:27:30 #rust-dev-tools <steveklabnik> at the moment, my understanding is yes
2018-02-07T23:13:33 #rust-dev-tools <teddriggs> steveklabnik thanks; in that case I'll keep reviewing those PRs
2018-02-10T08:19:46 #rust-dev-tools <gilnaa> matklad: Have you had chance to play with libtest's json outpu?
2018-02-10T08:20:26 #rust-dev-tools <matklad> gilnaa: not really: I am less active in IntelliJ these days :)  
2018-02-11T21:33:20 #rust-dev-tools <simulacrum> acrichto: are we okay with putting https://github.com/rust-lang/rust/pull/48092 in beta despite not being approved yet?
2018-02-11T21:33:34 #rust-dev-tools <simulacrum> oh I guess you accepted it
2018-02-12T21:32:40 #rust-dev-tools <Manishearth> yo 
2018-02-12T21:32:50 #rust-dev-tools <Manishearth> wait
2018-02-12T21:32:59 #rust-dev-tools <Manishearth> oh was the meeting on vidyo?
2018-02-12T21:33:05 #rust-dev-tools <Manishearth> dammit
2018-02-12T21:37:47 #rust-dev-tools <Manishearth> nrc: is the meeting still going on?
2018-02-12T21:38:42 #rust-dev-tools <Manishearth> wait, no
2018-02-12T21:38:43 #rust-dev-tools <Manishearth> what
2018-02-12T21:38:55 #rust-dev-tools <Manishearth> hm, i seem to have dev tools meetings scheduled on both monday and thursday
2018-02-13T00:43:51 #rust-dev-tools <nrc> Monday was cancelled since new year
2018-02-13T00:44:05 #rust-dev-tools <nrc> Meeting is going ahead on Thursday
2018-02-13T19:44:07 #rust-dev-tools <Manishearth> nrc: yeah i realized; the calendar event was still around so i got confused
2018-02-13T20:45:25 #rust-dev-tools <sfackler> nrc: does rust.analyze_package not do anything anymore? I have it set but I'm seeing a bunch of output from rls_analysis about "def already exists at span" for crates that the crate I'm analyzing doesn't depend on
2018-02-13T20:46:36 #rust-dev-tools <sfackler> i'm also not seeing any errors/warnings for the crate I'm analyzing
2018-02-13T21:46:43 #rust-dev-tools <nrc> sfackler: it does not - we switched to doing auto-detection, which we reasoned should work in all cases now
2018-02-13T21:46:57 #rust-dev-tools <nrc> could you file an issue if it does not please?
2018-02-13T21:47:38 #rust-dev-tools <sfackler> so in theory things should behave identically with it set or unset?
2018-02-13T22:21:47 #rust-dev-tools <nrc> sfackler: yes
2018-02-13T22:21:54 #rust-dev-tools <sfackler> cool thanks
2018-02-15T16:35:46 #rust-dev-tools <radix-M> What is the `stb` parameter to the `create_config!` macro in rustfmt? 
2018-02-15T16:38:26 #rust-dev-tools <radix-M> (I promise to update the code documentation if anyone answers me ;-)
2018-02-15T16:41:12 #rust-dev-tools <radix-M> oh... something to do with stable? or something?
2018-02-15T16:45:48 #rust-dev-tools <Rantanen> radix-M: Yeah, looking at the source, it defines whether a config is stable or requires nightly.
2018-02-15T16:45:57 #rust-dev-tools <Rantanen> https://github.com/rust-lang-nursery/rustfmt/blob/091ed2f0a4a6a79c7280280d140e1d76c31b2012/rustfmt-config/src/config_type.rs#L175-L186
2018-02-15T16:46:16 #rust-dev-tools <Rantanen> radix-M: It's the ".3", so if it's false, the configuration is only available with 'is_nightly_channel!()'
2018-02-15T16:47:33 #rust-dev-tools <radix-M> yeah, that's what I found, I'll updateo the docs
2018-02-15T18:37:41 #rust-dev-tools <dignati> Hey everyone :) I'm using vscode + rls but I can't get code completion to work. I think it works correctly for everything in std and types within the file I'm working on but not on a crate that I use. Is there some way to debug this? The RLS output buffer does not show anything
2018-02-15T19:01:08 #rust-dev-tools <nrc> dignati: there are some instructions here: https://github.com/rust-lang-nursery/rls/blob/master/debugging.md
2018-02-15T19:02:17 #rust-dev-tools <dignati> nrc: Yeah I tried those, except setting the env vars because I'm not sure how to start vscode with env vars on mac. Will try to figure that out though
2018-02-15T19:02:57 #rust-dev-tools <dignati> I just noticed that go to definition works though
2018-02-15T19:04:07 #rust-dev-tools <sfackler> dignati: `env RUST_LOG=rls=debug code` will start it up
2018-02-15T19:05:49 #rust-dev-tools <dignati> sfackler: Oh yes, got it to work with `env RUST_LOG=rls=debug open /Applications/Visual\ Studio\ Code.app/`
2018-02-15T19:06:36 #rust-dev-tools <dignati> nrc: Alright, I got the logs but I'm a bit lost now. Nothing stands out as an obvious error. I see the crate name in question popping up a couple of times
2018-02-15T19:07:38 #rust-dev-tools <nrc> dignati: do you have jump to def working?
2018-02-15T19:09:15 #rust-dev-tools <dignati> nrc: Yes, that works interestingly. Here is a part of the log as I type `ffi::vips_` and wait for completion. `vips` is my crate and `libvips-sys` is the crate that I imported as `ffi`: https://gist.github.com/dignati/69eb266f3ceb7ae3045fe8718078c01d
2018-02-15T19:13:31 #rust-dev-tools <nrc> dignati: you might want to filter by racer rather than rls - code completion is done by Racer, if jump to def is working then it sounds like this is a Racer problem
2018-02-15T19:15:00 #rust-dev-tools <dignati> Oh I thought racer just jumps in when rls fails. Alright, I will look into racer then. Thank you :)
2018-02-15T20:02:31 #rust-dev-tools <nrc> meeting in one hour!
2018-02-15T20:14:43 #rust-dev-tools <misdreavus> :D
2018-02-15T20:17:32 #rust-dev-tools <misdreavus> i'll be silent-lurking again, as usual
2018-02-15T20:50:55 #rust-dev-tools <tromey> I hope vidyo works
2018-02-15T20:51:06 #rust-dev-tools <tromey> lately it's been not wanting me to say anything
2018-02-15T20:51:57 #rust-dev-tools <fitzgen> it is going to be a vidyo meeting, righrt?
2018-02-15T20:52:03 #rust-dev-tools <misdreavus> yes
2018-02-15T20:52:08 #rust-dev-tools <killercup> yeah
2018-02-15T20:52:12 #rust-dev-tools <fitzgen> cool, thanks
2018-02-15T20:59:04 #rust-dev-tools * misdreavus is no camera/no mic again
2018-02-15T21:04:18 #rust-dev-tools <Manishearth> misdreavus: true dedication to the ghost leitmotif
2018-02-15T21:04:24 #rust-dev-tools <misdreavus> lol
2018-02-15T21:04:48 #rust-dev-tools <misdreavus> i'm in ur video chat, haunting ur meetingz
2018-02-15T21:05:47 #rust-dev-tools <imperio> and I'm trying to find the url
2018-02-15T21:05:49 #rust-dev-tools <imperio> once again
2018-02-15T21:10:41 #rust-dev-tools <imperio> well, I'll read the backlogs then...
2018-02-15T21:28:23 #rust-dev-tools <misdreavus> rustdoc would need to know about the epoch so it can tell the compiler about it when it runs
2018-02-15T21:28:43 #rust-dev-tools <misdreavus> if there's library stuff that only happens in a new epoch i want to make a banner for it
2018-02-15T21:28:56 #rust-dev-tools <steveklabnik> new rustdoc at least just invokes cargo, so i think *that* should be fine?
2018-02-15T21:29:06 #rust-dev-tools <misdreavus> yeah
2018-02-15T21:35:41 #rust-dev-tools <misdreavus> nrc: "Doxidize"
2018-02-15T21:41:34 #rust-dev-tools <radix-M> congrats on getting rustfmt-preview into stable, y'all!
2018-02-15T21:54:42 #rust-dev-tools <misdreavus> nrc: (^^)b
2018-02-15T21:56:36 #rust-dev-tools <misdreavus> Rustdoc Power Team
2018-02-15T22:01:23 #rust-dev-tools <nrc> radix-M: thanks!
2018-02-15T22:01:57 #rust-dev-tools <radix-M> anyone around who might be able to guide me a little bit on fixing https://github.com/rust-lang-nursery/rustfmt/issues/2446 ?
2018-02-15T22:04:06 #rust-dev-tools <misdreavus> steveklabnik: imperio: i'm setting up #rustdoc as a dedicated channel if we can ever stop ourselves from talking about it in #rust-docs, lol
2018-02-15T22:04:26 #rust-dev-tools <nrc> radix-M: I'm about to start a meeting, but that looks like it is a span error - either the compiler is giving a bad span or rustfmt is calculating a span badly
2018-02-15T22:04:42 #rust-dev-tools <nrc> maybe try dumping the span info in the comment handling code?
2018-02-15T22:06:09 #rust-dev-tools <radix-M> would that be in chain.rs? I guess I need to spend some time browsing the code to figure out where everything is
2018-02-15T22:06:56 #rust-dev-tools <radix-M> anyway, no worries :) thanks for the hint
2018-02-15T22:09:05 #rust-dev-tools <steveklabnik> lol ok
2018-02-16T09:15:32 #rust-dev-tools <phansch> is there any more information on the Rust All Hands Berlin? Will it be a public event? (Just saw the dropbox document in the etherpad)
2018-02-16T14:12:35 #rust-dev-tools <steveklabnik> phansch: i don't *believe* so, but i'm also not sure; it's basically a week of meetings for people who are members of the various teams
2018-02-16T14:27:22 #rust-dev-tools <phansch> alright, thanks!
2018-02-16T18:21:43 #rust-dev-tools <radix-M> [rustfmt] I don't see a `visit_comment` anywhere, so I assume comments aren't handled like other things 
2018-02-16T18:22:27 #rust-dev-tools <radix-M> ah, I think Contributing.md explains this a bit
2018-02-16T18:23:10 #rust-dev-tools <radix-M> Is there an intermediate representation of the source code that does have comments? (right now I'm just trying to verify that rustfmt has detected the correct span for the comment
2018-02-16T19:09:00 #rust-dev-tools <nrc> radix-M: there is not, unfortunately
2018-02-16T19:31:54 #rust-dev-tools <radix-M> Ok. I think I'm getting a bit closer to finding the bug
2018-02-16T20:01:35 #rust-dev-tools <radix-M> ok so
2018-02-16T20:02:59 #rust-dev-tools <radix-M> https://github.com/rust-lang-nursery/rustfmt/blob/master/rustfmt-core/src/items.rs#L1206-L1207
2018-02-16T20:03:10 #rust-dev-tools <radix-M> here, items_str is "f: u8, // x" and result is "V {"
2018-02-16T20:03:17 #rust-dev-tools <radix-M> and this is where it's writing the final "}"
2018-02-16T20:04:04 #rust-dev-tools <radix-M> so _maybe_ this is where the bug is? Should that conditional be amended to check that `items_str` doesn't contain "//"? 
2018-02-16T20:05:00 #rust-dev-tools <radix-M> (or maybe there's a more reliable function for checking "does line have a trailing comment")
2018-02-16T20:05:51 #rust-dev-tools <nrc> basically yes, I think there is a 'contains_comment' comment function, or something like that
2018-02-16T20:06:47 #rust-dev-tools <radix-M> nice, then I should have a PR soon :)
2018-02-16T20:08:47 #rust-dev-tools <nrc> cool!
2018-02-16T20:10:48 #rust-dev-tools <radix-M> nrc: shouldn't it more specifically check for a trailing comment, instead of just containing a comment?
2018-02-16T20:11:38 #rust-dev-tools <radix-M> I mean, because it doesn't technically need to wrap on /* */
2018-02-16T20:22:24 #rust-dev-tools <radix-M> btw, is anyone familiar with this failure? maybe it only happens on windows? it's failing on master for me:  https://gist.github.com/radix/7b238da0388f8a90f347ca2588199ac6
2018-02-16T20:48:14 #rust-dev-tools <nrc> radix-M: yeah, true
2018-02-17T12:16:18 #rust-dev-tools <jaykay> hi! i wanted to build rustfmt from source and got confused about the compiler support. it was my understanding that rustfmt supports rustc 1.24 stable, however cargo build of the current master fails with 1.24 because a dependency uses #![feature]. what should i do, simply install a nightly? is that a bug i should report?
2018-02-17T12:22:18 #rust-dev-tools <Sergio> I don't think rustfmt works on stable
2018-02-17T12:22:33 #rust-dev-tools <Sergio> builds*
2018-02-17T12:22:59 #rust-dev-tools <Sergio> But you can install it using rustup without building: rustup component add rustfmt-preview
2018-02-17T12:23:06 #rust-dev-tools <Sergio> If you want to build, you'll need to using nightly: cargo +nightly build
2018-02-17T12:23:39 #rust-dev-tools <Sergio> "Most development happens on the master branch, however, this only supports nightly toolchains."
2018-02-17T12:26:28 #rust-dev-tools <jaykay> Sergio: alright. i guess i assumed that "works on stable" == "builds on stable". indeed i want to build, i'll install the nightly. thanks!
2018-02-17T12:27:00 #rust-dev-tools <Sergio> use*
2018-02-17T14:09:20 #rust-dev-tools <steveklabnik> jaykay: yeah, sergio is right
2018-02-17T14:09:35 #rust-dev-tools <steveklabnik> basically, rustfmt gets to cheat: since it's distributed with rust, it can use unstable features. just like the standard library
2018-02-19T19:01:55 #rust-dev-tools <tromey> I could use some advice on whether to try to land my rustc enum patches now, or only after I've finished the lldb work
2018-02-19T19:02:13 #rust-dev-tools <tromey> see https://internals.rust-lang.org/t/rust-debugging-quest/6753
2018-02-19T19:02:34 #rust-dev-tools <tromey> so far no responses to the questions in there
2018-02-19T20:26:30 #rust-dev-tools <nrc> mw, Manishearth:  thoughts ^ ?
2018-02-19T20:28:59 #rust-dev-tools <nrc> tromey: my vote would be to land sooner rather than later, but it is more of a guess than an educated opinion (I believe we have many more gdb users than lldb users)
2018-02-19T20:29:32 #rust-dev-tools <nrc> tromey: also, could you use libsyntax rather than making a custom parser using Syn? Maintenance for that would be pretty annoying, I think
2018-02-19T20:29:38 #rust-dev-tools <tromey> that's my belief as well but I don't really have any way to know
2018-02-19T20:29:47 #rust-dev-tools <nrc> We post libsyntax to crates.io and that is what rustfmt uses
2018-02-19T20:29:55 #rust-dev-tools <tromey> actually I am now reconsidering how to do the parser
2018-02-19T20:30:04 #rust-dev-tools <nrc> does your parser need to run under stable Rust?
2018-02-19T20:30:21 #rust-dev-tools <tromey> the parser is just one piece of this part of lldb - the rest being interpretation
2018-02-19T20:30:32 #rust-dev-tools <tromey> so I'm not sure outsourcing the parsing is a win overall
2018-02-19T20:30:46 #rust-dev-tools <tromey> so I may just write another one instead.  still thinking about it though
2018-02-19T20:31:02 #rust-dev-tools <nrc> could you use miri for the interpretation? Or is it closely linked to lldb?
2018-02-19T20:31:12 #rust-dev-tools <tromey> it has to be involved with lldb
2018-02-19T20:31:23 #rust-dev-tools <tromey> because only lldb can fetch data from the debuggee
2018-02-19T20:32:37 #rust-dev-tools <nrc> shame, writing a full Rust interpreter seems like a huge task
2018-02-19T20:33:16 #rust-dev-tools <tromey> I was only planning to handle a subset of the expression syntax; but yeah, one of the considerations is whether to try to support more
2018-02-19T20:33:31 #rust-dev-tools <tromey> the more that is done the more it would be good to pull in parts of the compiler
2018-02-19T20:34:03 #rust-dev-tools <tromey> there are difficult questions there though too, so my thinking was maybe to bootstrap with something simple, so we can unblock debuginfo improvements; then revisit these decisions again later
2018-02-19T21:15:15 #rust-dev-tools <sleffy> Hey folks! w.r.t. rustfmt has there been any discussion on something like an attribute to tell rustfmt that the inside of a macro is Rust source?
2018-02-19T21:15:58 #rust-dev-tools <sleffy> I'm working with futures-await and I'd like to attribute my `async_block! { ... }` calls somehow to tell RustFmt to "yes, the inside of this is supposed to be Rust source code, please format it as such."
2018-02-19T21:51:14 #rust-dev-tools <Manishearth> sleffy: clippy would >>love<< this
2018-02-19T21:51:43 #rust-dev-tools <sleffy> Manishearth, in a good way or in an "oh god everything is terrible now" way?
2018-02-19T21:51:57 #rust-dev-tools <Manishearth> no like in a good way
2018-02-19T21:52:04 #rust-dev-tools <sleffy> oh ok lol
2018-02-19T21:52:23 #rust-dev-tools <Manishearth> because we skip lints when macros are involved
2018-02-19T21:52:50 #rust-dev-tools <Manishearth> but if it's something like macro!(let foo = something_that_needs_linting()) it would be nice to be able to diferentiate
2018-02-19T21:52:53 #rust-dev-tools <sleffy> Ah, yeah. I can see how it'd be useful there
2018-02-20T11:28:52 #rust-dev-tools <mw> tromey, nrc, Manishearth: I replied on the forum thread
2018-02-20T19:31:47 #rust-dev-tools <eddyb> twk: hmmmmmmmm sadly rustc doesn't support it (although maybe it can be done hackily), but it'd be super cool if you could show that two different targets provide the same API
2018-02-20T19:32:08 #rust-dev-tools <eddyb> twk: at least for tier-1 platforms
2018-02-20T21:32:35 #rust-dev-tools <twk> eddyb: sounds interesting. I'll take a stab when I get some air - should be around the beginning of march
2018-02-20T21:32:46 #rust-dev-tools <twk> I'll ping you back when some progress is mad
2018-02-20T21:32:49 #rust-dev-tools <twk> *made
2018-02-20T21:33:00 #rust-dev-tools <eddyb> heh
2018-02-20T21:33:21 #rust-dev-tools <eddyb> twk: aturon and others might be interested in it because of the "compatibility lint" stuff
2018-02-20T21:33:32 #rust-dev-tools <twk> I see
2018-02-20T21:35:59 #rust-dev-tools <twk> I'll look into it then :)
2018-02-21T20:59:25 #rust-dev-tools <phansch> oli_obk_: In the message of my PR I mentioned another PR instead of the issue to be closed >_< can you close this one instead? https://github.com/rust-lang-nursery/rust-clippy/issues/2460
2018-02-21T21:05:17 #rust-dev-tools <oli_obk_> done
2018-02-22T00:44:48 #rust-dev-tools <aturon> nrc: i wonder if the custom test framework stuff might want to fall under a more general "Testing WG" this year, which could also cover issues like mocking
2018-02-22T00:44:50 #rust-dev-tools <aturon> cc nmatsakis 
2018-02-22T00:45:30 #rust-dev-tools <aturon> i know centril was interested in exploring testing more generally
2018-02-22T00:46:03 #rust-dev-tools <nrc> yeah, I would also like to see testing worked on more generally
2018-02-22T00:46:15 #rust-dev-tools <nrc> I think CTFs are def. the enabler for that
2018-02-22T00:47:20 #rust-dev-tools <nrc> we have a testing WG, they don't have a formal charter, but I think we all agree that they should be involved in some of the work of creating the first CTFs (in particular [#bench])
2018-02-22T00:47:54 #rust-dev-tools <nrc> so depending on how long the CTF impl stuff takes, I think looking at testing in general would be a good thing for them to do
2018-02-22T00:48:17 #rust-dev-tools <aturon> nrc: ahh! i hadn't noticed the "testing" WG
2018-02-22T00:48:21 #rust-dev-tools <aturon> very cool
2018-02-22T00:49:27 #rust-dev-tools <nrc> :-)
2018-02-22T00:56:04 #rust-dev-tools <xanewok> nrc, aturon: just a quick question - is anything planned for the later evening of 30th (Rust All Hands)?
2018-02-22T00:56:08 #rust-dev-tools <xanewok> asking since I'm not sure which flight back to book :)
2018-02-22T00:56:33 #rust-dev-tools <aturon> xanewok: relatively little is "planned" right now, but i'm sure there will be something :)
2018-02-22T00:56:43 #rust-dev-tools <aturon> xanewok: btw, just to check, are you receiving mall to the all-hands alias?
2018-02-22T00:56:48 #rust-dev-tools <aturon> (i'm not sure i have you down)
2018-02-22T00:57:05 #rust-dev-tools <xanewok> ah ok, was suspecting that'll be the case :) thanks!
2018-02-22T00:57:11 #rust-dev-tools <xanewok> yep, I get those!
2018-02-22T00:57:13 #rust-dev-tools <aturon> ok great
2018-02-22T00:58:37 #rust-dev-tools <xanewok> nrc: by the way, to be sure - does the recent change to RLS means we just always run in workspace_mode and ignore the user setting?
2018-02-22T01:51:50 #rust-dev-tools <nrc> xanewok: yes - I think it will be a temporary thing - either lots of people will complain and I'll switch back or nobody will complain and we can remove non-workspace mode
2018-02-22T08:29:54 #rust-dev-tools <xanewok> poor unsuspecting users 😈
2018-02-22T10:56:14 #rust-dev-tools <nmatsakis> does the RLS work for hacking on the compiler?
2018-02-22T10:56:22 #rust-dev-tools <nmatsakis> trying to figure out if it's worth trying to get it integrated into emacs :)
2018-02-22T10:56:36 #rust-dev-tools <nmatsakis> nrc: ☝️
2018-02-22T11:04:19 #rust-dev-tools <nmatsakis> (I guess answer is yes just from a dogfooding POV)
2018-02-22T14:21:10 #rust-dev-tools <nmatsakis> is there a way to see the RLS progress in finer grained detail?
2018-02-22T14:21:14 #rust-dev-tools <nmatsakis> e.g., the output from cargo or something
2018-02-22T14:24:24 #rust-dev-tools <nmatsakis> I'm also seeing warnings about "Found deprecated environment variables (RLS_PATH or RLS_ROOT). Use `rls.path` or `rls.root` setting", but I have no idea where that comes from... any tips?
2018-02-22T14:25:15 #rust-dev-tools <nmatsakis> (never mind)
2018-02-22T14:25:20 #rust-dev-tools <nmatsakis> (found that last one)
2018-02-22T17:53:55 #rust-dev-tools <nrc> nmatsakis: there is a PR in the queue to do something like that
2018-02-22T17:54:47 #rust-dev-tools <nrc> I would expect the RLS to work in theory on the compiler, but not in practice - because the code base is just too large to build quickly
2018-02-22T17:55:16 #rust-dev-tools <nrc> it might work quite well with 'build on save' set to true in your vs code settings
2018-02-22T17:55:29 #rust-dev-tools <nrc> I'm also not sure how it will work with the build system
2018-02-22T17:55:58 #rust-dev-tools <nmatsakis> nrc: ok; I filed https://github.com/rust-lang-nursery/rls/issues/729
2018-02-22T17:55:58 #rust-dev-tools <rustbot> [Issue 729] <open> assertion error: c.num == crate_map.len() as u32 <https://github.com/rust-lang-nursery/rls/issues/729>
2018-02-22T17:56:00 #rust-dev-tools <nmatsakis> fyi
2018-02-22T17:56:03 #rust-dev-tools <nmatsakis> I didn't see anything like that
2018-02-22T17:57:02 #rust-dev-tools <nrc> like what?
2018-02-22T17:57:37 #rust-dev-tools <nrc> I've not seen that assertion before, but if I can repro I'll take a look today (I've been trying to burn down RLS bugs recently)
2018-02-22T18:32:23 #rust-dev-tools <xanewok> nmatsakis: nrc: iirc that assertion is to ensure the correct local->global crate num/disambiguator mapping in the rls analysis
2018-02-22T18:33:40 #rust-dev-tools <xanewok> Didn’t read code now, but probably local crate ids emitted by the compiler in the metadata are not contiguous (continuous?)
2018-02-22T18:35:59 #rust-dev-tools <xanewok> just guessing, but did something change with crate ids/disambiguators or does the project has a different structure?
2018-02-22T18:40:52 #rust-dev-tools <nrc> yeah, I haven't looked at the code yet either, but it seems a really odd error, I've never seen an error with crate numbering before
2018-02-22T18:41:06 #rust-dev-tools <nrc> maybe stale data from before a crate was added?
2018-02-22T22:36:02 #rust-dev-tools <nmatsakis> nrc: xanewok: no idea. I did try `rm -rf target`
2018-02-22T22:36:10 #rust-dev-tools <nmatsakis> so if it's stale data, I don't know from what
2018-02-22T22:36:23 #rust-dev-tools <nmatsakis> the project structure is bog standard afaik
2018-02-23T01:11:47 #rust-dev-tools <Manishearth> nrc: ping
2018-02-23T01:16:51 #rust-dev-tools <Manishearth> nrc: we're talking about different things re: broken nightlies
2018-02-23T01:17:38 #rust-dev-tools <nrc> Manishearth: pong
2018-02-23T01:17:51 #rust-dev-tools <nrc> how so?
2018-02-23T01:17:56 #rust-dev-tools <Manishearth> nrc: writing up a comment
2018-02-23T01:22:37 #rust-dev-tools <Manishearth> nrc: posted
2018-02-23T01:23:10 #rust-dev-tools <Manishearth> nrc: tldr, the plan we'd envisioned for broken nightlies is that if you have clippy installed, it's as if nightlies without clippy do not exist 
2018-02-23T01:23:34 #rust-dev-tools <Manishearth> (we can of course have a note in `rustup update` saying that "there was a nightly for X but we updated to Y because X didn't contain clippy")
2018-02-23T01:25:15 #rust-dev-tools <nrc> rustup can actually do that, although we're not using the facility right now because there are never nightlies with tools missing
2018-02-23T01:25:34 #rust-dev-tools <nrc> well, we don't update to the last good version, we just don't update
2018-02-23T01:26:20 #rust-dev-tools <Manishearth> hmm
2018-02-23T01:26:29 #rust-dev-tools <Manishearth> latest good would be better, but nbd
2018-02-23T01:30:50 #rust-dev-tools <nrc> yeah, I think there are few things to do to polish that feature
2018-02-23T01:33:05 #rust-dev-tools <Manishearth> nrc: so is there an objection with shipping clippy with nightly now via this mechanism, provided we can commit to fixing rustup breakages?
2018-02-23T01:33:32 #rust-dev-tools <Manishearth> (we can, they're less than once a week, and minor to fix. would be nice to get notified immediately -- i think right now emails aren't going out?)
2018-02-23T01:33:44 #rust-dev-tools <Manishearth> (though that might be becaue clippy hasn't been broken for a month)
2018-02-23T01:34:07 #rust-dev-tools <nrc> Manishearth: I think we'd have to wait a little while to prove that the RLS is fixed and not going to offer up any more surprises - we're not comfortable with multiple potential sources of surprises
2018-02-23T01:34:49 #rust-dev-tools <Manishearth> nrc: okay
2018-02-23T01:34:51 #rust-dev-tools <Manishearth> nrc: wfm
2018-02-23T01:34:52 #rust-dev-tools <nrc> we should work out exactly what changes we'd want in Rustup and do some testing. I think we can start with what we have and improve, but we would need to check that it works as intended
2018-02-23T01:35:11 #rust-dev-tools <Manishearth> nrc: we could ship it now behind a secret env var
2018-02-23T01:35:28 #rust-dev-tools <Manishearth> I_AM_DEVTOOLS=true rustup component install clippy
2018-02-23T01:35:37 #rust-dev-tools <nrc> that wouldn't help with issues in the CI etc
2018-02-23T01:35:42 #rust-dev-tools <Manishearth> yeah
2018-02-23T01:35:49 #rust-dev-tools <Manishearth> that would help with finding out the kinks
2018-02-23T01:36:16 #rust-dev-tools <nrc> certainly when we do this, we can just not announce it, we don't even need an env var
2018-02-23T01:36:20 #rust-dev-tools <Manishearth> yeah
2018-02-23T01:36:28 #rust-dev-tools <nrc> to have some time to figure out the kinks
2018-02-23T01:36:41 #rust-dev-tools <Manishearth> nrc: oh, also, it's unclear to me why asking contributors to hand off PRs is a burden ?
2018-02-23T01:37:07 #rust-dev-tools <nrc> more important is we need to be as sure as possible that we're not going to be creating problems with CI, etc
2018-02-23T01:37:21 #rust-dev-tools <Manishearth> nrc: could you expand on that?
2018-02-23T01:37:51 #rust-dev-tools <nrc> Manishearth: it's just another little speed bump between writing code and landing it - and Rust is already fairly high friction what with being a huge code base, compile times, bors time, high review bar, etc.
2018-02-23T01:38:16 #rust-dev-tools <Manishearth> nrc: right, I'm saying bors time already encompasses this speed bump
2018-02-23T01:38:48 #rust-dev-tools <nrc> but there is more in recognising why a test has failed and who to ping and how much to care about it
2018-02-23T01:38:52 #rust-dev-tools <nrc> not the time
2018-02-23T01:39:10 #rust-dev-tools <Manishearth> that can be built into the CI
2018-02-23T01:39:40 #rust-dev-tools <Manishearth> we can have ./x.py build/test clippy output something about pinging people
2018-02-23T01:40:18 #rust-dev-tools <Manishearth> (we could also have it trigger a github bot, though that might be kinda weird)
2018-02-23T01:42:00 #rust-dev-tools <nrc> we'd have to talk it over with infra and core people, but my impression is that even with good automation, it would be pretty hard to make it zero friction
2018-02-23T01:42:38 #rust-dev-tools <Manishearth> hm
2018-02-23T01:43:52 #rust-dev-tools <Manishearth> nrc: how about this plan: we do not gate on it, however, travis will email or otherwise notify us on PRs that break clippy. If we catch it in time, we take over and fix it. If not, we have to fix it later
2018-02-23T01:44:35 #rust-dev-tools <nrc> I think that doesn't work because we only know it breaks Clippy when we're running the pre-landing tests and as soon as they complete, we merge
2018-02-23T01:44:49 #rust-dev-tools <nrc> we could propose a 24hr wait or something if tools break
2018-02-23T01:45:04 #rust-dev-tools <Manishearth> nrc: to clarify my motivation: it's the notifications I really care about -- because if we catch it early we can fix it in the same cycle, otherwise we have to make another PR and push it through bors
2018-02-23T01:45:17 #rust-dev-tools <Manishearth> the cycle time is the issue basically
2018-02-23T01:45:19 #rust-dev-tools <nrc> but we can land tools fixes with high priority, so I don't think that buys us much over landing, then fixing
2018-02-23T01:45:26 #rust-dev-tools <Manishearth> nrc: i guess yeah
2018-02-23T01:45:40 #rust-dev-tools <Manishearth> (because if the cycle time is too much we have a broken nightly)
2018-02-23T01:45:45 #rust-dev-tools <Manishearth> nrc: 24hr wait on what?
2018-02-23T01:45:51 #rust-dev-tools <Manishearth> oh, on landing?
2018-02-23T01:45:57 #rust-dev-tools <nrc> right
2018-02-23T01:46:00 #rust-dev-tools <Manishearth> that can work
2018-02-23T01:46:04 #rust-dev-tools <Manishearth> would need homu support
2018-02-23T01:46:32 #rust-dev-tools <nrc> yeah, plus any breaking PR is doubling the test runs and we don't have much margin for that right now :-(
2018-02-23T01:47:00 #rust-dev-tools <Manishearth> I have plans for that but I can't really help till I have time to hack on homu
2018-02-23T01:47:20 #rust-dev-tools <Manishearth> I'm the only one maintaining homu right now and major changes are hard. especially since it doesn't have tests
2018-02-23T01:47:40 #rust-dev-tools <Manishearth> (the basic plan is autorollups based on user signaling and travis)
2018-02-23T01:49:39 #rust-dev-tools <nrc> so, re "more important is we need to be as sure as possible that we're not going to be creating problems with CI, etc" basically the worry is unknowns - we don't want too many surprises. E.g., things (Clippy or compiler) breaking in unexpected ways, unexpected time pressure on builds or complicated processes for people involved, etc. It's hard to give
2018-02-23T01:49:39 #rust-dev-tools <nrc> specifics because it's the things that we're not expecting that are worrying - we found a lot of stuff on the RLS rollout and we don't want to repeat the experience with Clippy
2018-02-23T01:49:48 #rust-dev-tools <nrc> (although to be fair, Rustfmt was much smoother)
2018-02-23T01:50:36 #rust-dev-tools <nrc> e.g., the last surprise was updating Rustfmt is now blocked because we moved to workspaces for Rustfmt, and we can't have nested to workspaces
2018-02-23T01:50:49 #rust-dev-tools <Manishearth> nrc: what were the RLS issues?
2018-02-23T01:51:04 #rust-dev-tools <Manishearth> nrc: also, the RLS breaks when the AST/hir breaks, yeah?
2018-02-23T01:51:21 #rust-dev-tools <nrc> not any more - we use the version of libsyntax on crates.io
2018-02-23T01:51:29 #rust-dev-tools <nrc> but that would be one
2018-02-23T01:51:43 #rust-dev-tools <nrc> that users didn't like nightly RLS disappearing was a big one
2018-02-23T01:51:45 #rust-dev-tools <Manishearth> nrc: how does it do resolution?
2018-02-23T01:51:51 #rust-dev-tools <nrc> multiple rustup issues
2018-02-23T01:52:03 #rust-dev-tools <nrc> name resolution? Using the save-analysis data
2018-02-23T01:52:15 #rust-dev-tools <Manishearth> hmm
2018-02-23T01:52:32 #rust-dev-tools <nrc> I remember fixing a bunch of stuff in the CI, but I don't recall exactly what now
2018-02-23T01:52:45 #rust-dev-tools <nrc> sorry, build system, not CI
2018-02-23T01:53:16 #rust-dev-tools <nrc> being subject to rustfmt breakages
2018-02-23T01:53:37 #rust-dev-tools <nrc> getting broken by different versions of libs from crates.io c.f., the compiler
2018-02-23T01:54:05 #rust-dev-tools <nrc> some painful interaction with a Cargo update
2018-02-23T01:54:13 #rust-dev-tools <Manishearth> hmm
2018-02-23T01:54:28 #rust-dev-tools <nrc> I don't remember lots more - lots of little things, rather than anything big
2018-02-23T01:57:10 #rust-dev-tools <Manishearth> nrc: how far off is RLS from riding the trains?
2018-02-23T01:57:21 #rust-dev-tools <nrc> it already is
2018-02-23T01:57:29 #rust-dev-tools <nrc> it works on stable today
2018-02-23T01:57:34 #rust-dev-tools <nrc> Rustfmt too
2018-02-23T01:57:37 #rust-dev-tools <Manishearth> oh okay
2018-02-23T01:57:50 #rust-dev-tools <Manishearth> nrc: okay, you mentioned waiting for RLS to be smoothed out -- what's left there?
2018-02-23T01:57:54 #rust-dev-tools <Manishearth> and how long will that be?
2018-02-23T01:58:20 #rust-dev-tools <nrc> oh one thing we learnt from the RLS was that having something on nightly but not riding the trains was a pain, so we don't want to do that again (we didn't with Rustfmt for example)
2018-02-23T01:58:53 #rust-dev-tools <nrc> I'm not aware of anything that is broken right now, it's just a matter of time to prove out that the current situation is working, since the last changes were pretty recent
2018-02-23T01:59:26 #rust-dev-tools <nrc> it's a case of persuading the core team rather than anything technical, so "how long will that be" is a hard question to answer
2018-02-23T01:59:41 #rust-dev-tools <nrc> I hope we can talk through this all in Berlin and get a plan together
2018-02-23T02:00:31 #rust-dev-tools <nrc> but it might be that we need the higher level API in the compiler before the compiler team are happy
2018-02-23T02:00:44 #rust-dev-tools <nrc> I think Niko already started talking to you a bit about that?
2018-02-23T02:01:10 #rust-dev-tools <Manishearth> nrc: why was it a pain?
2018-02-23T02:01:19 #rust-dev-tools <Manishearth> nrc: wfm
2018-02-23T02:01:28 #rust-dev-tools <nrc> because it had to be done manually for every release
2018-02-23T02:01:46 #rust-dev-tools <Manishearth> nrc: yeah I have a plan. basically we can wrap most of the stuff clippy calls into into util functions, and put them in librustc_lint or something
2018-02-23T02:01:49 #rust-dev-tools <Manishearth> nrc: oh
2018-02-23T02:02:17 #rust-dev-tools <nrc> cool, I think it would be good to talk that over with compiler folk in Berlin and see what they think
2018-02-23T02:02:41 #rust-dev-tools <nrc> I don't have opinions about the details there, though I'm happy to share what has worked and what hasn't with RLS/Rustfmt
2018-02-23T02:06:35 #rust-dev-tools <Manishearth> nrc: thanks
2018-02-23T02:09:31 #rust-dev-tools <nrc> np, hopefully we can get this moving again soon
2018-02-23T02:12:10 #rust-dev-tools <Manishearth> thanks
2018-02-23T17:08:53 #rust-dev-tools <Manishearth> killercup: how do i manually run rustfix?
2018-02-23T17:09:56 #rust-dev-tools <killercup> Manishearth: what do you mean by manually exactly? running the cli tool?
2018-02-23T17:10:03 #rust-dev-tools <Manishearth> killercup: I'm running it on rustc
2018-02-23T17:10:07 #rust-dev-tools <Manishearth> I can have rustc output json
2018-02-23T17:10:40 #rust-dev-tools <Manishearth> but i don't know how to feed that to rustfix
2018-02-23T17:10:56 #rust-dev-tools <killercup> Manishearth: yeah, there's no such mode right now
2018-02-23T17:11:42 #rust-dev-tools <killercup> Manishearth: it's easy to add, probably, add a check here: https://github.com/killercup/rustfix/blob/master/src/main.rs#L100
2018-02-23T17:11:56 #rust-dev-tools <Manishearth> killercup: could you add it? :)
2018-02-23T17:12:21 #rust-dev-tools <killercup> Manishearth: sure, maybe later tonight :)
2018-02-23T17:20:11 #rust-dev-tools <Manishearth> killercup: i got a simple patch working, nvm
2018-02-23T17:20:17 #rust-dev-tools <Manishearth> would still appreciate this as a proper feature
2018-02-23T17:21:12 #rust-dev-tools <killercup> Manishearth: make a PR and i'll polish and land it :)
2018-02-23T17:22:01 #rust-dev-tools <killercup> the cli tool is still pretty bare-bones so i'm fine with adding ALL the stuff right now
2018-02-23T17:53:20 #rust-dev-tools <Manishearth> killercup: wooo got it working. with Hax.
2018-02-23T17:53:22 #rust-dev-tools <Manishearth> many hax
2018-02-23T17:53:26 #rust-dev-tools <Manishearth> all the hax, in fact
2018-02-23T17:53:33 #rust-dev-tools <killercup> nice
2018-02-23T17:53:33 #rust-dev-tools <Manishearth> oh shit it's recompiling core
2018-02-23T17:53:37 #rust-dev-tools <Manishearth> y u do dis
2018-02-23T17:55:24 #rust-dev-tools <Manishearth> killercup: oh god
2018-02-23T17:55:32 #rust-dev-tools <Manishearth> 344  |                                 $opt_expr as &dyn dep_tracking::DepTrackingHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHashHash).is_some() {
2018-02-23T17:55:38 #rust-dev-tools <Manishearth>      |                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
2018-02-23T17:55:42 #rust-dev-tools <killercup> wat
2018-02-23T17:56:28 #rust-dev-tools <Manishearth> killercup: no macro check
2018-02-23T18:17:21 #rust-dev-tools <Manishearth> killercup: hmm
2018-02-23T18:17:41 #rust-dev-tools <Manishearth> killercup: so the problem is that for errors originating in a macro, we emit the warning like ten times
2018-02-23T18:17:47 #rust-dev-tools <Manishearth> can rustfix dedup these?
2018-02-23T18:17:54 #rust-dev-tools <Manishearth> don't apply the same replacement
2018-02-23T18:18:04 #rust-dev-tools <Manishearth> also perhaps detect when code being replaced has already been modified
2018-02-23T18:18:10 #rust-dev-tools <Manishearth> and warn there
2018-02-23T18:18:13 #rust-dev-tools <Manishearth> even with --yolo
2018-02-23T18:36:55 #rust-dev-tools <killercup> Manishearth: yeah, sounds reasonable
2018-02-23T18:36:56 #rust-dev-tools <killercup> can you open an issue for that?
2018-02-23T18:37:08 #rust-dev-tools <killercup> just quote irc as description
2018-02-23T18:50:26 #rust-dev-tools <Manishearth> filed
2018-02-24T08:49:32 #rust-dev-tools <algesten> nrc: i'm rebasing off master again https://github.com/rust-lang-nursery/rls/pull/653#discussion_r169486777
2018-02-24T08:49:54 #rust-dev-tools <algesten> but this is getting to me. for some reason my changes seems to be in the most actively changed parts of the code :/
2018-02-24T10:30:40 #rust-dev-tools <algesten> xanewok: you around? what do you think about this test_deglob fail? is it my fault? :) https://github.com/rust-lang-nursery/rls/pull/653/commits/0529d91cf0707959567e07fa921bbd5b5672535d
2018-02-24T10:46:38 #rust-dev-tools <xanewok> algesten: yeah
2018-02-24T10:46:43 #rust-dev-tools <xanewok> let me check that
2018-02-24T10:47:46 #rust-dev-tools <xanewok> algesten: wait, doesn't this change basically just add another assertion (result.len() > 0)?
2018-02-24T10:47:53 #rust-dev-tools <xanewok> I'm sorry, I was out of the loop recently
2018-02-24T10:54:36 #rust-dev-tools <algesten> i added the assertion to make clear what was going. the zero length result is there.
2018-02-24T10:54:40 #rust-dev-tools <algesten> and it's a problem.
2018-02-24T10:54:52 #rust-dev-tools <algesten> *going on
2018-02-24T10:55:21 #rust-dev-tools <algesten> but nvm. i'll check master to see if that problem is there already.
2018-02-24T10:55:48 #rust-dev-tools <xanewok> yeah, got it
2018-02-24T10:55:51 #rust-dev-tools <xanewok> trying to repro, didn't compile the project in a while :)
2018-02-24T10:56:30 #rust-dev-tools <algesten> it's strange because i believe my changes are nowhere near code paths like that.
2018-02-24T10:56:51 #rust-dev-tools <algesten> but then. master passes. so :) 
2018-02-24T10:56:55 #rust-dev-tools <algesten> mea culpa!
2018-02-24T10:57:05 #rust-dev-tools <xanewok> I think it's probably more related to the order of messages, since our tests were pretty fixed on the diagnosticsBegin/End
2018-02-24T10:58:19 #rust-dev-tools <algesten> yeah. i fixed a problem like that today. need to get my head around how that result array gets filled for codeAction.
2018-02-24T10:58:26 #rust-dev-tools <algesten> thanks!
2018-02-24T10:59:08 #rust-dev-tools <xanewok> having declarative test suites would rock and I was supposed to work on this, but didn't manage to get something together in the end :(
2018-02-24T11:02:04 #rust-dev-tools <algesten> yeah the tests are rather opaque. relying on exact message order and message count.
2018-02-24T11:02:46 #rust-dev-tools <algesten> i especially dislike that if you `ExpectMessage` one too many, the test just hangs waiting for that message. i understand why, but it gets me every time :)
2018-02-24T11:10:56 #rust-dev-tools <algesten> oh. active_build_count.
2018-02-24T11:11:04 #rust-dev-tools <algesten> that's what it is
2018-02-25T23:25:37 #rust-dev-tools <Manishearth> killercup: https://github.com/rust-lang/rust/pull/48517
2018-02-25T23:25:38 #rust-dev-tools <Manishearth> !!!
2018-02-25T23:25:38 #rust-dev-tools <rustbot> !!!!
2018-02-25T23:25:41 #rust-dev-tools <Manishearth> !!!!!
2018-02-25T23:25:41 #rust-dev-tools <rustbot> !!!!!!
2018-02-25T23:25:43 #rust-dev-tools <Manishearth> !!!!!!
2018-02-25T23:25:43 #rust-dev-tools <rustbot> !!!!!!!
2018-02-25T23:28:48 #rust-dev-tools <Manishearth> killercup: actually, it's not enough
2018-02-26T21:05:12 #rust-dev-tools <Manishearth> killercup: fitzgen https://github.com/rust-lang/rfcs/pull/2285#issuecomment-358870673
2018-02-26T21:06:44 #rust-dev-tools <killercup> Manishearth: thx for the ping, +1'd
2018-02-28T19:17:39 #rust-dev-tools <sfackler> nrc: is there any way of getting rls to tell you *why* it can't parse a manifest?
2018-02-28T19:28:16 #rust-dev-tools <sfackler> particularly because the error in my case isn't due to a failure to parse the manifest afaikt
2018-02-28T20:11:41 #rust-dev-tools <nrc> sfackler: not sure, but I don't think there is an easy way, we use a crate, cargo_manifest for parsing the manifest and I think the parsing error would be internal in that
2018-02-28T20:11:55 #rust-dev-tools <nrc> the error message it returns might have better info, but I'm not sure
2018-03-01T20:41:09 #rust-dev-tools <killercup> we have a meeting in 20min, right? vidyo or irc?
2018-03-01T20:41:40 #rust-dev-tools <misdreavus> nrc sent out a calendar update earlier which ended the meeting schedule
2018-03-01T20:41:45 #rust-dev-tools <misdreavus> so, i dunno >_>
2018-03-01T20:42:08 #rust-dev-tools <nrc> no, meeting is cancelled
2018-03-01T20:42:21 #rust-dev-tools <nrc> I've been meaning to re-organise how we hold the meetings
2018-03-01T20:42:33 #rust-dev-tools <nrc> so we'll hae a revised schdeule from next week
2018-03-01T20:43:01 #rust-dev-tools <killercup> ah, alright!
2018-03-01T20:43:05 #rust-dev-tools <imperio> I have the feeling to follow some awesome tv show with a lot of new updates and all
2018-03-01T20:43:06 #rust-dev-tools <imperio> haha
2018-03-01T20:43:31 #rust-dev-tools * killercup can't parse mails that say "CHANGED: […] to March 1" when they mean "March 1 New Zealand time" :D
2018-03-01T20:43:37 #rust-dev-tools <misdreavus> "stay tuned for another exciting episode of, Rust Dev Tools"
2018-03-01T20:43:40 #rust-dev-tools <misdreavus> "!!!"
2018-03-01T20:43:43 #rust-dev-tools <killercup> !!!
2018-03-01T20:43:43 #rust-dev-tools <rustbot> !!!!
2018-03-01T20:44:21 #rust-dev-tools <imperio> !!!!
2018-03-01T20:44:21 #rust-dev-tools <rustbot> ❗❓❗
2018-03-01T20:44:25 #rust-dev-tools <imperio> mouhahaha
2018-03-01T20:44:57 #rust-dev-tools <killercup> lol
2018-03-01T20:50:58 #rust-dev-tools <misdreavus> okay, who edited the etherpad
2018-03-01T20:51:10 #rust-dev-tools <killercup> sorry not sorry
2018-03-01T20:51:12 #rust-dev-tools <misdreavus> lol
2018-03-01T21:49:43 #rust-dev-tools <xanewok> Will the new meetings cover all dev tools working groups from the newly announced groups?
2018-03-01T22:19:46 #rust-dev-tools <nrc> each working group is free to ahve their own meetings, the dev-tools ones should just cover overarching factors
2018-03-01T22:20:00 #rust-dev-tools <nrc> or things that need bubbling up, etc.
2018-03-04T22:26:22 #rust-dev-tools <killercup> nrc: pushed to soon? ;) https://marketplace.visualstudio.com/items/rust-lang.rust/changelog
2018-03-04T22:26:54 #rust-dev-tools <killercup> (i.e., published the ext before the commit that adds the 0.3.3 header to the changelog)
2018-03-04T22:29:51 #rust-dev-tools <nrc> I didn't add anything to the changelog - I forgot about it comletely :-s
2018-03-04T22:31:55 #rust-dev-tools <xanewok> window/progress notifications will make it -> RLS will be more transparent wrt progress and processing analysis!
2018-03-04T22:32:34 #rust-dev-tools <xanewok> hopefully more people will know what's going on and if/why RLS is not providing an optimal experience
2018-03-05T21:45:00 #rust-dev-tools <Manishearth> killercup: aturon woboats: can we get a quick rfc tick on https://github.com/rust-lang/rfcs/pull/2287 ?
2018-03-05T21:45:04 #rust-dev-tools <Manishearth> so that it can be closed
2018-03-05T21:45:33 #rust-dev-tools <killercup> Manishearth: sure thing, sorry for missing it before!
2018-03-05T21:45:48 #rust-dev-tools <aturon> Manishearth: it's your RFC, you can always just close it :)
2018-03-05T22:02:09 #rust-dev-tools <Manishearth> aturon: oh ok
2018-03-07T00:40:50 #rust-dev-tools <AndroUser> Rust packaging, how does that environment look like? i.e. Creating a tar.gz, srpm, rpm?
2018-03-07T00:59:20 #rust-dev-tools <steveklabnik> AndroUser: so, there are *some* automated tools
2018-03-07T00:59:31 #rust-dev-tools <steveklabnik> but, It Depends
2018-03-07T00:59:54 #rust-dev-tools <steveklabnik> generally, rust is 99% statically linked. which means "trivial to package" or "hard to package" depending on requirements
2018-03-07T01:08:55 #rust-dev-tools <AndroUser> Thanks @steveklabnik, nothing built into cargo right?
2018-03-07T01:12:12 #rust-dev-tools <steveklabnik> not built in; cargo is about building, not distributing
2018-03-07T01:12:13 #rust-dev-tools <steveklabnik> however
2018-03-07T01:12:17 #rust-dev-tools <steveklabnik> !crate debcargo
2018-03-07T01:12:18 #rust-dev-tools <rustbot> debcargo (1.3.0) - Create a Debian package from a Cargo crate. -> https://crates.io/crates/debcargo <https://docs.rs/debcargo>
2018-03-07T01:12:30 #rust-dev-tools <steveklabnik> some tools like this exist that extend carog
2018-03-07T01:12:33 #rust-dev-tools <steveklabnik> for these purposes
2018-03-07T01:14:19 #rust-dev-tools <AndroUser> Gotcha, okay. Haven't found anything for Rpm yet, shouldn't be too hard to figure out though. Thanks!
2018-03-07T18:11:46 #rust-dev-tools <Manishearth> killercup: ping
2018-03-12T10:20:01 #rust-dev-tools <eddyb> nrc: hmm save analysis chokes on TyError
2018-03-12T10:20:35 #rust-dev-tools <eddyb> nrc: and the VS Code extension makes it almost impossible to see ICEs
2018-03-12T10:20:45 #rust-dev-tools <eddyb> I had to use cargo rustc --release -- -Z save-analysis
2018-03-12T10:21:35 #rust-dev-tools <eddyb> nrc: https://github.com/rust-lang/rust/blob/4eea3597f2e978ebf81464485cea0eb79ee1a9e2/src/librustc_save_analysis/dump_visitor.rs#L1682
2018-03-12T10:21:40 #rust-dev-tools <eddyb> wait what
2018-03-12T10:21:46 #rust-dev-tools <eddyb> was this fixed already?
2018-03-12T10:22:00 #rust-dev-tools <eddyb> https://github.com/rust-lang/rust/pull/48778 haha nvm
2018-03-12T10:22:01 #rust-dev-tools <rustbot> [PR 48778] <merged> Fix save-analysis generation crash with invalid tuple access <https://github.com/rust-lang/rust/pull/48778>
2018-03-12T10:25:15 #rust-dev-tools <eddyb> also the thing to restart the RLS doesn't seem to work, I have to reload VS Code
2018-03-12T18:57:36 #rust-dev-tools <tom_> Hey!
2018-03-12T18:58:06 #rust-dev-tools <tom_> Just wanted to ask about the RLS, how far are we off from auto-import (i.e. 'use') insertion, like there is in most Java IDEs?
2018-03-12T18:58:22 #rust-dev-tools <tom_> Is this a hard problem? Can we hack it together with an external tool?
2018-03-12T18:58:54 #rust-dev-tools <tom_> This is the biiiiggest pain point for me right now! I'm finding myself loving stringly typed APIs just so I don't have to search for which enum is in which package
2018-03-12T18:59:33 #rust-dev-tools <tom_> Would be super interested in putting in some donkey work, just have no idea where to start / where this would ideally be implemented
2018-03-12T19:00:35 #rust-dev-tools <steveklabnik> iirc nrc said it was something he wanted, but hadn't done yet
2018-03-12T19:01:25 #rust-dev-tools <tom_> Who's nrc
2018-03-12T19:01:36 #rust-dev-tools <tom_> oh found it
2018-03-12T19:02:55 #rust-dev-tools <tom_> Ok, if I wanted to get familiar with rustc, what's the best way to go? The repo is huuuuuuuge
2018-03-12T21:51:20 #rust-dev-tools <llogiq> hi folks! is someone here knowledgeable about cargo test / the various test binaries?
2018-03-12T21:59:26 #rust-dev-tools <misdreavus> llogiq: depends, what do you need?
2018-03-12T22:02:07 #rust-dev-tools <misdreavus> i forget who the big contributors were to the recent flurry of design activity around libtest, but they come through here
2018-03-12T22:03:17 #rust-dev-tools <misdreavus> i could probably get some broad details tho
2018-03-12T23:47:01 #rust-dev-tools <xanewok> tom: there's actually a tracking issue for that! https://github.com/rust-lang-nursery/rls/issues/742
2018-03-12T23:47:05 #rust-dev-tools <xanewok> tom_: ^
2018-03-12T23:47:11 #rust-dev-tools <xanewok> there are more details listed there if needed
2018-03-13T00:46:22 #rust-dev-tools <llogiq> for cargo-mutagen, we have to recreate building tests with our plugin. j
2018-03-13T00:47:10 #rust-dev-tools <llogiq> doctests seem to be complicated.
2018-03-13T04:38:43 #rust-dev-tools <SovietBeer> hey
2018-03-13T04:39:13 #rust-dev-tools <SovietBeer> any idea how i can get RLS to work in sublime, i only always get this message: https://user-images.githubusercontent.com/535593/37321864-be7cadd2-267a-11e8-8dae-73312cc243c5.png
2018-03-13T04:39:39 #rust-dev-tools <SovietBeer> even after I execute this command
2018-03-13T07:31:40 #rust-dev-tools <soc> hi
2018-03-13T07:31:49 #rust-dev-tools <soc> can someone help me with cargo_install a bit?
2018-03-13T07:32:11 #rust-dev-tools <soc> I have a bit trouble figuring out what the purpose of root is and how it is used
2018-03-15T03:13:02 #rust-dev-tools <soc> hi, can someone have a look at https://github.com/rust-lang/cargo/pull/5183 ?
2018-03-16T20:13:05 #rust-dev-tools <eijebong> Hey RLS folks, is racer going to stay ? (I want to know if removing syntex would be worth my time)
2018-03-16T20:13:58 #rust-dev-tools <xanewok> In the end, no
2018-03-16T20:15:08 #rust-dev-tools <eijebong> xanewok: What's the timeline on that ? Is it 2 months ? 2 years ?
2018-03-16T20:15:27 #rust-dev-tools <xanewok> but in the near future I don’t think it’s going anywhere
2018-03-16T20:15:36 #rust-dev-tools <eijebong> xanewok: Ok, then I might try it :)
2018-03-16T20:16:02 #rust-dev-tools <xanewok> Couple of mobths?
2018-03-16T20:17:34 #rust-dev-tools <eijebong> xanewok: I'll see if I can find the same motivation as tonight and some more time in next couple of weeks
2018-03-16T21:56:51 #rust-dev-tools <nrc> lol
2018-03-16T21:56:57 #rust-dev-tools <nrc> couple of years is more likely
2018-03-16T21:57:35 #rust-dev-tools <nrc> eijebong: if you're thinking of working on Racer that would be awesome - it's causing more and more bugs in the RLS as its basically unmaintained
2018-03-16T21:57:56 #rust-dev-tools <nrc> it will be going away, but not for a while, the compiler work blocking the change-over is huge
2018-03-16T22:00:19 #rust-dev-tools <eijebong> nrc: Okay', couple of years seems like it would be worth one week of my free time :)
2018-03-16T22:01:10 #rust-dev-tools <eijebong> I'll see if I can get motivated for that (I should be bumping hyper in servo instead but meeeeeeeehhhhhhh looking for excuses not to do it o:))
2018-03-16T22:02:46 #rust-dev-tools <nrc> couple of years might be an exaggeration - I think one year is a reasonable timeline right now, but software...
2018-03-16T22:14:49 #rust-dev-tools <eijebong> nrc: Sure ^_^ But working on bumping dependencies to improve compile times seems like it would be worth my time with that time frame :)
2018-03-16T22:23:12 #rust-dev-tools <xanewok> by couple I meant ~6ish but I was overly optimistic, it seems!
2018-03-16T22:24:10 #rust-dev-tools <xanewok> nrc: I’d like to tackle the workspace target dir now for the RLS
2018-03-16T22:24:13 #rust-dev-tools <xanewok> Got caught up in servo and uni work recently, I’m sorry
2018-03-16T22:24:51 #rust-dev-tools <xanewok> do you think we should focus on something/do some prep work before all hands?
2018-03-16T22:25:33 #rust-dev-tools <xanewok> or just the direction we want to explore as listed in the dev tools all hands repo?
2018-03-16T22:26:32 #rust-dev-tools <eijebong> xanewok: Getting caught in servo is the worst xD
2018-03-16T22:30:19 #rust-dev-tools <nrc> xanewok: if you have specific topics you'd like to discuss, then I think it would be good to list those out, yeah
2018-03-16T22:31:07 #rust-dev-tools <nrc> workspace target dir would be great to address, thanks!
2018-03-16T22:36:59 #rust-dev-tools <xanewok> I’ll add to the list if what I have makes sense, but I think that there are, in general, 3 areas that RLS needs most love
2018-03-16T22:38:17 #rust-dev-tools <xanewok> The first one is supporting multiple use cases, like analyzing single files, supprting custom build systems, tests etc.
2018-03-16T22:38:44 #rust-dev-tools <xanewok> it’d be great to somehow think that through with Cargo team and come up with an initial direction we could go with this!
2018-03-16T22:39:09 #rust-dev-tools <xanewok> Second is general IDE features and code completion, but that’s still a long way
2018-03-16T22:40:08 #rust-dev-tools <xanewok> and the third one is transparency/debuggability? for the users
2018-03-16T22:40:40 #rust-dev-tools <xanewok> so they know more what RLS does and have easier time reporting those issues, as RLS grows more stable
2018-03-16T22:56:38 #rust-dev-tools <nrc> urgh, so many mysterious crashes: https://github.com/rust-lang-nursery/rls/issues/773
2018-03-16T22:56:54 #rust-dev-tools <nrc> I'm having a real hard time, since for me the RLS seems to be working really well :-(
2018-03-16T22:57:39 #rust-dev-tools <nrc> xanewok: the last point I've been thinking about too, recently
2018-03-16T22:57:55 #rust-dev-tools <nrc> I really need better info for these crashes in order to debug
2018-03-16T22:58:21 #rust-dev-tools <nrc> thinking about adding a debug mode
2018-03-16T22:58:44 #rust-dev-tools <nrc> which sets all the prefs we need in the vscode plugin and the RLS + logging env vars + backtrace
2018-03-16T22:58:49 #rust-dev-tools <nrc> and dumps to files
2018-03-18T18:04:04 #rust-dev-tools <Manishearth> killercup: ping
2018-03-18T18:05:59 #rust-dev-tools <killercup> Manishearth: pong
2018-03-18T18:08:14 #rust-dev-tools <killercup> Manishearth: ah, i think we wanted a rustfix release? sorry, have been trying to finish another project the last few weeks and didn't have much time outside of that
2018-03-18T18:13:11 #rust-dev-tools <Manishearth> killercup: not the release no
2018-03-18T18:13:23 #rust-dev-tools <Manishearth> killercup: basically, for rust 2018 we need rustfix to be perfect, yeah?
2018-03-18T18:13:32 #rust-dev-tools <Manishearth> killercup: I was wondering what your thoughts were on:
2018-03-18T18:13:35 #rust-dev-tools <Manishearth>  - where it is right now
2018-03-18T18:13:56 #rust-dev-tools <Manishearth>  - how much work (and what work) is necessary to make it ✨perfect⚡️
2018-03-18T18:14:02 #rust-dev-tools <Manishearth> er, perfect
2018-03-18T18:14:18 #rust-dev-tools <Manishearth>  - how much time you have to do said work
2018-03-18T18:14:27 #rust-dev-tools <Manishearth>   - if not, how hard would it be for me to do
2018-03-18T18:14:59 #rust-dev-tools <killercup> well, there are two parts to rustfix, as you know. the actual compiler suggestions, and the tool to apply them
2018-03-18T18:15:22 #rust-dev-tools <killercup> i have not looked at the suggestions for the ~~epoch~~ edition lints :(
2018-03-18T18:15:50 #rust-dev-tools <Manishearth>  killercup: ignore the suggestions
2018-03-18T18:15:54 #rust-dev-tools <Manishearth> killercup: I'm working on that
2018-03-18T18:16:08 #rust-dev-tools <Manishearth> i'm solely talking about the tool
2018-03-18T18:16:48 #rust-dev-tools <killercup> okay. for the tool to be 🌟perfect💥, we should probably rewrite the cli part, and make it feel more polished and not like something i wrote in an hour :)
2018-03-18T18:16:52 #rust-dev-tools <Manishearth> killercup: ideally we would bake fixture tests into rustc's testsuite too, so that we can have certain ui tests that also have fixture files (and verify that the warnings no longer show)
2018-03-18T18:17:30 #rust-dev-tools <killercup> right. i started working on this some time ago and opened a pr to clippy
2018-03-18T18:17:33 #rust-dev-tools <killercup> very WIP tho
2018-03-18T18:17:47 #rust-dev-tools <killercup> my hope was to get make this part of compiletest
2018-03-18T18:18:18 #rust-dev-tools <killercup> and at some point also write up a call for contributions to add a truckload of testcases
2018-03-18T18:19:01 #rust-dev-tools <Manishearth> killercup: i think the priority now would be to make it part of compiletest, it's fine if clippy doesn't get it yet
2018-03-18T18:19:22 #rust-dev-tools <killercup> yep. clippy was just my testcase
2018-03-18T18:19:22 #rust-dev-tools <Manishearth> as in, let's focus rustfix for the epoch, and later reuse the stuff we do for clippy
2018-03-18T18:19:25 #rust-dev-tools <Manishearth> cool
2018-03-18T18:19:35 #rust-dev-tools <Manishearth> killercup: okay, so where do you think rustfix is on tool maturity?
2018-03-18T18:19:40 #rust-dev-tools <killercup> the rustfix tests themselves also test some rustc stuff right now
2018-03-18T18:20:10 #rust-dev-tools <Manishearth> cool
2018-03-18T18:21:10 #rust-dev-tools <killercup> Manishearth: pre-school. i've only put very little time into the tool itself (though oli_obk_ added some stuff), and there are some open problems that need more design work
2018-03-18T18:21:27 #rust-dev-tools <killercup> (and that work should ideally happen quite soon, so we can get feedback and have a chance to make it really smooth)
2018-03-18T18:21:46 #rust-dev-tools <Manishearth> killercup: can you create a tracking issue?
2018-03-18T18:22:08 #rust-dev-tools <Manishearth> killercup: how much of this is mentorable?
2018-03-18T18:22:11 #rust-dev-tools <killercup> Manishearth: sure!
2018-03-18T18:22:22 #rust-dev-tools <Manishearth> killercup: and how much time do you have to work on this for 2018?
2018-03-18T18:22:31 #rust-dev-tools <Manishearth> (i can help, but i don't think i have time to do it myself. maybe.)
2018-03-18T18:24:03 #rust-dev-tools <killercup> Manishearth: we should probably sit down and write up a set of features we need for the user-facing tool, then we can probably break it down into tasks that are mentorable
2018-03-18T18:24:34 #rust-dev-tools <killercup> tho i'd probably try to set up the basics for that myself
2018-03-18T18:25:51 #rust-dev-tools <killercup> which brings to me how much time i have… well, not much, sadly. i have about 2 days/week to work on rust stuff starting after the all hands, but that will also include the cli wg
2018-03-18T18:27:11 #rust-dev-tools <killercup> Manishearth: i don't think it is *that* much work to get it to a state where we can have more people join in
2018-03-18T18:37:21 #rust-dev-tools <Manishearth> killercup: we can do this in berlin perhaps?
2018-03-18T18:38:11 #rust-dev-tools <killercup> Manishearth: that would be awesome :) we should have some spare time if i read the schedule correctly
2018-03-18T18:42:56 #rust-dev-tools <Manishearth> killercup: cool
2018-03-19T02:43:24 #rust-dev-tools <nrc> Manishearth: I think it would be good to start the Clippy lint audit in Berlin. I'm not sure we will do everything (and it probably wants to be an RFC in any case) but it would be good to at least do some planning, make some initial decisions, and consider how much movement there might be between compiler and Clippy. I think doing a one hour session for that
2018-03-19T02:43:25 #rust-dev-tools <nrc> would be good. Could you come up with a rough agenda please and leave it in https://github.com/nrc/dev-tools-team/tree/master/berlin-2018
2018-03-19T02:45:01 #rust-dev-tools <nrc> Manishearth or killercup - I would also like to dedicate an hour to custom test frameworks, could one of you draw up an agenda for that please?
2018-03-19T02:54:02 #rust-dev-tools <Manishearth> nrc: sounds good
2018-03-19T02:54:17 #rust-dev-tools <Manishearth> nrc: i kinda feel like the audit itself is something that doesn't need berlin to be done
2018-03-19T02:54:29 #rust-dev-tools <Manishearth> but discussing the other stuff sounds good
2018-03-19T02:55:59 #rust-dev-tools <nrc> yeah, but it would be good to plan/set expectations/get a range of opinions from a wider group - I feel like it can be hard to get people's attention and this is a good opportunity to do that
2018-03-19T04:05:50 #rust-dev-tools <Manishearth> maybe
2018-03-19T04:06:26 #rust-dev-tools <Manishearth> i don't think we can have a discussion about the audit that will be useful for anyone other than clippy maintainers before the clippy maintainers discuss things first
2018-03-19T07:22:05 #rust-dev-tools <nrc> Manishearth: maybe the clippy maintainers could have a meeting on the side early in the week to start the ball rolling? Then have a meeting for everyone later in the week?
2018-03-19T07:22:30 #rust-dev-tools <nrc> I've got you penciled in for 1:30 on Thursday at the moment
2018-03-19T08:46:10 #rust-dev-tools <oli_obk_> something I was wondering about clippy lints is whether we want namespaced lints similar to namespaced attributes
2018-03-19T08:46:41 #rust-dev-tools <oli_obk_> because that would make all the tooling around it much simpler (currently ppl spam `#[cfg(cargo_clippy...` everywhere
2018-03-19T08:52:39 #rust-dev-tools <nrc> oli_obk_: yes! the attributes RFC included scoped lints too
2018-03-19T08:52:53 #rust-dev-tools <nrc> just needs implementing
2018-03-19T08:59:12 #rust-dev-tools <oli_obk_> ah wonderful!
2018-03-19T08:59:23 #rust-dev-tools <oli_obk_> something to do on the trainride to Berlin I guess :D
2018-03-19T09:32:51 #rust-dev-tools <nrc> there was a fairly complete PR for the attirbutes part, but it needs a rebase and I think was closed
2018-03-19T15:01:35 #rust-dev-tools <Manishearth> nrc: yeah that may work
2018-03-19T15:01:43 #rust-dev-tools <Manishearth> oli_obk_: yeah I've wanted this!
2018-03-19T15:02:02 #rust-dev-tools <Manishearth> oli_obk_: my rough plan for the audit is to:
2018-03-19T15:02:21 #rust-dev-tools <Manishearth>  - determine categories for lints (style, perf, readability), and categorize
2018-03-19T15:03:35 #rust-dev-tools <Manishearth>  - turn off (by removing or by allow()ing) all the iffy lints (doc_markdown may be one of these?)
2018-03-19T15:25:52 #rust-dev-tools <oli_obk_> Manishearth: we def need a short meeting early in the all hands week
2018-03-19T15:29:29 #rust-dev-tools <Manishearth> yeah
2018-03-19T15:29:35 #rust-dev-tools <Manishearth> i think we can do it ad-hoc?
2018-03-19T15:29:45 #rust-dev-tools <Manishearth> oli_obk_: so llogiq is going to be there one of those days
2018-03-19T15:33:20 #rust-dev-tools <oli_obk_> Manishearth: yea, no need to plan, just throw it it when there's time
2018-03-19T23:29:07 #rust-dev-tools <eijebong> Hey, could anyone review/merge/release https://github.com/racer-rust/racer/pull/834 ? :) That would be nice
2018-03-19T23:29:56 #rust-dev-tools <eijebong> (This would help removing a lot of duplicated dependencies in rustc)
2018-03-20T00:12:37 #rust-dev-tools <nrc> jwilm: ping ^
2018-03-20T00:20:21 #rust-dev-tools <jwilm> eijebong: merged and published
2018-03-20T00:22:00 #rust-dev-tools <nrc> thank jwilm!
2018-03-20T02:09:33 #rust-dev-tools <eijebong> jwilm: <3 thnks
2018-03-20T10:59:36 #rust-dev-tools <peeves> holle
2018-03-20T16:22:28 #rust-dev-tools <eddyb> nrc: huh, any idea what could cause rust.cfg_test = true to not apply?
2018-03-20T16:24:23 #rust-dev-tools <xanewok> Hm, that’s weird
2018-03-20T16:24:49 #rust-dev-tools <xanewok> for cfg_test we construct rustc invocation with manualy added —cfg test
2018-03-20T16:25:25 #rust-dev-tools <xanewok> or —test for final crate type
2018-03-20T16:25:45 #rust-dev-tools <xanewok> Does it happen on a workspace?
2018-03-20T22:27:43 #rust-dev-tools <snorp> hi
2018-03-20T22:27:59 #rust-dev-tools <snorp> I'm using the rls plugin with vscode
2018-03-20T22:28:04 #rust-dev-tools <snorp> and it's generally great
2018-03-20T22:28:05 #rust-dev-tools <nrc> hey snorp!
2018-03-20T22:28:10 #rust-dev-tools <nrc> good to hear :-)
2018-03-20T22:28:14 #rust-dev-tools <snorp> is there a way to make it run 'cargo fmt' when I save?
2018-03-20T22:28:18 #rust-dev-tools <snorp> because that would be great.
2018-03-20T22:28:26 #rust-dev-tools <snorp> or just rustfmt on that file I guess?
2018-03-20T22:28:37 #rust-dev-tools <nrc> snorp: yes, https://github.com/rust-lang-nursery/rls-vscode#format-on-save
2018-03-20T22:29:07 #rust-dev-tools <nrc> it's a vs code option, not an RLS one, so we can't set it by default etc.
2018-03-20T22:29:18 #rust-dev-tools <nrc> but it does use the RLS and thus rustfmt
2018-03-20T22:29:53 #rust-dev-tools <snorp> ahh
2018-03-20T22:29:59 #rust-dev-tools <snorp> nrc: seems to work, thanks!
2018-03-20T22:30:04 #rust-dev-tools <snorp> oh god how did I ever not have this
2018-03-20T22:30:14 #rust-dev-tools <nrc> sweet!
2018-03-20T22:30:58 #rust-dev-tools <snorp> uh oh
2018-03-20T22:31:11 #rust-dev-tools <snorp> well it worked for a bit, now I get "RLS working" in the status when I save
2018-03-20T22:32:29 #rust-dev-tools <snorp> eh, reloaded the window and it's ok now
2018-03-20T22:33:08 #rust-dev-tools <nrc> if you haven't yet, you should update the RLS so you get the version from yesterday or today - I fixed a few bugs which could cause that
2018-03-20T22:33:25 #rust-dev-tools <snorp> nrc: ok, is updating the rls from vs code the best way?
2018-03-20T22:33:27 #rust-dev-tools <snorp> or rustup?
2018-03-20T22:33:44 #rust-dev-tools <nrc> if you're still seeing that and can reliably repro then I'd love a bug report - I've not been able to repro :-(
2018-03-20T22:33:57 #rust-dev-tools <nrc> either - vscode uses rustup for update
2018-03-20T22:35:24 #rust-dev-tools <snorp> nrc: ok, up-to-date now
2018-03-20T22:36:33 #rust-dev-tools <snorp> oops, rustfmt doesn't understand nom macros :/
2018-03-20T22:38:01 #rust-dev-tools <nrc> does it make them terrible?
2018-03-20T22:42:01 #rust-dev-tools <lqd> nrc: do you have thoughts on how one would correctly code features generating code such as this hack https://imgur.com/EpJO13M into the different parts of rls ? (there are points about how to get the hovered type, where to generate the "match" code, whether and where formatting the generated code, details about line endings and tabs/space, etc)
2018-03-20T22:42:29 #rust-dev-tools <snorp> nrc: yeah
2018-03-20T22:42:32 #rust-dev-tools <snorp> nrc: I filed a bug
2018-03-20T22:42:45 #rust-dev-tools <snorp> nrc: feels like it should mostly ignore macros except for like println! etc
2018-03-20T22:42:46 #rust-dev-tools <lqd> (or maybe an example of how it should be done so I can just follow that :)
2018-03-20T22:45:11 #rust-dev-tools <nrc> snorp: macros are tricky, we've had success with many macros which are very function-like for example, but it's hard to generalise well
2018-03-20T22:45:15 #rust-dev-tools <nrc> thanks for the bug report
2018-03-20T22:47:05 #rust-dev-tools <snorp> nrc: yeah
2018-03-20T22:47:30 #rust-dev-tools <nrc> lqd: I do have thoughts! It's kind of a big topic - the basic thing is that I think it should be a 'Command' message  in the LSP - we already have some commands implemented (deglob for example), so it should be possible to follow those to see how the server-integration works and to get the highlighted identifier, etc.
2018-03-20T22:48:39 #rust-dev-tools <nrc> I would generate the code badly then send it to rustfmt to format. I'm not sure how easy that is to do since you have to supply an indent and you're formatting an expression not an item - internally rustfmt can handle that, but there isn't API for it
2018-03-20T22:49:09 #rust-dev-tools <lqd> nrc: https://github.com/lqd/rls/commit/ec0a1e1872623547972b2e5f0c32cdd1c58544ec and https://github.com/lqd/rls-vscode/tree/match
2018-03-20T22:49:45 #rust-dev-tools <lqd> to me too much is done inside vscode in this prototype
2018-03-20T22:50:55 #rust-dev-tools <lqd> the formatting action can add another action to the undo stack, so I hacked it manually additionally to respect the existing indents and so on
2018-03-20T22:52:56 #rust-dev-tools <nrc> yeah, I think formatting should be done on the server-side before sending the generated text to the client
2018-03-20T22:53:07 #rust-dev-tools <snorp> https://irccloud.mozilla.com/pastebin/HcxL4Rx5/
2018-03-20T22:53:11 #rust-dev-tools <snorp> nrc: ^^^^ *cough*
2018-03-20T22:53:47 #rust-dev-tools <nrc> lqd: I think it can be a kind of command, rather than a custom message type
2018-03-20T22:53:53 #rust-dev-tools <snorp> nrc: actually some configurable stuff to ignore seems like a good idea
2018-03-20T22:54:23 #rust-dev-tools <lqd> all in all I'm not really sure how to turn this whole experiment into a worthy PR that could work well
2018-03-20T22:54:51 #rust-dev-tools <lqd> cool I'll look into the commands api
2018-03-20T22:55:56 #rust-dev-tools <nrc> snorp: are they the nom macros? Maybe you could factor out a macro blacklist into a const, then that seems fine to land
2018-03-20T22:56:13 #rust-dev-tools <snorp> nrc: it has like a billion macros
2018-03-20T22:56:47 #rust-dev-tools <snorp> possibly more
2018-03-20T22:57:03 #rust-dev-tools <nrc> :-s
2018-03-20T22:57:07 #rust-dev-tools <snorp> nrc: if I return None for the toplevel one will that skip everything in the tree?
2018-03-20T22:57:20 #rust-dev-tools <snorp> cause that would be good.
2018-03-20T22:57:30 #rust-dev-tools * snorp tries
2018-03-20T22:57:42 #rust-dev-tools <nrc> lqd: that looks like a good starting point. It would be good to identify what API you need in rls-analysis and rustfmt to make it not hacky
2018-03-20T22:57:51 #rust-dev-tools <nrc> snorp: it should, yeah
2018-03-20T22:59:56 #rust-dev-tools <lqd> nrc: IIRC from the rls side there wasn't access to a lot of semantic info about types (I could be wrong here, it's been a couple months) and had to parse strings to detect references, or the hovered type (without its crate or module) and so on ?
2018-03-20T23:00:48 #rust-dev-tools <nrc> lqd: yeah, the RLS doesn't really know things beyond mapping refs to defs
2018-03-20T23:01:49 #rust-dev-tools <lqd> and rls-analysis' show_type() returned a string I think and not a def, something like this
2018-03-20T23:02:21 #rust-dev-tools <lqd> indeed such things can be listed so we know where to do them correctly :)
2018-03-20T23:03:29 #rust-dev-tools <lqd> (at the time rls-analysis lacked complete information about enum variants' fields but it might have been fixed since then)
2018-03-20T23:04:57 #rust-dev-tools <lqd> (more precisely rustc's save-analysis rather than rls-analysis)
2018-03-20T23:07:26 #rust-dev-tools <snorp> nrc: oh hmm, maybe rustfmt_skip already does what I want?
2018-03-20T23:09:51 #rust-dev-tools <snorp> yeah, it does
2018-03-20T23:09:53 #rust-dev-tools <snorp> good enough for me
2018-03-20T23:12:11 #rust-dev-tools <nrc> lqd: I think we should be able to add that info if it is missing
2018-03-20T23:14:23 #rust-dev-tools <lqd> nrc: thanks for the answers :) I'll look into the fuzzy points, change to a command, make a list of items and get back to you if that's ok
2018-03-21T12:40:12 #rust-dev-tools <eijebong> Hey, looking at racer right now. Do you think replacing the Point type by Span would be the way to go ? AFAIK there's no way to get a BytePos equivalent with syn
2018-03-21T20:13:04 #rust-dev-tools <killercup> Manishearth: 
2018-03-21T20:13:07 #rust-dev-tools <killercup> https://github.com/rust-lang/rust/issues/49247
2018-03-21T20:21:51 #rust-dev-tools <Manishearth> thanks!
2018-03-21T20:22:11 #rust-dev-tools <Manishearth> killercup: so aiui the core logic is mostly fine, right?
2018-03-21T20:22:19 #rust-dev-tools <Manishearth> the rest doesn't seem like that much work
2018-03-21T20:22:39 #rust-dev-tools <killercup> Manishearth: the core logic is probably sounds but not very well tested :)
2018-03-21T20:22:48 #rust-dev-tools <Manishearth> kay
2018-03-21T20:22:57 #rust-dev-tools <killercup> i hope that focussing on a small subset of lints will make this all much easier
2018-03-21T20:23:01 #rust-dev-tools <Manishearth> killercup: i'd love to integrate fixture testing into rustc
2018-03-21T20:23:09 #rust-dev-tools <Manishearth> killercup: it would also help test the core logic
2018-03-21T20:23:20 #rust-dev-tools <Manishearth> perhaps we should stabilize the machine applicable flag
2018-03-21T20:23:35 #rust-dev-tools <Manishearth> and set it up so that you can mark tests as fixture tests
2018-03-21T20:23:54 #rust-dev-tools <Manishearth> and then have newbies work on migrating more suggestions to automatic ones which fixture tests can use
2018-03-21T20:24:11 #rust-dev-tools <Manishearth> once the underlying framework exists, this stuff is basically piles of easy bugs
2018-03-21T20:24:21 #rust-dev-tools <killercup> Manishearth: thats my hope too
2018-03-21T20:25:38 #rust-dev-tools <killercup> all these non-edition suggestions are nice to have, but might create a lot of PRs to review which is time consuming
2018-03-22T16:18:29 #rust-dev-tools <eijebong> Does racer have some tests somewhere else ? (The tests in the repo itself aren't exhaustive at all :/)
2018-03-23T22:54:57 #rust-dev-tools <xanewok> nrc: hey, do you think it's slowly time to prune workspace_mode: false code from RLS?
2018-03-23T22:55:37 #rust-dev-tools <xanewok> I got a small patch slowly ready for the target dir detection over at https://github.com/Xanewok/rls/tree/proper-target-dir
2018-03-23T22:56:07 #rust-dev-tools <xanewok> but it's done in the inferrence code and so I was wondering what to do about build_bin and the rest, since we just ignore everything related to workspace_mode: false by now
2018-03-25T07:44:13 #rust-dev-tools <nrc> xanewok: yeah, I was going to give it another week or so and then rip everything out
2018-03-25T07:44:46 #rust-dev-tools <nrc> if it's blocking work like he target dir, then feel free to to rip out bits now - we'll always have the Git history
2018-03-25T12:49:08 #rust-dev-tools <nrc> Manishearth and killercup: ping on agendas for the clippy lint audit and CTF meetings
2018-03-25T16:01:34 #rust-dev-tools <Manishearth> nrc: I need to meet with llogiq and oli_obk_ and discuss this first
2018-03-25T16:01:36 #rust-dev-tools <Manishearth> or just oli_obk_ 
2018-03-25T16:01:46 #rust-dev-tools <Manishearth> which will probably happen ad hoc tomorrow or the day after
2018-03-25T16:06:08 #rust-dev-tools <nrc> ok, cool
2018-03-25T16:33:58 #rust-dev-tools <xanewok> nrc: will there be notes from tomorrow's compiler consumers session?
2018-03-25T16:34:15 #rust-dev-tools <xanewok> I'm arriving afternoon tomorrow, so can't attend
2018-03-25T16:34:45 #rust-dev-tools <nrc> yes, there should be notes for all sessions
2018-03-25T16:35:00 #rust-dev-tools <nrc> good luck with the exam!
2018-03-25T21:17:48 #rust-dev-tools <xanewok> hey, thanks!
2018-03-26T09:35:12 #rust-dev-tools <nrc> xanewok: https://paper.dropbox.com/doc/Rust-All-Hands-2018-Compiler-and-its-consumers-zxdUwGHXzsGTs63zEEzg5
2018-03-26T11:08:07 #rust-dev-tools <xanewok> thanks!
2018-03-27T11:33:58 #rust-dev-tools <nrc> https://github.com/nrc/dev-tools-team/tree/master/berlin-2018#2018-edition-planning
2018-03-27T11:45:33 #rust-dev-tools <nrc> oli_obk_: ping could you join us to discuss edition planning?
2018-03-27T17:37:43 #rust-dev-tools <sfackler> nrc: crash! https://gist.github.com/sfackler/cc34cf455ff99c8c2ad164491568ef8f
2018-03-27T18:25:03 #rust-dev-tools <sfackler> https://gist.github.com/sfackler/8f11ed4dc0588ad9ebdddc6d24dc9989
2018-03-27T20:57:12 #rust-dev-tools <hdevalence> hey, I just noticed that the --features flag for `cargo rustdoc` has disappeared on nightly. does it have a replacement?
2018-03-27T20:57:49 #rust-dev-tools <sfackler> hdevalence: it's probably an accident from the switch from docopt to clap - i'd file an issue
2018-03-27T20:58:10 #rust-dev-tools <hdevalence> uh oh
2018-03-27T20:58:35 #rust-dev-tools <hdevalence> what's the correct upstream to file the issue on?
2018-03-27T20:59:00 #rust-dev-tools <sfackler> rust-lang/cargo
2018-03-27T20:59:17 #rust-dev-tools <hdevalence> thanks!
2018-03-27T21:04:33 #rust-dev-tools <hdevalence> separately, it would be nice to be able to do things like html-in-header and document-private-items without needing to call rustdoc manually
2018-03-28T23:16:16 #rust-dev-tools <hdevalence> Would it make sense to have a #[doc(html_in_header = ...)] attribute to allow stylesheet and JS injection, in the same way that there's a #[doc(html_logo_url = ...)] attribute?
2018-03-28T23:18:55 #rust-dev-tools <hdevalence> that way `cargo doc` could be used for custom docs as-is, without having to expose more rustdoc flags
2018-03-29T19:44:29 #rust-dev-tools <phansch> where was that PR (or issue?) that makes sure that the rust internal docs are always updated with every nightly?
2018-03-29T19:48:44 #rust-dev-tools <phansch> nvm, this is the one: https://github.com/rust-lang/rust-central-station/pull/40
2018-03-31T12:37:45 #rust-dev-tools <algesten> nrc: i think it's time i just acknowledge that i'm not going to have time to push the impl stuff in rls-analysis now. sorry!
2018-04-03T12:28:44 #rust-dev-tools <denisg> Hello, I'm trying to use RLS with the official VS Code extension (tried most recent nightly, clean rust installation, clean vs-code installation). The project is a simple gtk-rs example (happens in more complex projects, too). Running "cargo build" in the project directory prevents error squiggles from refreshing until I restart the extension. When restarting the extension, RLS re-indexes everything again, including the dependencies. 
2018-04-03T12:28:46 #rust-dev-tools <denisg> After that, "cargo build" needs to do a full rebuild, also with the dependencies. Should I open an issue? (rls or rls-vscode repository?) I found https://github.com/rust-lang-nursery/rls/issues/330 but my problem also includes rebuilds outside of RLS. Is there anything I can do to troubleshoot this?
2018-04-03T13:14:27 #rust-dev-tools <xanewok> denisg: I think this should be fixed after https://github.com/rust-lang/rust/pull/49587 lands
2018-04-03T13:14:52 #rust-dev-tools <xanewok> I introduced an error where RLS and cargo build artifacts stomp on each other
2018-04-03T13:16:36 #rust-dev-tools <xanewok> one possible fix would be to set "rust.target_dir" config in vscode to some external directory (as a temporary workaround), e.g. to "/home/<user>/rls-gtk-artifacts/" and see if that fixes the issue for now
2018-04-03T14:52:56 #rust-dev-tools <denisg> xanewok: Good to hear, that there is a fix on the way already :) The newest extension from the marketplace did not have the "rust.target_dir" preference: I tried with the version from git. Unfortunately, both RLS as well as cargo tasks still use the same directory. I just use the CARGO_TARGET_DIR env variable to move the actual build to another place, using the command line and not the task VS Code. Thanks for the workaround! :)
2018-04-03T16:03:43 #rust-dev-tools <sfackler> xanewok: any idea what could have caused this? https://github.com/rust-lang-nursery/rls/issues/804
2018-04-03T16:21:50 #rust-dev-tools <xanewok> sfackler: yeah, we moved target/ detection to initial config inferrence code
2018-04-03T16:22:13 #rust-dev-tools <xanewok> Which seems to fail when constructing ‚Workspace’
2018-04-03T16:23:14 #rust-dev-tools <xanewok> but that’s a shame, I would expect it not to fail completely when you can’t resolve the registry
2018-04-03T16:23:30 #rust-dev-tools <xanewok> Did the RLS work properly before, on this workspace?
2018-04-03T16:25:17 #rust-dev-tools <sfackler> yep
2018-04-03T16:25:27 #rust-dev-tools <sfackler> works on the current nightly rls
2018-04-03T16:25:31 #rust-dev-tools <sfackler> fails on rls master
2018-04-03T18:46:57 #rust-dev-tools <moobar> do tools like clippy and RLS share the same analysis work on the code, or do they both produce independent passes?
2018-04-03T18:47:22 #rust-dev-tools <moobar> I'm very new to Rust but I enjoy tinkering with development tools, and I'm trying to understand how the tooling landscape looks like
2018-04-03T18:47:45 #rust-dev-tools <moobar> it seems like it would be most efficient if the rust compiler exposed an API that all tooling used, so as to minimze the amount of work that needs to be done
2018-04-03T18:48:03 #rust-dev-tools <steveklabnik> that's basically what happens
2018-04-03T18:48:13 #rust-dev-tools <steveklabnik> but
2018-04-03T18:48:19 #rust-dev-tools <steveklabnik> different tools need different info
2018-04-03T18:48:26 #rust-dev-tools <steveklabnik> so, clippy and the RLS can't really share stuff
2018-04-03T18:48:46 #rust-dev-tools <steveklabnik> but it's all being worked on
2018-04-03T18:49:02 #rust-dev-tools <steveklabnik> we had a big meeting last week with various projects who need stuff out of rustc apis like this
2018-04-03T18:49:52 #rust-dev-tools <steveklabnik> https://paper.dropbox.com/doc/Berlin-Rust-2018-RLS-Compiler-Sync-VhP7wX7BNn2gGOLB6d5cj <- this is VERY in the weeds
2018-04-03T18:50:53 #rust-dev-tools <moobar> I'm used to writing Clojure, which has by far the best developer tooling I've experienced, but it's very different from Rust. so in Clojure I did a lot of my own ad hoc tooling via Emacs
2018-04-03T18:51:46 #rust-dev-tools <moobar> I really like tinkering with my editor, so it would be great if there was a low friction way of writing ad hoc tooling by querying the compiler
2018-04-03T18:52:27 #rust-dev-tools <moobar> I like the LSP, but it doesn't exactly lend itself to this type of hacking
2018-04-03T22:55:57 #rust-dev-tools <neersighted> does cargo propagate --feature flags to dependent crates?
2018-04-03T22:56:16 #rust-dev-tools <Sergio> neersighted: No.
2018-04-03T22:56:24 #rust-dev-tools <Sergio> Not unless the top-level project does so.
2018-04-03T22:56:35 #rust-dev-tools <neersighted> crap. is there a way to cause conditional compilation in a dependency?
2018-04-03T22:56:41 #rust-dev-tools <Sergio> Yes, enable the feature.
2018-04-03T22:57:04 #rust-dev-tools <Sergio> my-dep = { version = "1.3", features = ["feature"] }
2018-04-03T22:57:09 #rust-dev-tools <neersighted> ahh I see
2018-04-04T06:39:44 #rust-dev-tools <phansch> oli_obk: Hey! I'm going to add a T-Macros label to clippy and will tag a bunch of issues. I'm starting to collect some issues for potential libsyntax improvements
2018-04-04T06:59:10 #rust-dev-tools <oli_obk> phansch: sgtm
2018-04-05T05:53:54 #rust-dev-tools <IOException> Hi all. Hi @nrc. I having troubles with vscode + rls-rust extension. In the latest version I am not able to compile (cargo build) project from VSCode. Because of rls.exe uses dlls in target directory and doesnt release them when build started
2018-04-05T06:29:45 #rust-dev-tools <IOException> https://github.com/rust-lang-nursery/rls-vscode/issues/294
2018-04-05T06:50:19 #rust-dev-tools <IOException> https://github.com/rust-lang-nursery/rls/issues/810
2018-04-05T07:09:19 #rust-dev-tools <Ronaldho80-M> Dear all, I have a strange problem with rustup: I always get this error message:
2018-04-05T07:09:24 #rust-dev-tools * Ronaldho80-M sent a long message: Ronaldho80-M_2018-04-05_07:09:23.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/sxROfeeExAAOmKuYvYUsWUKF>
2018-04-05T07:10:16 #rust-dev-tools <Ronaldho80-M> This is with all current rust nightly versions
2018-04-05T07:12:06 #rust-dev-tools <Ronaldho80-M> I thought, I re-install everything. However, rustup-init won't let install rustup any more: It would always print
2018-04-05T07:12:29 #rust-dev-tools * Ronaldho80-M sent a long message: Ronaldho80-M_2018-04-05_07:12:29.txt <https://matrix.org/_matrix/media/v1/download/matrix.org/bGyickDxtfXvFtzgLyOWELLC>
2018-04-05T07:12:42 #rust-dev-tools <Ronaldho80-M> I am using rustup on Windows 7 with Msys64 and GNU
2018-04-05T07:13:11 #rust-dev-tools <Ronaldho80-M> Any help is appriciated. I could not find a hint in any github issue.
2018-04-06T08:45:57 #rust-dev-tools <xanewok> nrc: https://code.visualstudio.com/updates/v1_22#_related-information-in-errors-and-warnings!
2018-04-06T08:48:10 #rust-dev-tools <nrc> nice! that was quick
2018-04-06T09:43:50 #rust-dev-tools <killercup> xanewok: woah, awesome!
2018-04-07T14:54:52 #rust-dev-tools <bn3t> Hi, I am using rust-fmt via vscode. I was wondering if there was a way to make it reformat only VCS modified code.
2018-04-07T15:44:18 #rust-dev-tools <cmyr> hi all, is there a rustfmt roadmap anywhere?
2018-04-07T18:35:36 #rust-dev-tools <phansch> cmyr: afaik it's 'just' lots of testing/polishing and reaching 1.0 in 2018
2018-04-07T18:36:18 #rust-dev-tools <cmyr> phansch: cool, thanks
2018-04-07T18:36:26 #rust-dev-tools <phansch> cmyr: there's a tracking issue for 1.0: https://github.com/rust-lang-nursery/rustfmt/issues/1860
2018-04-07T18:37:26 #rust-dev-tools <cmyr> okay what I'm really curious about is whether Visual Blocks option will make it into stable at some point
2018-04-07T18:37:32 #rust-dev-tools <cmyr> couldn't find a tracking issue for that
2018-04-07T19:05:24 #rust-dev-tools <lqd> steveklabnik: thanks for the kind words on the Playground post Steve <3
2018-04-07T22:44:04 #rust-dev-tools <pzuraq> hey there, just asked this in beginners but I figured it may be better of here. I'm having some trouble setting up my dev environment with RLS, VSCode, and external crates. Seems like certain definitions are just not being found, I can't GoToDef or hover to see details, don't get any autocomplete, etc. I've seen some issues on the RLS repos but I'm unsure if it's the same problem, I'm not seeing actual errors or failures, it's
2018-04-07T22:44:04 #rust-dev-tools <pzuraq>  just not picking things up silently
2018-04-07T22:44:40 #rust-dev-tools <pzuraq> is this probably because of the state of RLS? Worth a bug report, or maybe I'm doing something obviously wrong?
2018-04-07T22:59:45 #rust-dev-tools <pzuraq> by contrast I'm able to step around pretty easily with Intellij in the same project (Amethyst.rs based game) but my understanding is it's not using RLS
2018-04-08T12:27:37 #rust-dev-tools <steveklabnik> lqd: <3
2018-04-08T15:59:29 #rust-dev-tools <xanewok> pzuraq: usually it depends on the project, but please open a bug report on the RLS repo with more info - it always helps =)
2018-04-09T17:05:48 #rust-dev-tools <hdevalence> did Cargo change rules about what packages are valid recently? `cargo publish` is failing because of an apparently invalid feature name, but the same feature specification worked fine last Friday...
2018-04-09T17:06:14 #rust-dev-tools <hdevalence> error: api errors: invalid upload request: invalid value: string "subtle/nightly", expected a valid feature name at line 1 column 2315
2018-04-10T18:17:59 #rust-dev-tools <Gankro> acrichto: if cbindgen is interested in having rustc do things like path resolution for it, what’s our devtools story for that
2018-04-10T18:18:57 #rust-dev-tools <Gankro> Err maybe nrc ^
2018-04-10T18:20:04 #rust-dev-tools <acrichto> Gankro: when you say path resolution, can you elaborate?
2018-04-10T18:20:08 #rust-dev-tools <acrichto> isn't cbindgen generating rust code?
2018-04-10T18:21:08 #rust-dev-tools <Gankro> acrichto: cbindgen is anti-bindgen, generates c code for your rust
2018-04-10T18:21:23 #rust-dev-tools <acrichto> ah aright
2018-04-10T18:21:31 #rust-dev-tools <acrichto> that currently works with syn
2018-04-10T18:21:31 #rust-dev-tools <acrichto> ?
2018-04-10T18:21:43 #rust-dev-tools <Gankro> acrichto: yes
2018-04-10T18:22:11 #rust-dev-tools <acrichto> hm ok, then this is probably a nrc questoin in the sense of rls would be "the way" to do this I think
2018-04-10T18:22:11 #rust-dev-tools <Gankro> Currently if there are two struct Foo’s anywhere in a crate we’ll blow up
2018-04-10T18:22:14 #rust-dev-tools <acrichto> but I wouldn't know much about that
2018-04-10T18:50:14 #rust-dev-tools <Gankro> nrc: when you wake up: cbindgen is interested in offloading: path resolution (so that we can disambiguate conflicting names in different modules); macro expansion (so we can get at types and functions found therein); and external visibility computation (is this type part of the crate's ultimate public API?) -- which of these can we expect RLS to be able to do for us?
2018-04-10T18:50:45 #rust-dev-tools <Gankro> (currently we fudge all these with heuristics which works ~fine but would be nice to not have to worry about)
2018-04-10T20:04:40 #rust-dev-tools <Gankro> nrc: also static needs_drop queries would be nice so we could generate C++ destructors that call mem::drop_in_place(this) 
2018-04-10T20:44:38 #rust-dev-tools <nrc> Gankro: I don't understand exactly what you need for path resolution - what is the input and required output?
2018-04-10T20:45:17 #rust-dev-tools <nrc> To summarise, the RLS might be able to give you the path resolution stuff, depending on exactly what is needed
2018-04-10T20:45:59 #rust-dev-tools <nrc> It can 'see through' macros, if that is what you need, but does not (yet) have information about actual expansion, so you couldn't re-expand or un-expand
2018-04-10T20:46:39 #rust-dev-tools <Gankro> If a function signature or type definition references a type Foo, we need to determine which of the many definitions in the crate with the name Foo is the right one to use
2018-04-10T20:47:01 #rust-dev-tools <nrc> currently you can get RLS info for everything, public things, or accessible things (things which are visible outside the crate). Which I think is what you want, but if you want to get everything and then find the visibility, you'd need to change the RLS code a bit (but it would be easy)
2018-04-10T20:47:13 #rust-dev-tools <Gankro> (so essentially Jump To Definition)
2018-04-10T20:47:26 #rust-dev-tools <nrc> I don't understand the `needs_drop` thing, but that sounds unlikely
2018-04-10T20:47:37 #rust-dev-tools <nrc> yeah, you can definitely do that
2018-04-10T20:48:17 #rust-dev-tools <Gankro> nrc: do we have to go through the language server protocol, or are there more powerful rust apis to bind to?
2018-04-10T20:49:00 #rust-dev-tools <Gankro> nrc: needs_drop: query if a type impls Drop, basically
2018-04-10T20:51:18 #rust-dev-tools <Gankro> (also is there a way to wait for the “perfect” results rustc should produce (as opposed to racer))
2018-04-10T20:52:02 #rust-dev-tools <nrc> You should use the rls-analysis crate - it is the data for the RLS, but without the LSP stuff
2018-04-10T20:52:17 #rust-dev-tools <nrc> If there is not quite the API you need, then we can add it
2018-04-10T20:52:37 #rust-dev-tools <nrc> We don't have impl data yet, so I don't think you can do the Drop thing
2018-04-10T21:15:27 #rust-dev-tools <Gankro> nrc: when RLS is usable on stable, while rls-analysis also be?
2018-04-10T21:15:45 #rust-dev-tools <Gankro> *will rls-analysis also be
2018-04-10T21:18:10 #rust-dev-tools <nrc> the issue is running rustc to get the save-analysis data out - technically that is an unstable flag, but you can use the secret env var or a shim around rustc (which is what the RLS does)
2018-04-10T21:18:29 #rust-dev-tools <nrc> the rls-analysis crate works on stable I think (it is pretty simple)
2018-04-10T21:18:35 #rust-dev-tools <nrc> going afk for a bit...
2018-04-10T21:47:18 #rust-dev-tools <nrc> back
2018-04-11T15:55:18 #rust-dev-tools <Gankro> acrichto: how do you debug/test 32-bit windows bugs in the rust toolchain?
2018-04-11T15:56:08 #rust-dev-tools <Gankro> acrichto: please save me from having to physically set up and install a machine for this https://bugzilla.mozilla.org/show_bug.cgi?id=1448868#c12
2018-04-11T15:58:30 #rust-dev-tools <matklad> Gankro: I use these images for windows: https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/
2018-04-11T16:29:03 #rust-dev-tools <acrichto> Gankro: ah ufnortunately I use a physical machine
2018-04-11T16:29:12 #rust-dev-tools <acrichto> I used a vm for years but I got fed up with it eventually
2018-04-11T16:29:24 #rust-dev-tools <Gankro> acrichto: would you be willing to test that bug I linked, oh toolchain guru?
2018-04-11T16:32:08 #rust-dev-tools <acrichto> Gankro: I can try yeah, does it have a small test case or is it "check out firefox and do this"
2018-04-11T16:32:19 #rust-dev-tools <Gankro> all I ask emilio
2018-04-11T16:34:42 #rust-dev-tools <Gankro> acrichto: CC'd you on the bug so you'll hopefully see their answer
2018-04-11T16:35:09 #rust-dev-tools <emilio> acrichto: Youd need to make Firefox panic somehow, let me find something
2018-04-11T16:36:08 #rust-dev-tools <acrichto> emilio: hm I'm not quite set up for that...
2018-04-11T16:36:14 #rust-dev-tools * acrichto hasn't ever built firefox on windows
2018-04-11T16:37:30 #rust-dev-tools <emilio> acrichto: hmm... Yeah, let me find a crashtest that panics, downloading nightly and opening that page should work
2018-04-11T16:38:02 #rust-dev-tools <acrichto> emilio: er what I mean is that if this involves debugging all of firefox I may not be too usefu
2018-04-11T16:40:22 #rust-dev-tools <emilio> acrichto: yeah, just crashing ff and pasting the crash report link if it contains the panic message would be useful... I guess I can try to find a win32 machine / os otherwise 
2018-04-11T16:40:32 #rust-dev-tools <acrichto> oh I can do that yeah
2018-04-11T16:40:36 #rust-dev-tools <acrichto> in that I'm running a windows machine
2018-04-11T16:40:43 #rust-dev-tools <acrichto> if it's just download a binary, run, and paste
2018-04-11T16:40:57 #rust-dev-tools <emilio> acrichto: yeah should be
2018-04-11T16:41:17 #rust-dev-tools <sgift> Win32 = A 32 bit Windows or any windows in this context?
2018-04-11T16:42:05 #rust-dev-tools <emilio> acrichto: https://bugzilla.mozilla.org/attachment.cgi?id=8921190 should still crash nightly / release, though on android it does not apparently (on my phone)
2018-04-11T16:42:40 #rust-dev-tools <emilio> sgift: 32-bit windows, or at least 32-bit build of ff
2018-04-11T16:43:31 #rust-dev-tools <sgift> Okay, I run 64bit nightly. (which doesn't crash with your link)
2018-04-11T16:44:51 #rust-dev-tools <acrichto> emilio: oh I just opened it on stable and it died
2018-04-11T16:44:55 #rust-dev-tools <acrichto> should I try nightly?
2018-04-11T16:45:50 #rust-dev-tools <emilio> acrichto: no, that's great. If it died it means that it panicked right? Can you go to about:crashes and paste the link?
2018-04-11T16:45:54 #rust-dev-tools <acrichto> hm
2018-04-11T16:45:57 #rust-dev-tools <acrichto> well it died on stable
2018-04-11T16:46:01 #rust-dev-tools <acrichto> I just tried on nightly and it works
2018-04-11T16:46:13 #rust-dev-tools <acrichto> but if I needa 32-bit build I probably am not using that
2018-04-11T16:46:35 #rust-dev-tools <emilio> acrichto: hmm, the stable crash report should be enough, wdym with "it died"?
2018-04-11T16:46:50 #rust-dev-tools <acrichto> oh ok, I'll get that
2018-04-11T16:46:54 #rust-dev-tools <acrichto> er the tab crashed
2018-04-11T16:46:56 #rust-dev-tools <emilio> acrichto: I think someone disabled the editor ui on nightly, so that could explain it
2018-04-11T16:46:57 #rust-dev-tools <acrichto> lemme get you a link
2018-04-11T16:47:06 #rust-dev-tools <emilio> acrichto: awesome, tyvm!
2018-04-11T16:47:30 #rust-dev-tools <acrichto> https://crash-stats.mozilla.com/report/index/d799649f-6676-4216-8060-52da81180411
2018-04-11T16:47:46 #rust-dev-tools <acrichto> emilio: is that what you're looking for?
2018-04-11T16:50:02 #rust-dev-tools <emilio> acrichto: yup! And that seems to be working as expected (the panic message shows up), so I guess I need to build nightly myself and see if it still works there, since I don't have a crasher around
2018-04-11T16:50:21 #rust-dev-tools <emilio> acrichto: anyway ty!
2018-04-11T16:50:53 #rust-dev-tools <acrichto> np!
2018-04-11T19:28:17 #rust-dev-tools <lqd> steveklabnik: I think I found the reason for the FOUT in doxidize ;)
2018-04-11T19:29:07 #rust-dev-tools <steveklabnik> oh?
2018-04-11T19:29:36 #rust-dev-tools <lqd> steveklabnik: also, for me (osx sierra) http://127.0.0.1:7878/doxidize/index.html returns the "incorrect path" but http://127.0.0.1:7878/public/doxidize/index.html works
2018-04-11T19:30:03 #rust-dev-tools <lqd> steveklabnik: yeah it seems to be https://github.com/steveklabnik/doxidize/blob/master/templates/html/page.hbs#L1
2018-04-11T19:32:02 #rust-dev-tools <steveklabnik> ...... lolwhaaaaaaaaaaaaaaaaaaaaaaaat
2018-04-11T19:32:06 #rust-dev-tools <lqd> :D
2018-04-11T19:32:32 #rust-dev-tools <lqd> I had the same reaction, maybe it was a trick I didn't know :)
2018-04-11T19:33:42 #rust-dev-tools <lqd> without this there's only sometimes the typeface and syntax highlighting (as you'd expect) that flashes, so, yeah
2018-04-11T19:36:21 #rust-dev-tools <steveklabnik> well i will happily take a PR to fix that, hehe
2018-04-11T19:37:58 #rust-dev-tools <lqd> steveklabnik: alright I'll see what I can do :3
2018-04-11T19:39:04 #rust-dev-tools <lqd> steveklabnik: do you yourself have to have "/public/" so that static serving works btw ?
2018-04-11T19:39:18 #rust-dev-tools <steveklabnik> i haven't been hacking on doxidize lately
2018-04-11T19:39:21 #rust-dev-tools <steveklabnik> so i am not sure
2018-04-11T19:39:33 #rust-dev-tools <steveklabnik> it's not my intention to require /public/
2018-04-11T19:39:36 #rust-dev-tools <steveklabnik> so sounds like it's maybe a bug
2018-04-11T19:39:52 #rust-dev-tools <lqd> oh ok, thank you
2018-04-11T19:57:01 #rust-dev-tools <lqd> steveklabnik: I'm not sure it fixes https://github.com/steveklabnik/doxidize/issues/73 as it seems both about unstyled flashing (which should be fixed) as well as the sidebar state — but here you go https://github.com/steveklabnik/doxidize/pull/102
2018-04-11T19:58:29 #rust-dev-tools <steveklabnik> thanks, yeah we'll see
2018-04-11T19:58:36 #rust-dev-tools <steveklabnik> it's a good change regardless
2018-04-11T20:00:26 #rust-dev-tools <lqd> agreed we'll see :)
2018-04-11T20:21:27 #rust-dev-tools <lqd> steveklabnik: oops I shouldn't have used "fixes #xx" ?
2018-04-11T20:24:58 #rust-dev-tools <lqd> or maybe was it the wrong issue
2018-04-11T20:25:31 #rust-dev-tools <eijebong> lqd: Numbers are hard ;)
2018-04-11T20:26:07 #rust-dev-tools <lqd> eijebong: 2hard4me
2018-04-11T20:26:19 #rust-dev-tools <eijebong> lqd: 3hard5me
2018-04-11T20:27:05 #rust-dev-tools <lqd> eijebong: ∞hard(∞+1)me
2018-04-11T20:27:42 #rust-dev-tools <steveklabnik> yeah i think it was the wrong issue
2018-04-11T20:27:43 #rust-dev-tools <steveklabnik> its fine
2018-04-11T20:30:33 #rust-dev-tools <lqd> :( sorry
2018-04-11T20:30:48 #rust-dev-tools <steveklabnik> no worries at all
2018-04-12T10:15:46 #rust-dev-tools <blaphmat> Hi guy
2018-04-12T10:15:49 #rust-dev-tools <blaphmat> gguys
2018-04-12T18:27:33 #rust-dev-tools <augi> is there a way to pass --cfg 'key="value"' to RLS?
2018-04-12T18:27:50 #rust-dev-tools <augi> namely from the VS Code extension
2018-04-12T18:45:27 #rust-dev-tools <killercup> augi: to rls? not sure. but you can pass flags to the compiler using the rust.rustflags setting
2018-04-12T18:47:38 #rust-dev-tools <augi> yeah i tried build.rustflags = """--cfg 'key="value"'"""
2018-04-12T18:48:00 #rust-dev-tools <augi> and also tried as ["--cfg", "key='value'"]
2018-04-12T18:49:27 #rust-dev-tools <augi> rust.rustflags appears to also not work
2018-04-13T07:34:10 #rust-dev-tools <nrc> xanewok: you might be interested in https://github.com/rust-lang-nursery/rls/commit/1d8a5a3befc955d6b027ffa76d129f97b164ad54 it changes the build plan stuff, let me know if you think there is a better way to do it, or if we could further improve
2018-04-13T07:34:33 #rust-dev-tools <nrc> I didn't put a PR up because I want to land it quickly and get it on nightly (although that is blocked by a rustfmt bug)
2018-04-13T07:39:39 #rust-dev-tools <xanewok> nrc: will take a look, thanks
2018-04-13T18:22:47 #rust-dev-tools <runbmp> do any of the clippy or rustfmt features included in the latest rls require nightly?
2018-04-13T18:31:52 #rust-dev-tools <oli_obk_> runbmp: clippy only works on nightly
2018-04-13T18:32:05 #rust-dev-tools <oli_obk_> (and beta accidentally, soon to be removed)
2018-04-13T18:32:18 #rust-dev-tools <Manishearth> oli_obk_: wait we work on beta ?
2018-04-13T18:32:19 #rust-dev-tools <Manishearth> lol
2018-04-13T18:32:22 #rust-dev-tools <Manishearth> don't remove it
2018-04-13T18:32:24 #rust-dev-tools <Manishearth> keep it
2018-04-13T18:32:35 #rust-dev-tools <Manishearth> clippy stability: SOLVED
2018-04-13T18:32:43 #rust-dev-tools <oli_obk_> haha
2018-04-13T18:33:00 #rust-dev-tools <oli_obk_> Manishearth: https://github.com/rust-lang/rust/pull/49876
2018-04-13T18:33:14 #rust-dev-tools <oli_obk_> I have too many PRs in flight: https://github.com/rust-lang/rust/pulls/oli-obk
2018-04-14T05:01:09 #rust-dev-tools <sleffy> Hey folks! Is this the right place to ask around about maybe getting some better formatting styles for RustFmt w.r.t. use_nested_groups?
2018-04-14T05:03:26 #rust-dev-tools <sleffy> Specifically, when you have `use foo::{bar, baz::{quux, corge}, garply::{grault, flarp}};`, RustFmt leaves it all on one line *or* indents it without breaking up nested groups.
2018-04-14T05:04:43 #rust-dev-tools <sleffy> I would personally be tickled to see RustFmt split this up like it does with struct constructors (best metaphor I can think of?)
2018-04-14T05:06:02 #rust-dev-tools <sleffy> e.g. with a large nested `use` item, indent inner paths proportionally to their depth
2018-04-14T09:38:27 #rust-dev-tools <nrc> sleffy: some discussion here: https://github.com/rust-lang-nursery/fmt-rfcs/issues/24#issuecomment-381296529
2018-04-14T09:38:41 #rust-dev-tools <nrc> please join the conversation!
2018-04-16T07:36:36 #rust-dev-tools <xanewok> nrc: you here by any chance?
2018-04-16T07:37:08 #rust-dev-tools <xanewok> that commit you sent looks good, thanks for fixing these bugs!
2018-04-16T07:38:00 #rust-dev-tools <xanewok> I have a question about https://github.com/rust-lang-nursery/rls/commit/1d8a5a3befc955d6b027ffa76d129f97b164ad54#diff-f56324a618b56dfd0828c1461de66622R202
2018-04-16T07:38:39 #rust-dev-tools <xanewok> can't we just filter out first targets that of which modified is the prefix? (so filter first, before max_by_key?)
2018-04-17T20:15:23 #rust-dev-tools <tomas_gallegos-M> hello guys, I have a question about Redox ?
2018-04-17T20:24:37 #rust-dev-tools <cmyr> tomas_gallegos-M: you might want to try the #redox channel
2018-04-17T21:56:13 #rust-dev-tools <nrc> I have created a dev-tools room on Gitter: https://gitter.im/rust-lang/dev-tools, please join! 
2018-04-17T22:55:38 #rust-dev-tools <nrc> and gitter channels for all the new working groups!
2018-04-17T22:55:56 #rust-dev-tools <nrc> WG-bindgen, WG-debugging, WG-clippy, WG-doxidize, WG-rustfmt, WG-rustup, WG-testing, WG-edition-tools
2018-04-18T09:49:27 #rust-dev-tools <duriantang> rls findImpls not works
2018-04-19T21:40:26 #rust-dev-tools <sfackler> nrc: is rls-vscode responsible for deciding when the completion dropdown thing appears or is vscode itself in charge of that? It always shows up when I type a `.` in a comment which is kind of annoying
2018-04-19T21:41:03 #rust-dev-tools <nrc> I think vscode decides, but it might be configurable by the extension
2018-04-19T21:41:21 #rust-dev-tools <nrc> that is, the extension tells it to drop down on `.`, I'm not sure if it's possible to exclude comments
2018-04-19T21:41:36 #rust-dev-tools <nrc> argh
2018-04-19T21:41:40 #rust-dev-tools <nrc> trying to be clear
2018-04-19T21:41:43 #rust-dev-tools <nrc> the code is in vscode
2018-04-19T21:42:05 #rust-dev-tools <nrc> the configuration (that `.` and `::` are code completion points) is in the configuration of the extension
2018-04-19T21:42:18 #rust-dev-tools <nrc> and I'm not sure how flexible the configuration is
2018-04-19T21:42:22 #rust-dev-tools <sfackler> ah ok thanks
2018-04-20T00:52:21 #rust-dev-tools <sfackler> nrc: is this a rustfmt bug or intended? https://gist.github.com/sfackler/66caf6c7af535d5679e5d4bbb53c0eb6
2018-04-20T01:02:15 #rust-dev-tools <nrc> intended-ish - https://github.com/rust-lang-nursery/rustfmt/issues/2620 is about making this look nicer
2018-04-20T01:13:10 #rust-dev-tools <duriantang> fmt default max_width is 100
2018-04-22T11:38:00 #rust-dev-tools <OliverUv> The ALE plugin for vim just landed support for autocompletion from LSP, including rust support. Testers wanted: https://github.com/w0rp/ale/commit/d8a673515a8ec9fd102d6da8d8fa499ae2770f11
2018-04-22T17:05:32 #rust-dev-tools <Phrohdoh> Is there a diagnostic (or a ticket to implement) in rls-vscode to fully-qualify a symbol (as much as necessary anyway)?
2018-04-22T17:06:04 #rust-dev-tools <Phrohdoh> Right now I am getting a "Add `use the:full::path::Thing;`" diagnostic but would like vscode/rls to suggest qualifying the current symbol instead of adding a `use`.
2018-04-22T17:06:56 #rust-dev-tools <Phrohdoh> Is this not yet implemented in the RLS itself?
2018-04-22T20:26:30 #rust-dev-tools <killercup> Phrohdoh (hoping you'll read the channel logs): this is currently what rustc's diagnostics give us: https://github.com/rust-lang/rust/blob/dcb44ca2f7ff8b4092750eb98f02ac4f9a2bfbe9/src/librustc_resolve/lib.rs#L4321
2018-04-22T20:27:37 #rust-dev-tools <killercup> not sure how useful it is to add an "or use fully qualified path" to each of the candidates
2018-04-22T20:28:25 #rust-dev-tools <killercup> cause even a simple thing like https://play.rust-lang.org/?gist=71eaecf09462c7c992bae3cbe012a1ff&version=stable can hit multiple candidates
2018-04-24T00:07:31 #rust-dev-tools <stratact> I seem to have an issue with racer, it doesn't pick up the struct types in the gtk crate, only the traits and enums...
2018-04-24T20:13:30 #rust-dev-tools <stratact_> can someone help me with RLS problem?
2018-04-24T20:17:04 #rust-dev-tools <imperio> stratact_: don't ask to ask
2018-04-24T20:17:13 #rust-dev-tools <imperio> explain your issue and someone might be able to help you
2018-04-24T20:18:25 #rust-dev-tools <stratact_> I seem to have an issue with both Racer and RLS, it doesn't pick up the struct types in the gtk crate, only the traits and enums, other crates seem fine however
2018-04-26T20:25:29 #rust-dev-tools <xanewok> nrc: can we have a diagnostic with multiple primary spans?
2018-04-26T21:09:27 #rust-dev-tools <nrc> xanewok: I don't think so, no
2018-04-26T21:09:46 #rust-dev-tools <nrc> but we should not crash in that case and just take the first primary one as the real primary one
2018-04-26T21:11:58 #rust-dev-tools <xanewok> nrc: working on the related diagnostics, hence why I ask
2018-04-26T21:12:17 #rust-dev-tools <nrc> awesome, thanks!
2018-04-26T21:12:34 #rust-dev-tools <xanewok> currently also secondary spans can have separate suggestions - it'd probably good to still emit hints and code actions for those, right?
2018-04-26T21:18:27 #rust-dev-tools <nrc> yes, I think so
2018-04-26T21:18:31 #rust-dev-tools <nrc> do you have an example?
2018-04-26T21:21:43 #rust-dev-tools <xanewok> not at the moment, since I've been mostly trying to reshuffle the code involved now
2018-04-26T21:46:58 #rust-dev-tools <xanewok> nrc: https://github.com/rust-lang-nursery/rustfmt/blob/master/build.rs#L18
2018-04-26T21:47:35 #rust-dev-tools <xanewok> trying to spawn rls via extension and rustfmt-nightly is always considered dirty by cargo
2018-04-26T21:47:57 #rust-dev-tools <xanewok> because the .git/HEAD keeps 'changing' - it's missing when fetched by Cargo
2018-04-26T21:48:41 #rust-dev-tools <xanewok> any idea how to fix that? Alex suggested checking if the file exists at all
2018-04-26T21:49:29 #rust-dev-tools <xanewok> would just checking if the file exists and if so, only then emit the rerun-if-changed, sound like a plausible fix?
2018-04-26T22:15:53 #rust-dev-tools <xanewok> published PR with the fix: https://github.com/rust-lang-nursery/rustfmt/pull/2653
2018-04-26T22:35:14 #rust-dev-tools <nrc> cool, will take a look in a sec
2018-04-27T04:58:54 #rust-dev-tools <jray> I keep having issues pop up with VS Code. Debug isn't working, and it's prompting which nightly toolchain I want to use. I disabled Rust by kalitaalexey and have Rust (rls) enabled. More issues: https://gitter.im/vscode-rust/Lobby?at=5ae2a910b01085166cc6ec70/
2018-04-27T04:59:06 #rust-dev-tools <jray> > I can't get Racer to be on, although it has been on before.
2018-04-27T04:59:13 #rust-dev-tools <jray> > I have Racer in my Path.
2018-04-27T04:59:31 #rust-dev-tools <jray> User settings are in the above link
2018-04-27T05:00:26 #rust-dev-tools <jray> help!
2018-04-27T05:03:23 #rust-dev-tools <jray> Ah I just closed the error and selected nightly
2018-04-27T06:15:17 #rust-dev-tools <jray> I can't debug to work in VS Code and Racer isn't on any more. RLS is installed, I have disabled rust by kalitaalexey.
2018-04-27T07:44:58 #rust-dev-tools <jray> Can anyone help me with getting debug to work in VS Code? https://github.com/rust-lang-nursery/rls/issues/840
2018-04-27T08:06:54 #rust-dev-tools <jray> https://github.com/rust-lang-nursery/rls/blob/master/debugging.md suggested to ping @nrc.
2018-04-27T08:47:41 #rust-dev-tools <nrc> jray: you don't need to have Racer in the PATH, the RLS has it's own version. You should try maybe running on a very basic (hello world) project and see if completion works there
2018-04-27T08:48:16 #rust-dev-tools <nrc> The Rust extension doesn't include any debugging support
2018-04-27T08:48:31 #rust-dev-tools <nrc> You can get debug support by installing a GDB or LLDB extension
2018-04-27T08:52:40 #rust-dev-tools <jray> OK, thanks
2018-04-27T08:53:22 #rust-dev-tools <jray> Racer works. I'll try enabling an Native Debug and getting it to work again.
2018-05-01T01:40:32 #rust-dev-tools <mib_6w11tw> Hi everyone
2018-05-01T01:40:40 #rust-dev-tools <mib_6w11tw> Can someone please help me?
2018-05-01T01:40:53 #rust-dev-tools <mib_6w11tw> I'm trying to use Rust on my macOS computer
2018-05-01T01:41:45 #rust-dev-tools <mib_6w11tw> I cannot seem to create a Rust project using this link: https://doc.rust-lang.org/book/second-edition/ch01-02-hello-world.html#creating-a-project-with-cargo
2018-05-01T01:42:47 #rust-dev-tools <mib_6w11tw> It tells me "-bash: cd: /Users/xxxxxxxx/projects: No such file or directory"
2018-05-01T01:46:23 #rust-dev-tools <mib_6w11tw> Oh... sry guys 4 am here and not native english-speaker
2018-05-01T01:46:29 #rust-dev-tools <mib_6w11tw> I just saw what I wrote
2018-05-01T01:46:34 #rust-dev-tools <mib_6w11tw> Have a good night :D
2018-05-01T20:02:27 #rust-dev-tools <japaric> nrc: do we have a dev-tools meeting today?
2018-05-01T20:02:46 #rust-dev-tools <nrc> japaric: no, every second week, so next week
2018-05-01T20:03:40 #rust-dev-tools <japaric> nrc: oh, I see it now in the calendar invite. Thanks anyways
2018-05-02T13:29:52 #rust-dev-tools <Gankro> anyone willing to mentor https://github.com/rust-lang/cargo/issues/4663 so we can push it forward?
2018-05-02T13:29:56 #rust-dev-tools <Gankro> *looks* easy
2018-05-02T15:58:23 #rust-dev-tools <aturon> Gankro: maybe ask in #cargo?
2018-05-02T15:58:47 #rust-dev-tools <aturon> added a ping on thread
2018-05-03T08:47:15 #rust-dev-tools <matklad> nrc: online? a q about https://github.com/rust-lang/cargo/pull/5465
2018-05-03T08:47:32 #rust-dev-tools <matklad> Are you sure that the `env` var is just ignored?
2018-05-03T08:47:58 #rust-dev-tools <matklad> Like, the code looks right to me at the first blush, and we have a test that checks that env-vars work
2018-05-03T08:48:26 #rust-dev-tools <matklad> (`custom_target_dir_env` in testsuite/build)
2018-05-03T08:49:07 #rust-dev-tools <nrc> matklad: I'm not exactly sure the behaviour, but I believe that is the effect, yeah
2018-05-03T08:49:28 #rust-dev-tools <nrc> I think this change is bogus - https://github.com/rust-lang/cargo/pull/5393/commits/0b530c30867da26a4b59146f490c9f1d5377c20a#diff-4559bc8f75ebf0a4d42be6e4e7fe9eaaL245 - because there are places that call `target_dir` which don't then check the env var
2018-05-03T08:49:40 #rust-dev-tools <nrc> like it gets called in three places and only one of them checks the env var
2018-05-03T08:50:14 #rust-dev-tools <nrc> oh wait, that is not quite right
2018-05-03T08:50:34 #rust-dev-tools <nrc> the stored field is meant to take into account the env var, rather than just being the cli arg
2018-05-03T08:51:06 #rust-dev-tools <nrc> hang on, it's late, let me refresh my memory
2018-05-03T08:51:31 #rust-dev-tools <matklad> Hm, that might be the case if `Config::configure` is not called before accessing `target_dir`...
2018-05-03T08:51:36 #rust-dev-tools <matklad> will check that hypothesis
2018-05-03T08:53:40 #rust-dev-tools <matklad> Ah, the RLS might not call `configure` I guess?
2018-05-03T08:55:00 #rust-dev-tools <nrc> maybe
2018-05-03T08:55:10 #rust-dev-tools <matklad> Yep, I see it now! The code in Cargo itself is correct, for Cargo, but is wrong for RLS which doesn't call configure in `infer_defaults`
2018-05-03T08:55:13 #rust-dev-tools <matklad> Is this pressing?
2018-05-03T08:55:21 #rust-dev-tools <matklad> I am fine with just r+ing the PR :) 
2018-05-03T08:56:05 #rust-dev-tools <matklad> Though, I'd love to do something more principled about this, because this is a cross-repository footgun...
2018-05-03T08:56:43 #rust-dev-tools <nrc> Yeah, we don't call that - maybe we should be?
2018-05-03T08:58:03 #rust-dev-tools <nrc> I guess we don't have most of the args, so there is no need
2018-05-03T08:58:23 #rust-dev-tools <nrc> matklad: it is pressing - we don't have a nightly Rust because the RLS tests are broken because of this
2018-05-03T08:59:26 #rust-dev-tools <nrc> yeah, `configure` does seem like a bit of a footgun, at least as long as it is used for more setup than just setting fields
2018-05-03T09:12:32 #rust-dev-tools <matklad> nrc: tests are failing. It is late in New Zeland, but it is early here, so I can bring this over the finish line if you'd like
2018-05-07T01:23:37 #rust-dev-tools <nrc> jwilm: ping, sorry to keep bugging, but did you have time to look at my emails re Racer maintainers?
2018-05-08T01:29:46 #rust-dev-tools <jwilm> nrc: I did! Somewhat surprisingly, I actually thought to respond before seeing your ping here. ;)
2018-05-08T01:30:04 #rust-dev-tools <jwilm> nrc: I'm generally available to chat via IRC as needed and much slower to reply on my personal email
2018-05-08T08:25:02 #rust-dev-tools <nrc> Thanks jwilm!
2018-05-08T20:01:00 #rust-dev-tools <fitzgen> meeting?
2018-05-08T20:01:09 #rust-dev-tools <fitzgen> nrc: ^
2018-05-08T20:02:39 #rust-dev-tools <nrc> yes! meeting is now
2018-05-08T20:02:58 #rust-dev-tools <japaric> omw
2018-05-08T20:03:03 #rust-dev-tools <nrc> Will be one sec, just watiting for nanny to arrive
2018-05-08T20:05:20 #rust-dev-tools <japaric> ugh, my Vidyo is segfaulting ...
2018-05-08T20:05:50 #rust-dev-tools <fitzgen> something something if only it were written in rust
2018-05-08T20:06:17 #rust-dev-tools <japaric> fitzgen: :-)
2018-05-08T20:16:53 #rust-dev-tools <nrc> fitzgen: impressive beard!
2018-05-08T20:31:01 #rust-dev-tools <fitzgen> thanks :)
2018-05-08T23:06:41 #rust-dev-tools <fitzgen> nrc: do I have to do something special to get save-analysis to emit signatures for functions?
2018-05-08T23:06:55 #rust-dev-tools <fitzgen> also, is there any docs for the JSON's structure?
2018-05-08T23:07:49 #rust-dev-tools <nrc> fitzgen: signatures as in the data structure for rustdoc-like things? Yes, you need to opt-in in the config
2018-05-08T23:08:09 #rust-dev-tools <fitzgen> like the parameter types and return types
2018-05-08T23:08:31 #rust-dev-tools <fitzgen> how do I do configuration? I'm just running `cargo rustc -- -Z save-analysis
2018-05-08T23:08:33 #rust-dev-tools <fitzgen> `
2018-05-08T23:08:46 #rust-dev-tools <nrc> Not documented, really, but https://github.com/nrc/rls-data/blob/master/src/lib.rs has them as rust structs with some comments
2018-05-08T23:09:07 #rust-dev-tools <nrc> config is here: https://github.com/nrc/rls-data/blob/master/src/config.rs
2018-05-08T23:10:03 #rust-dev-tools <nrc> you need to serialise that and put in an env var: `RUST_SAVE_ANALYSIS_CONFIG`
2018-05-08T23:10:17 #rust-dev-tools <fitzgen> nrc: ah, I see, thanks
2018-05-08T23:10:41 #rust-dev-tools <nrc> (or you can pass it directly if you're using rustc as a library)
2018-05-08T23:11:14 #rust-dev-tools <fitzgen> nrc: and rls-data/src/lib.rs describes the emitted JSON in the save analysis?
2018-05-08T23:11:40 #rust-dev-tools <nrc> yes
2018-05-08T23:11:51 #rust-dev-tools <fitzgen> nrc: awesome, thanks so much!
2018-05-08T23:12:32 #rust-dev-tools <nrc> btw, note the version - rustc is not actually emitting the latest version of rls-data - it is one version behind I think, which means imports are in a slightly different format
2018-05-08T23:12:43 #rust-dev-tools <nrc> I plan to update next week
2018-05-09T00:20:13 #rust-dev-tools <fitzgen> nrc: which version of rls-data should I use for current nightly?
2018-05-09T00:21:07 #rust-dev-tools <fitzgen> hm, it seems that the 0.15.0 rls-data doesn't do serde
2018-05-09T00:34:21 #rust-dev-tools <nrc> fitzgen: 0.15 and you can't use serde anyway - you need to use rustc-serialize
2018-05-09T00:35:03 #rust-dev-tools <fitzgen> nrc: no? why not? it seemed to compile with the serde feature, and I was getting runtime errors rather than compile time
2018-05-09T00:35:41 #rust-dev-tools <fitzgen> nrc: does this look about right?
2018-05-09T00:35:44 #rust-dev-tools <fitzgen> https://www.irccloud.com/pastebin/FgB4DpNF/
2018-05-09T00:37:30 #rust-dev-tools <nrc> it'll compile, but you might get errors deserialising the save-analysis data
2018-05-09T00:37:48 #rust-dev-tools <nrc> the two encode enums differently, so you can't encode with one and decode with the other
2018-05-09T00:38:25 #rust-dev-tools <nrc> other than using serde, yes
2018-05-09T00:39:50 #rust-dev-tools <fitzgen> nrc: ok, thanks. do you have equivalent code somewhere that I could compare to for using rustc-serialize/deserialize?
2018-05-09T00:40:02 #rust-dev-tools * fitzgen has to run, will check backlog
2018-05-09T00:40:06 #rust-dev-tools <fitzgen> nrc: thanks again!
2018-05-09T00:41:34 #rust-dev-tools <nrc> running rustc is the same
2018-05-09T00:41:59 #rust-dev-tools <nrc> ideally you wouldn't parse the save-analysis data yourself, but you'd use the rls-analysis crate to do it for you: https://github.com/nrc/rls-analysis
2018-05-09T00:43:05 #rust-dev-tools <nrc> then you just pass the project directory, e.g., https://github.com/nrc/cargo-src/blob/master/src/file_cache.rs#L181
2018-05-09T18:17:01 #rust-dev-tools <FreeMasenry> Is there a particular reason that I would see cargo +nightly -V be a previous version from the current nightly version installed by rustup?
2018-05-09T18:42:37 #rust-dev-tools <killercup> FreeMasenry: the date of the nightly-release and the date of the build can vary. also, cargo specifically is not updated that often
2018-05-09T18:43:59 #rust-dev-tools <FreeMasenry> So cargo +nightly -V is the nightly cargo version?
2018-05-09T19:02:30 #rust-dev-tools <killercup> FreeMasenry: the cargo version that's bundled with your nightly toolchain, yeah
2018-05-09T19:03:20 #rust-dev-tools <FreeMasenry> Is there a way to check what version of rustc a cargo + command would run?
2018-05-09T19:09:35 #rust-dev-tools <misdreavus> you can send the same version flag to rustc
2018-05-09T19:10:04 #rust-dev-tools <misdreavus> `rustc +nightly --version` will tell you what rustc is available to `cargo +nightly build`
2018-05-09T19:33:17 #rust-dev-tools <FreeMasenry> misdreavus: Thanks!
2018-05-09T23:59:58 #rust-dev-tools <fitzgen> nrc: rls-analysis doesn't seem to just give me the save-analysis structs, afaict
2018-05-10T00:00:02 #rust-dev-tools <fitzgen> nrc: am I missing something?
2018-05-10T04:19:20 #rust-dev-tools <nrc> fitzgen: it does the discovering of json files, parsing, cross-referencing of refs with defs and reprocesses ids to be global instead of per-crate. It lets you do 'find all refs' queries and 'find all impls' queries which you can't do directly on the data
2018-05-11T02:55:09 #rust-dev-tools <zend> rls tagged 0.127 but `rls-preview` component in rustup still 0.126, where can I make a issue for bump ?
2018-05-12T16:55:13 #rust-dev-tools <gheoan-M> zend: in the compiler repo (rust-lang/rust) i think
2018-05-12T18:43:22 #rust-dev-tools <qoxncyha> anyone using vscode to debug tests?
2018-05-12T18:43:38 #rust-dev-tools <qoxncyha> i can't set a breakpoint
2018-05-12T18:44:32 #rust-dev-tools <qoxncyha> nrc: ping :)
2018-05-12T21:56:01 #rust-dev-tools <nrc> I haven't used vscode for debugging, sorry
2018-05-13T04:43:15 #rust-dev-tools <qoxncyha> hmm
2018-05-13T11:32:03 #rust-dev-tools <phansch> would someone here like to r? https://github.com/rust-lang/rust/pull/50387? Nothing urgent but it's been sitting around for a couple of days and seems small enough.
2018-05-14T19:26:45 #rust-dev-tools <lqd> is the rls now storing its data in a `rls` folder at the root of the project instead of `tartget/rls`?
2018-05-14T19:27:34 #rust-dev-tools <sfackler> lqd: https://github.com/rust-lang-nursery/rls/issues/864
2018-05-14T19:28:13 #rust-dev-tools <lqd> sfackler: great, thank you :)
2018-05-17T19:47:52 #rust-dev-tools <sfackler> nrc: out of curiosity, where did that rls memory usage/segfault come from?
2018-05-17T19:51:55 #rust-dev-tools <nrc> sfackler: the segfault was due to transmuting to a different version of a type (i.e., transmute Foo to Foo, but where they come from different versions of a crate). I can't explain the memory usage.
2018-05-17T19:52:07 #rust-dev-tools <sfackler> ah interesting
2018-05-17T19:52:25 #rust-dev-tools <sfackler> not super surprised that some allocation became huge after hitting ub from the transmute
2018-05-18T00:44:20 #rust-dev-tools <jokerstroke> how big is the total installation size of Rust?
2018-05-18T13:07:27 #rust-dev-tools <ttk2-M> where can I learn more about rust on mips64? I'm seeing an illegal instruction exception on the Cavium Octeon
2018-05-18T15:29:37 #rust-dev-tools <raydonnelly> Hello everyone, I'm fairly new to rust and am trying to get a VSCode dev env up+running. Ran into a problem w/ rls:
2018-05-18T15:29:39 #rust-dev-tools <raydonnelly> CARGO_HOME=/Users/rdonnelly/.cargo-Darwin rustup run nightly cargo install
2018-05-18T15:29:50 #rust-dev-tools <raydonnelly> ...
2018-05-18T15:29:57 #rust-dev-tools <raydonnelly>    Compiling crossbeam-utils v0.2.2    Compiling owning_ref v0.3.3    Compiling unreachable v1.0.0    Compiling synom v0.11.3    Compiling proc-macro2 v0.3.8    Compiling unicode-bidi v0.3.4 error[E0463]: can't find crate for `rustc_codegen_utils`  --> /Users/rdonnelly/.cargo-Darwin/registry/src/github.com-1ecc6299db9ec823/rls-rustc-0.3.0/src/lib.rs:9:1   | 9
2018-05-18T15:30:33 #rust-dev-tools <raydonnelly> I am doing this funky CARGO_HOME stuff as I share ~ with linux dockers.
2018-05-18T15:31:13 #rust-dev-tools <raydonnelly> after: git clone https://github.com/rust-lang-nursery/rls; cd rls
2018-05-18T20:20:27 #rust-dev-tools <jonhoo> Hey all \o/
2018-05-18T20:20:45 #rust-dev-tools <jonhoo> Has anyone else been observing rustfmt no longer working with rust.vim?
2018-05-18T20:21:01 #rust-dev-tools <jonhoo> All I found was this (very brief) issue: https://github.com/rust-lang/rust.vim/issues/212
2018-05-18T20:21:15 #rust-dev-tools <jonhoo> and a proposed solution here which doesn't seem to work any more: https://github.com/rust-lang/rust.vim/issues/192
2018-05-18T20:21:26 #rust-dev-tools <jonhoo> manually running `cargo fmt` works just fine
2018-05-18T20:54:09 #rust-dev-tools <phansch> jonhoo: you mean it just shows the source in a temp. buffer, without actually changing anything?
2018-05-18T20:54:37 #rust-dev-tools <jonhoo> if I run :RustFmt manually, yes
2018-05-18T20:54:50 #rust-dev-tools <jonhoo> if I just save and have format_on_save set then nothing happens
2018-05-18T20:54:55 #rust-dev-tools <jonhoo> in either case, the file isn't modified
2018-05-18T20:55:42 #rust-dev-tools <phansch> yea, looks like I'm having the same issue. Are you on vim or neovim?
2018-05-18T21:08:20 #rust-dev-tools <jonhoo> this is neovim
2018-05-18T21:08:35 #rust-dev-tools <jonhoo> fully up-to-date, latest nightly, and with the latest rust.vim
2018-05-18T21:42:41 #rust-dev-tools <phansch> jonhoo: looks like it's because of https://github.com/rust-lang-nursery/rustfmt/commit/5d9f5aa05a668e7dfef87b46d89dad2884df9d41
2018-05-18T21:43:09 #rust-dev-tools <jonhoo> ahhh, yeah, that makes sense
2018-05-18T21:43:46 #rust-dev-tools <jonhoo> I guess we could work around this locally with g:rustfmt_options
2018-05-18T21:43:57 #rust-dev-tools <jonhoo> but should probably be fixed in rust.vim
2018-05-18T21:44:59 #rust-dev-tools <jonhoo> specifically, --emit files
2018-05-18T21:45:31 #rust-dev-tools <jonhoo> though I guess you then also have to make sure to force nightly rustfmt
2018-05-18T21:48:29 #rust-dev-tools <jonhoo> hmm, that doesn't actually seem to do the same as --write-mode overwrite :/
2018-05-18T23:13:30 #rust-dev-tools <nrc> if you want to backup files you need --backup too, if you don't want to backup, then you don't need any args - --emit files is the default
2018-05-22T17:41:44 #rust-dev-tools <drager1> Hey, using rls-vscode. What should the target_dir be nowadays? 
2018-05-22T17:42:24 #rust-dev-tools <drager1> My auto-complete stopped and the plugin started to output to a rls folder in the latest release
2018-05-22T17:42:38 #rust-dev-tools <steveklabnik> i believe that's a known bug?
2018-05-22T17:42:41 #rust-dev-tools <steveklabnik> latest nightly fixes it
2018-05-22T17:42:42 #rust-dev-tools <steveklabnik> or something
2018-05-22T17:42:49 #rust-dev-tools <steveklabnik> i know *something* changed here recently
2018-05-22T17:43:55 #rust-dev-tools <drager1> Oh okey
2018-05-22T17:46:34 #rust-dev-tools <drager1> Does my project have to use nightly or can I just have it installed?
2018-05-22T17:47:35 #rust-dev-tools <steveklabnik> you can just have it installed
2018-05-22T17:49:09 #rust-dev-tools <drager1> Cool, will try to update it. Thanks
2018-05-22T19:19:43 #rust-dev-tools <lqd> if it's not fixed, the target_dir you want is "target/rls"
2018-05-22T19:40:23 #rust-dev-tools <lqd> (IIRC it's not a nightly/rustc/rls issue but a rls-vscode one)
2018-05-22T19:51:02 #rust-dev-tools <nrc> I'm going to be 5 minutes late to today's meeting, sorry
2018-05-22T20:43:42 #rust-dev-tools <Manishearth> https://github.com/zbraniecki/annotate-snippets-rs
2018-05-22T21:03:10 #rust-dev-tools <tbourvon> nrc: so basically I have a project which depends on another crate. The crate I depend on has a build.rs script, and a dummy something.rs with only "include!(concat!(env!("OUT_DIR"), "/generated_something.rs"));" in it
2018-05-22T21:04:13 #rust-dev-tools <tbourvon> And basically every time I edit my main project, the build script gets re-run by the RLS (while it should not) and trying to autocomplete crate::something:: doesn't work
2018-05-22T21:04:33 #rust-dev-tools <tbourvon> is this a bug or some intended behavior?
2018-05-22T21:04:53 #rust-dev-tools <nrc> that is a bug
2018-05-22T21:05:37 #rust-dev-tools <nrc> I assume the build script has some println to instruct Cargo when to rebuild?
2018-05-22T21:09:16 #rust-dev-tools <tbourvon> nrc: yes it does
2018-05-22T21:09:41 #rust-dev-tools <tbourvon> it changes based on .cpp file in the same folder
2018-05-22T21:10:07 #rust-dev-tools <tbourvon> https://usercontent.irccloud-cdn.com/file/PLDef8xZ/image.png
2018-05-22T21:13:48 #rust-dev-tools <tbourvon> nrc: should I file that on github?
2018-05-22T21:20:37 #rust-dev-tools <nrc> tbourvon: yes please!
2018-05-22T21:20:47 #rust-dev-tools <tbourvon> will do
2018-05-22T21:20:52 #rust-dev-tools <nrc> I have a feeling that has come up before, but I can't find an issue
2018-05-22T21:20:53 #rust-dev-tools <nrc> thanks!
2018-05-23T00:53:27 #rust-dev-tools <nrc> killercup: so I tried opening Diesel under the RLS and it worked fine
2018-05-23T00:53:42 #rust-dev-tools <nrc> well, perhaps not fine - I got 42 errors whereas on the command line I get 4
2018-05-23T00:53:55 #rust-dev-tools <nrc> but it doesn't crash and I have type info, etc.
2018-05-23T19:52:51 #rust-dev-tools <fitzgen> nrc: hey can you help us out with https://github.com/nrc/rls-analysis/issues/139? that is my intern :)
2018-05-23T20:38:20 #rust-dev-tools <nrc> fitzgen: sure! I'm parenting this morning but I'll comment this afternoon
2018-05-23T20:38:29 #rust-dev-tools <nrc> what's the long term project for them?
2018-05-23T20:39:43 #rust-dev-tools <fitzgen> nrc: we are going to auto generate all the boilerplate needed to create a dlopen-able version of a crate from the RLS description of its public API; this will be used to make code splitting and lazy loading in wasm easy
2018-05-24T20:29:00 #rust-dev-tools <simulacrum> nrc: Did you find a version of RLS that we can use on stable?
2018-05-24T20:33:55 #rust-dev-tools <nrc> simulacrum: yeah, there is a PR
2018-05-24T20:34:15 #rust-dev-tools <simulacrum> targeting stable?
2018-05-24T20:34:23 #rust-dev-tools <nrc> simulacrum: https://github.com/rust-lang/rust/pull/50794
2018-05-24T20:34:25 #rust-dev-tools <nrc> yes
2018-05-24T20:35:02 #rust-dev-tools <simulacrum> This resolves both the RLS issue and rustfmt badly formatting things?
2018-05-24T20:35:55 #rust-dev-tools <nrc> yes
2018-05-24T20:36:11 #rust-dev-tools <nrc> it's all we need from tools
2018-05-24T20:37:40 #rust-dev-tools <simulacrum> Okay, I'll cherry-pick that onto my branch and close your PR I think so we can do it in one go
2018-05-24T20:37:49 #rust-dev-tools <simulacrum> Unless you expect it to bounce?
2018-05-24T20:38:06 #rust-dev-tools <nrc> no, I hope it should be fine
2018-05-24T20:38:22 #rust-dev-tools <simulacrum> Sounds good
2018-05-24T20:38:35 #rust-dev-tools <nrc> I ran tests locally (although that seems to only have a 50% success rate, recently)
2018-05-25T22:36:23 #rust-dev-tools <navidem> nrc: ping
2018-05-25T22:54:50 #rust-dev-tools <fitzgen> navidem: interesting. https://github.com/steveklabnik/doxidize/blob/2000b96d8bdf68b3a607b61070ee1bd424700137/src/ops/init/api.rs#L30-L49 suggests to me that the top level crate *should* be within the results returned by def_roots
2018-05-25T23:43:56 #rust-dev-tools <navidem> fitzgen: yes, but this is using def_root from config.host() , while we are using it from AnalysisHost.
2018-05-25T23:46:10 #rust-dev-tools <fitzgen> navidem: config is a doxidize specific thing there -- the host() method just returns the AnalysisHost within the Config, so I don't think we are doing anything different from that code snippet
2018-05-25T23:53:35 #rust-dev-tools <navidem> fitzgen: host() returns analysis::AnalysisHost, we instantiated from rls_analysis::AnalysisHost.  'let host = analysis::AnalysisHost::new(analysis::Target::Debug);'
2018-05-25T23:56:25 #rust-dev-tools <fitzgen> navidem: I'm not sure I follow the point you are trying to make. Our code instantiates and uses AnalysisHost directly, while doxidize has a Config struct that contains an AnalysisHost.
2018-05-25T23:58:39 #rust-dev-tools <navidem> fitzgen
2018-05-25T23:59:07 #rust-dev-tools <navidem> fitzgen: I was referring to this: https://github.com/steveklabnik/doxidize/blob/7596f1bdc9263f132264d15a60b3bfaecda43ab8/src/config.rs#L37
2018-05-26T00:00:03 #rust-dev-tools <fitzgen> which seems the same as https://github.com/Navidem/rls-pretty-print/blob/master/src/main.rs#L13
2018-05-26T00:02:25 #rust-dev-tools <navidem> fitzgen: are you implying that rls_analysis uses analysis to implement AnlaysisHost?
2018-05-26T00:07:13 #rust-dev-tools <navidem> I see! hands UP! we are doing the same! but not getting the top level crate!
2018-05-28T13:56:10 #rust-dev-tools <Phrohdoh> Does the RLS keep its own copy of the source in memory (which effectively means having at minimum 2 copies in total)?
2018-05-28T14:19:56 #rust-dev-tools <est31> Phrohdoh: rustc does keep source maps
2018-05-28T14:20:05 #rust-dev-tools <est31> of the entire crate
2018-05-28T14:20:44 #rust-dev-tools <est31> you also need source maps to create line/column info so I'd say rls keeps them
2018-05-28T14:20:54 #rust-dev-tools <est31> but dont know for sure
2018-05-28T14:33:01 #rust-dev-tools <Phrohdoh> sourcemaps aren't the same as the raw source itself, right?
2018-05-28T14:34:12 #rust-dev-tools <est31> they contain the raw source
2018-05-28T14:34:28 #rust-dev-tools <est31> spans only store an offset inside the file
2018-05-28T14:34:33 #rust-dev-tools <est31> not the line/col info
2018-05-28T14:34:43 #rust-dev-tools <est31> line/col info is computed on demand, lazily
2018-05-28T14:34:58 #rust-dev-tools <Phrohdoh> ah I thought they were just byte spans into a known file location
2018-05-28T14:36:50 #rust-dev-tools <est31> hrmmmm smart
2018-05-28T14:36:58 #rust-dev-tools <est31> spans are in fact u32 thingies
2018-05-28T14:37:17 #rust-dev-tools <est31> pub struct Span(u32);
2018-05-28T14:37:56 #rust-dev-tools <Phrohdoh> yeah so if in my LS I am keeping all the source in memory that's going to blow up quickly
2018-05-28T14:38:03 #rust-dev-tools <Phrohdoh> though I'm not sure how better to do this
2018-05-28T14:38:12 #rust-dev-tools <Phrohdoh> I could change all of my nodes etc from &str to String I suppose
2018-05-28T14:38:22 #rust-dev-tools <est31> LS?
2018-05-28T14:38:30 #rust-dev-tools <Phrohdoh> language server
2018-05-28T14:38:48 #rust-dev-tools <Phrohdoh> I'm using the RLS as inspiration
2018-05-28T14:38:48 #rust-dev-tools <est31> the source is probably the least of your memory concerns
2018-05-28T14:39:18 #rust-dev-tools <est31> you keep the ast, hir, all of those as well, no?
2018-05-28T14:39:22 #rust-dev-tools <est31> honestly I have no idea
2018-05-28T14:39:24 #rust-dev-tools <Phrohdoh> Oh this isn't a Rust LS
2018-05-28T14:39:27 #rust-dev-tools <est31> maybe they are serialized
2018-05-28T14:39:43 #rust-dev-tools <Phrohdoh> it just happens to be written in rust, for a custom language / format
2018-05-28T14:41:52 #rust-dev-tools <est31> I'm not sure whether source maps are kept for another reason other than span printing or line/col finding
2018-05-28T14:42:04 #rust-dev-tools <est31> probably the parser runs on them??
2018-05-28T14:42:08 #rust-dev-tools <est31> tokenizer*
2018-05-28T19:38:56 #rust-dev-tools <robert> Hi all, I'm trying to set the "wait_to_build" variable for rls. According to https://github.com/rust-lang-nursery/rls I should create a "settings.json" file in my project dir. However, the format of that file is not specified
2018-05-28T19:40:29 #rust-dev-tools <Phrohdoh> { "rust.wait_to_build": 1500 }
2018-05-28T19:40:52 #rust-dev-tools <robert> Phrohdoh: is this anywhere documented?
2018-05-28T19:40:54 #rust-dev-tools <Phrohdoh> <project>/.vscode/settings.json
2018-05-28T19:40:59 #rust-dev-tools <Phrohdoh> It is the VSCode settings.json file
2018-05-28T19:41:01 #rust-dev-tools <robert> I'm not using vscode
2018-05-28T19:41:19 #rust-dev-tools <Phrohdoh> then that doesn't apply to you
2018-05-28T19:41:23 #rust-dev-tools <Phrohdoh> > using the Visual Studio Code extension this will be done via the workspace settings file settings.json.
2018-05-28T19:41:33 #rust-dev-tools <Phrohdoh> > Other editors will have their own way of sending the workspace/DidChangeConfiguration method.
2018-05-28T19:41:33 #rust-dev-tools <robert> so I can't configure rls at all?
2018-05-28T19:41:42 #rust-dev-tools <Phrohdoh> What are you using?
2018-05-28T19:41:45 #rust-dev-tools <Phrohdoh> (which editor)
2018-05-28T19:41:51 #rust-dev-tools <robert> neovim LanguageClient
2018-05-28T19:42:21 #rust-dev-tools <Phrohdoh> https://github.com/autozimu/LanguageClient-neovim#quick-start
2018-05-28T19:42:23 #rust-dev-tools <Phrohdoh> see the config there
2018-05-28T19:42:47 #rust-dev-tools <Phrohdoh> You'll probably have to do more research.
2018-05-28T19:42:59 #rust-dev-tools <Phrohdoh> I'm sure the RLS team / repo would love a PR adding docs for your specific editor.
2018-05-28T19:43:19 #rust-dev-tools <robert> Hm?
2018-05-28T19:43:45 #rust-dev-tools <Phrohdoh> hm that's lame
2018-05-28T19:43:49 #rust-dev-tools <Phrohdoh> that's only how to start the rls
2018-05-28T19:44:39 #rust-dev-tools <Phrohdoh> I don't use neovim so don't know how to configure it.
2018-05-28T19:44:47 #rust-dev-tools <Phrohdoh> ("it" being that particular plugin)
2018-05-28T19:45:32 #rust-dev-tools <robert> Phrohdoh: it mentions a "settings.json" file that can be used to configure various language servers
2018-05-28T19:45:46 #rust-dev-tools <Phrohdoh> We've already covered that.
2018-05-28T19:45:52 #rust-dev-tools <robert> no
2018-05-28T19:46:41 #rust-dev-tools <Phrohdoh> ok I see
2018-05-28T19:46:45 #rust-dev-tools <Phrohdoh> you weren't clear originally
2018-05-28T19:46:57 #rust-dev-tools <Phrohdoh> (there was no way for the rls team to know what the settings.json file should look like for your editor)
2018-05-28T19:47:22 #rust-dev-tools <Phrohdoh> I am willing to bet it is the format I sent above though
2018-05-28T19:47:28 #rust-dev-tools <robert> well, I kinda assumed that this is the case
2018-05-28T19:47:34 #rust-dev-tools <robert> that's why I came here
2018-05-28T19:47:50 #rust-dev-tools <Phrohdoh> You assumed what is the case?
2018-05-28T19:48:07 #rust-dev-tools <Phrohdoh> https://github.com/autozimu/LanguageClient-neovim/issues/431
2018-05-28T19:48:13 #rust-dev-tools <Phrohdoh> ^ mentions .vim/settings.json
2018-05-28T19:50:28 #rust-dev-tools <robert> so does the help of LanguageClient. I assumed that the format of that file is specific to the language server in use
2018-05-28T19:50:32 #rust-dev-tools <robert> in my case rls
2018-05-28T19:50:43 #rust-dev-tools <robert> that's why I came here to ask to the format
2018-05-28T19:50:53 #rust-dev-tools <Phrohdoh> Try what I pasted earlier and let me know if that works.
2018-05-28T19:50:59 #rust-dev-tools <robert> But I guess this assumption does not hold true?
2018-05-28T19:51:07 #rust-dev-tools <Phrohdoh> It'll be specific to your language client, not the server.
2018-05-28T19:51:34 #rust-dev-tools <robert> Phrohdoh: yeah, that's the second problem. How can I know whether rls accepted my option?
2018-05-28T19:51:58 #rust-dev-tools <robert> The original problem is that when using rls, it takes way too long to get any feedback in neovim
2018-05-28T19:52:11 #rust-dev-tools <robert> with cquery (language server for c) this works instantly
2018-05-28T19:52:22 #rust-dev-tools <robert> with rls, it takes ~2 secs
2018-05-28T19:52:34 #rust-dev-tools <robert> so I though I could adjust "wait_to_build"
2018-05-28T19:52:56 #rust-dev-tools <Phrohdoh> Testing with `build_on_save` will probably be easiest (to let you know whether or not your client sent the RLS the new config).
2018-05-28T19:53:08 #rust-dev-tools <robert> Phrohdoh: ah yeah, good idea
2018-05-28T20:11:48 #rust-dev-tools <robert> Phrohdoh: I give up for now :P thx though for the help
2018-05-28T20:12:21 #rust-dev-tools <Phrohdoh> bah sorry about that :(
2018-05-28T20:13:09 #rust-dev-tools <robert> It's only a minor issue anywhow, in general it's working fine
2018-05-28T20:14:23 #rust-dev-tools <Phrohdoh> Does https://github.com/autozimu/LanguageClient-neovim/wiki/yaml-language-server#method-1help?
2018-05-28T20:14:25 #rust-dev-tools <Phrohdoh> er
2018-05-28T20:14:26 #rust-dev-tools <Phrohdoh> https://github.com/autozimu/LanguageClient-neovim/wiki/yaml-language-server#method-1
2018-05-28T20:14:54 #rust-dev-tools <Phrohdoh> { "rust": { "wait_to_build": 1500 } }
2018-05-28T20:17:13 #rust-dev-tools <robert> Hah!
2018-05-28T20:17:16 #rust-dev-tools <robert> That did it!
2018-05-28T20:17:19 #rust-dev-tools <robert> thanks a lot
2018-05-28T20:17:24 #rust-dev-tools <Phrohdoh> :D great!
2018-05-28T20:17:36 #rust-dev-tools <robert> and It actually fixed the delay
2018-05-28T20:17:47 #rust-dev-tools <robert> thanks again!
2018-05-28T20:17:55 #rust-dev-tools <Phrohdoh> You're welcome! Have fun. :)
2018-05-28T20:18:11 #rust-dev-tools <Phrohdoh> nrc, could we create a wiki page for configuring certain editors?
2018-05-28T20:18:21 #rust-dev-tools <robert> If you're located in Berlin, let me know, I'll buy you a beer :P
2018-05-28T20:18:35 #rust-dev-tools <Phrohdoh> I'm nowhere near Berlin but do appreciate the gesture. :)
2018-05-28T20:21:05 #rust-dev-tools * Phrohdoh thinks, this would be a good self-answered SO question
2018-05-28T20:26:46 #rust-dev-tools <Phrohdoh> robert: Did you have to restart rls or neovim to see the changes take place?
2018-05-28T20:27:18 #rust-dev-tools <robert> let me check
2018-05-28T20:28:13 #rust-dev-tools <robert> yes
2018-05-28T20:28:20 #rust-dev-tools <Phrohdoh> Which one? Or was it both?
2018-05-28T20:28:39 #rust-dev-tools <robert> Iah
2018-05-28T20:28:50 #rust-dev-tools <robert> I had to restart the LangaugeClient
2018-05-28T20:29:02 #rust-dev-tools <Phrohdoh> Is there a command to do that or did you just restart nvim?
2018-05-28T20:29:08 #rust-dev-tools <robert> there is a command
2018-05-28T20:29:23 #rust-dev-tools <robert> LanguageClientStart
2018-05-28T20:29:27 #rust-dev-tools <robert> and LanguageClientStop
2018-05-28T20:30:02 #rust-dev-tools <Phrohdoh> And is your server startup the following? 'rust': ['rustup', 'run', 'nightly', 'rls'],
2018-05-28T20:30:12 #rust-dev-tools <Phrohdoh> I ask because I am attempting to document this.
2018-05-28T20:30:18 #rust-dev-tools <Phrohdoh> And the more information the better.
2018-05-28T20:33:05 #rust-dev-tools <robert> let g:LanguageClient_serverCommands = {
2018-05-28T20:33:07 #rust-dev-tools <robert>     \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
2018-05-28T20:33:09 #rust-dev-tools <robert> }
2018-05-28T20:33:27 #rust-dev-tools <robert> that's configuration in my case
2018-05-28T20:33:29 #rust-dev-tools <Phrohdoh> great, thanks a ton robert
2018-05-28T20:37:30 #rust-dev-tools <Phrohdoh> https://stackoverflow.com/questions/50573080/how-do-i-configure-the-rust-language-server-via-languageclient-neovim
2018-05-28T20:39:10 #rust-dev-tools <robert> nice
2018-05-29T01:56:36 #rust-dev-tools <jonhoo_mibbit> Hey all \o/
2018-05-29T01:57:15 #rust-dev-tools <jonhoo_mibbit> I'm not entirely sure if this is the right place to ping about this, but rust.vim is pretty broken with the new rustfmt CLI options. Would be good if someone could review https://github.com/rust-lang/rust.vim/pull/213
2018-05-29T13:58:03 #rust-dev-tools <misdreavus> steveklabnik: ^
2018-05-29T13:58:22 #rust-dev-tools <misdreavus> tho i think the official story is that rust.vim got merged upstream into vim proper >_>
2018-05-29T14:28:12 #rust-dev-tools <steveklabnik> yeah. that means that upstream is now broken.......
2018-05-29T14:38:34 #rust-dev-tools <sfackler> might be worth archiving rust-lang/rust.vim with a readme update to point to upstream
2018-05-29T14:50:28 #rust-dev-tools <misdreavus> may also be worth keeping it around as an override that could be updated faster than upstream >_>
2018-05-29T14:55:19 #rust-dev-tools <steveklabnik> sfackler: they didn't accept all of it
2018-05-29T14:55:24 #rust-dev-tools <steveklabnik> so it was worth it regardless
2018-05-29T14:55:30 #rust-dev-tools <steveklabnik> upstream accepted the basics
2018-05-29T15:10:28 #rust-dev-tools <sfackler> Ah
2018-05-29T17:59:34 #rust-dev-tools <jonhoo> steveklabnik: I thought upstream just took syntax and indent? did they also take rustfmt and such?
2018-05-29T20:36:00 #rust-dev-tools <fitzgen> nrc: ping
2018-05-29T20:36:04 #rust-dev-tools <fitzgen> steveklabnik: ping
2018-05-29T21:06:37 #rust-dev-tools <fitzgen> steveklabnik: unping
2018-05-29T21:12:57 #rust-dev-tools <jonhoo> fitzgen: i like unping. never seen that before.
2018-05-29T21:13:20 #rust-dev-tools <fitzgen> jonhoo: yeah, unfortunately it ends up notifying the user twice :-p
2018-05-29T21:14:39 #rust-dev-tools <jonhoo> hehe, true
2018-05-31T22:58:25 #rust-dev-tools <db48x> is there a way to make rustfmt not strip formfeed characters from the formatted source?
2018-06-01T14:54:27 #rust-dev-tools <Xatenev> hello
2018-06-01T14:54:37 #rust-dev-tools <Xatenev> I am trying to use the rust language server
2018-06-01T14:54:39 #rust-dev-tools <Xatenev> but I dont get how to start it
2018-06-01T14:54:51 #rust-dev-tools <Xatenev> I've installed it as described on https://github.com/rust-lang-nursery/rls and then I type rustup run stable rls
2018-06-01T14:55:01 #rust-dev-tools <Xatenev> and I get error: toolchain 'stable-x86_64-unknown-linux-gnu' does not have the binary `rls`
2018-06-01T14:55:16 #rust-dev-tools <Xatenev> im confused how to start the rust language server for my editor. 
2018-06-01T14:55:17 #rust-dev-tools <Xatenev> thanks
2018-06-01T14:56:14 #rust-dev-tools <LordRyan> What's your default toolchain? stable or nightly?
2018-06-01T14:56:24 #rust-dev-tools <Xatenev> stable I think
2018-06-01T14:56:25 #rust-dev-tools <Xatenev> im not 100% sure
2018-06-01T14:56:56 #rust-dev-tools <Xatenev> yea stable
2018-06-01T14:57:06 #rust-dev-tools <LordRyan> and what command did you run to install it?
2018-06-01T14:57:25 #rust-dev-tools <Xatenev> I did rustup component add rls-preview rust-analysis rust-src as described on the github main page
2018-06-01T14:57:52 #rust-dev-tools <Xatenev> when I do rustup run nightly rls - nothing happens
2018-06-01T14:57:55 #rust-dev-tools <Xatenev> maybe it worked with nightly
2018-06-01T14:58:22 #rust-dev-tools <LordRyan> interesting. I'm not sure, then. Someone else might know.
2018-06-01T14:58:36 #rust-dev-tools <Xatenev> my editor sadly still isnt showing completions but idk if thats because the language server isnt started or because ive set my editor wrong :(
2018-06-01T15:09:51 #rust-dev-tools <Diggsey> Xatenev: the RLS and other components are specific to the toolchain
2018-06-01T15:09:59 #rust-dev-tools <Diggsey> so if you install them for stable
2018-06-01T15:10:06 #rust-dev-tools <Diggsey> they will not exist on your nightly toolchain
2018-06-01T15:10:13 #rust-dev-tools <Diggsey> unless you also install them there
2018-06-01T15:10:24 #rust-dev-tools <Diggsey> to run the RLS after installing it, you would just run `rls`
2018-06-01T15:10:32 #rust-dev-tools <Diggsey> but your editor should handle this
2018-06-01T15:10:41 #rust-dev-tools <Xatenev> yea when I do this on command line i get error: toolchain 'stable-x86_64-unknown-linux-gnu' does not have the binary `rls`
2018-06-01T15:10:55 #rust-dev-tools <Xatenev> in the console of my editor it keeps spamming start end start end
2018-06-01T15:11:10 #rust-dev-tools <Xatenev> but if it doesnt work on console i guess it doesnt work for my editor too .P
2018-06-01T15:11:14 #rust-dev-tools <Diggsey> and what's the output of `rustup component add rls-preview`?
2018-06-01T15:11:33 #rust-dev-tools <Xatenev> info: downloading component 'rls-preview'
2018-06-01T15:11:39 #rust-dev-tools <Xatenev> info: installing component 'rls-preview
2018-06-01T15:11:40 #rust-dev-tools <Xatenev> thats it
2018-06-01T15:11:59 #rust-dev-tools <Diggsey> did you just run it again now?
2018-06-01T15:12:01 #rust-dev-tools <Xatenev> Ive changed my editor to use "rustup run nightly rls" but still no autofill
2018-06-01T15:12:06 #rust-dev-tools <Xatenev> i run it just now
2018-06-01T15:12:27 #rust-dev-tools <Diggsey> and running just `rls` still still errors?
2018-06-01T15:12:37 #rust-dev-tools <Xatenev> oh no it works now
2018-06-01T15:12:40 #rust-dev-tools <Xatenev> i did rustup default stable somewhere before
2018-06-01T15:12:43 #rust-dev-tools <Xatenev> its probably because of this
2018-06-01T15:12:49 #rust-dev-tools <Xatenev> i guess i was in nightly mode then?
2018-06-01T15:12:54 #rust-dev-tools <Diggsey> ok, I think what happened was that last time you installed it for nightly
2018-06-01T15:13:19 #rust-dev-tools <Diggsey> or beta maybe
2018-06-01T15:13:29 #rust-dev-tools <Xatenev> oh now i get a ton of errors in my editor console
2018-06-01T15:13:29 #rust-dev-tools <Xatenev> :p
2018-06-01T15:13:34 #rust-dev-tools <Xatenev> connection is closed
2018-06-01T15:14:17 #rust-dev-tools <Diggsey> your editor should just use `rls` assuming it runs that command in your project folder
2018-06-01T15:14:31 #rust-dev-tools <Xatenev> after restart - no errors anymore but no suggestions too :(
2018-06-01T15:15:02 #rust-dev-tools <Xatenev> @Diggsey I used the example configuration here https://github.com/onivim/oni/wiki/Language-Support#rust
2018-06-01T15:15:34 #rust-dev-tools <Diggsey> ok, and you restarted after applying that config?
2018-06-01T15:15:46 #rust-dev-tools <Xatenev> I did
2018-06-01T15:16:23 #rust-dev-tools <Xatenev> @Diggsey In console of onivim i can see it tries to do things: [Language Client] Request textDocument/completion - /var/www/html/rust/hello_world/src/main.rs: start
2018-06-01T15:16:38 #rust-dev-tools <Xatenev> but theres nothing popping up or anything
2018-06-01T15:16:51 #rust-dev-tools <Diggsey> hm, I don't know, I don't use onivim
2018-06-01T15:17:09 #rust-dev-tools <Diggsey> but if `rls` is running then it should all be configured correctly
2018-06-01T15:17:50 #rust-dev-tools <Xatenev> rls works just fine now, i guess the issue is with onivim then
2018-06-01T15:17:56 #rust-dev-tools <Xatenev> thanks for ur help anyways Diggsey 
2018-06-01T15:17:59 #rust-dev-tools <Diggsey> np
2018-06-01T15:22:41 #rust-dev-tools <Xatenev> okay I fixed it
2018-06-01T15:22:41 #rust-dev-tools <Xatenev> heh
2018-06-03T18:49:11 #rust-dev-tools <drager> Why is my code always recompiled when using rls-vscode and then right after running cargo run. Then back to the editor and it recompiles again...
2018-06-03T19:37:03 #rust-dev-tools <sfackler> drager: what version of rust are you using? that was a bug in 1.26.0's rls that was fixed in 1.26.1 I believe
2018-06-03T19:40:00 #rust-dev-tools <drager> sfackler: rustc 1.26.0 (a77568041 2018-05-07)
2018-06-03T19:40:08 #rust-dev-tools <drager> I see, will try that then
2018-06-03T21:02:30 #rust-dev-tools <drager> sfackler: Works better, thanks!
2018-06-04T03:38:07 #rust-dev-tools <est31> https://gitlab.gnome.org/GNOME/gnome-builder/issues/494
2018-06-04T03:38:22 #rust-dev-tools <est31> this issue could get some insights by official dev tools people
2018-06-04T03:38:28 #rust-dev-tools <est31> like what should gnome builder do here
2018-06-04T03:38:44 #rust-dev-tools <est31> regexes seem not usable, maybe --error-format=json ??
2018-06-04T03:38:51 #rust-dev-tools <est31> what do the other editors do
2018-06-04T03:38:59 #rust-dev-tools <est31> explaining all of that
2018-06-04T14:18:50 #rust-dev-tools <WindowsBunny> one day RLS will stop crashing for me
2018-06-04T14:18:55 #rust-dev-tools <WindowsBunny> fatal runtime error: memory allocation failed [Info  - 10:18:11 AM] Connection to server got closed. Server will restart.
2018-06-04T22:27:24 #rust-dev-tools <navidem> nrc: ping
2018-06-04T22:29:15 #rust-dev-tools <nrc> navidem: pong
2018-06-04T22:29:22 #rust-dev-tools <navidem> https://github.com/nrc/rls-analysis/blob/master/src/lowering.rs#L366
2018-06-04T22:29:52 #rust-dev-tools <navidem> this function wants to use raw_sig.span, which does not exist!
2018-06-04T22:30:48 #rust-dev-tools <navidem> should I start by adding span in data?!
2018-06-04T22:30:52 #rust-dev-tools <nrc> yeah, just delete that line
2018-06-04T22:31:04 #rust-dev-tools <nrc> no, change the lowering function
2018-06-04T22:31:08 #rust-dev-tools <nrc> it is out of date
2018-06-04T22:31:09 #rust-dev-tools <navidem> OK
2018-06-04T22:31:21 #rust-dev-tools <nrc> also ident_start -> start, etc
2018-06-04T22:31:41 #rust-dev-tools <navidem> sure, all of them were failing as well
2018-06-04T22:35:53 #rust-dev-tools <navidem> nrc: do you mean I should update Struct Signature in analysis.rs?
2018-06-04T22:37:30 #rust-dev-tools <nrc> yes
2018-06-05T00:12:20 #rust-dev-tools <navidem> nrc: making those changes, gives me a successful build. But at the run the Def struct has no sig. All are None.
2018-06-05T00:12:20 #rust-dev-tools <navidem> My debuggings show the read crate from file (at https://github.com/nrc/rls-analysis/blob/master/src/raw.rs#L68) has no sig field in it. Any suggestion would be appreciated :)
2018-06-05T00:46:42 #rust-dev-tools <nrc> navidem: when you run rustc you need to opt-in to having signatures
2018-06-05T00:46:54 #rust-dev-tools <nrc> you can pass a config struct for save-analysis
2018-06-05T00:46:58 #rust-dev-tools <nrc> it is defined in rls-data
2018-06-05T00:48:57 #rust-dev-tools <nrc> you serialise it and set the env var RUST_SAVE_ANALYSIS_CONFIG
2018-06-05T15:27:42 #rust-dev-tools <dherman> what is the build command that VSCode+RLS uses?
2018-06-05T15:28:22 #rust-dev-tools <dherman> I'm trying to debug some buggy build behavior in my project, which is getting triggered by the background building
2018-06-05T20:03:33 #rust-dev-tools <nrc> fitzgen woboats steveklabnik japaric: ping - meeting
2018-06-05T20:05:06 #rust-dev-tools <steveklabnik> i am abroad and don't have an easy way to attend, but also don't really have anything to report
2018-06-05T20:05:12 #rust-dev-tools <steveklabnik> doxidize is still not being worked on :)
2018-06-05T20:48:08 #rust-dev-tools <Manishearth> steveklabnik: if steve doesn't show up within 10 minutes we're legally allowed to skip the meeting
2018-06-05T20:50:49 #rust-dev-tools <nrc> cheers steve!
2018-06-05T20:52:18 #rust-dev-tools <Manishearth> killercup-M: do you have access to editing issues on the rust repo? if not we should get you access
2018-06-05T20:53:00 #rust-dev-tools <killercup> Manishearth: i don't
2018-06-05T20:53:11 #rust-dev-tools <killercup> (not sure i really need it, though)
2018-06-05T21:01:17 #rust-dev-tools <Manishearth> triage and shit
2018-06-05T21:04:02 #rust-dev-tools <kennytm> Manishearth: https://github.com/rust-lang/rust/pull/51122#issuecomment-394853282 what do you mean by "toolchain code"?
2018-06-05T21:04:18 #rust-dev-tools <killercup> Manishearth: oh no then i need to do triage and shit :P (nah, feel free to give me that power)
2018-06-05T21:10:50 #rust-dev-tools <Manishearth> kennytm: all of it :)
2018-06-05T21:11:43 #rust-dev-tools <Manishearth> killercup: the monkey's paw unfurls
2018-06-05T21:20:11 #rust-dev-tools <killercup> TIL about the short story by w w jacobs
2018-06-05T21:24:19 #rust-dev-tools <Manishearth> nrc: btw, clippy is MPL, which is a pretty okay license, but should we be switching to dual MIT/Apache or perhaps triple?
2018-06-05T21:24:34 #rust-dev-tools <Manishearth> cc oli_obk_ 
2018-06-05T21:25:05 #rust-dev-tools <Manishearth> it does have nearly 200 contributors
2018-06-05T21:51:06 #rust-dev-tools <nrc> I don't really know
2018-06-05T21:51:23 #rust-dev-tools <nrc> I imagine changing would be difficult
2018-06-05T21:53:43 #rust-dev-tools <LordRyan> Changing to something less restrictive should be easier than to something more restrictive.
2018-06-05T21:54:05 #rust-dev-tools <LordRyan> There should be no implication for someone moving from most licenses to MIT, but I'm not sure about Apache.
2018-06-05T21:57:18 #rust-dev-tools <LordRyan> The MIT license is I think a tiny bit more liberal than the Apache license - the MIT license only restricts you based on keeping the license and copyright notice, while the Apache license says "you can do this, this, this, this, this" which *looks* like it includes everything but will make companies want a lawyer just in case.
2018-06-05T21:58:28 #rust-dev-tools <LordRyan> That being said, either way, the Apache and MIT license both are more permissive than the MPL.
2018-06-05T21:59:17 #rust-dev-tools <LordRyan> I think the biggest issue would be whether people have their names attached to copyright - in which case you'd require opt-in approval I think?
2018-06-05T22:00:20 #rust-dev-tools <LordRyan> (obligatory disclaimer that I am not a lawyer and should not be held responsible for actions leading from the above advice)
2018-06-05T22:14:58 #rust-dev-tools <Manishearth> LordRyan: it's not easier either way
2018-06-05T22:15:03 #rust-dev-tools <Manishearth> you need sign off from all the contributors
2018-06-05T22:15:30 #rust-dev-tools <Manishearth> easier in the sense that some folks may care more if switching to something less permissive, but we're going for dual/triple licensing so that's not the issue
2018-06-05T22:29:22 #rust-dev-tools <LordRyan> Manishearth: my point was more that for the community and people who want to use it, it would be better
2018-06-05T22:29:33 #rust-dev-tools <LordRyan> i definitely get that a license change takes a lot of work
2018-06-05T22:31:15 #rust-dev-tools <Manishearth> yeah
2018-06-05T23:23:17 #rust-dev-tools <Manishearth> nrc: oli_obk_ : https://manishearth.github.io/blog/2018/06/05/the-future-of-clippy-the-rust-linter/
2018-06-05T23:31:00 #rust-dev-tools <est31> I've ran an RFC to get rust-lang/rfcs licensed
2018-06-05T23:31:15 #rust-dev-tools <est31> and we actually got approval by almost everyone
2018-06-05T23:31:21 #rust-dev-tools <est31> I think it was 100 people or something
2018-06-05T23:31:27 #rust-dev-tools <est31> except for a few people
2018-06-05T23:31:29 #rust-dev-tools <est31> like 4
2018-06-05T23:31:31 #rust-dev-tools <est31> or 5
2018-06-05T23:31:37 #rust-dev-tools <est31> still waiting on their approval
2018-06-05T23:31:43 #rust-dev-tools <est31> almost one year later
2018-06-05T23:32:19 #rust-dev-tools <est31> https://github.com/rust-lang/rust/issues/43461
2018-06-05T23:32:50 #rust-dev-tools <est31> what you can do however *if* you want to change the license
2018-06-05T23:33:04 #rust-dev-tools <est31> is to say that any new contribution must accept the new terms
2018-06-05T23:33:15 #rust-dev-tools <est31> then your problem doesn't get worse :p
2018-06-06T07:38:54 #rust-dev-tools <oli_obk_> We can certainly try to open a relicensing PR and get everyone to sign off
2018-06-06T07:39:01 #rust-dev-tools <oli_obk_> but I'm not sure how long that'll take to merge
2018-06-07T11:28:47 #rust-dev-tools <drager> Is it just me or does the vscode-rust plugin stops working a lot? The RLS server crashes and then I'll have to restart it. It's pretty slow as well.
2018-06-07T11:29:19 #rust-dev-tools <drager> Yeah sure, I have a slow computer atm but it's pretty slow on a highend machine as well.
2018-06-07T12:09:34 #rust-dev-tools <oli_obk_> drager: on which rustc are you? `rustc --version`
2018-06-07T12:19:45 #rust-dev-tools <drager> oli_obk_: rustc 1.26.1 (827013a31 2018-05-25
2018-06-07T12:20:28 #rust-dev-tools <oli_obk_> drager: hmm... 1.26.0 had a bug with rls, but I think it was fixed in 1.26.1
2018-06-07T12:22:01 #rust-dev-tools <drager> Yeah, that fixed a lot of weird stuff
2018-06-07T12:22:49 #rust-dev-tools <drager> But the rls of the vscode plugin is slow and crashes when lets say I put a semicolon on the wrong place :P
2018-06-07T12:22:54 #rust-dev-tools <drager> or*
2018-06-07T15:42:40 #rust-dev-tools <simulacrum> cc nrc
2018-06-07T19:28:40 #rust-dev-tools <Manishearth> tromey: around?
2018-06-07T19:28:44 #rust-dev-tools <tromey> Manishearth: hey
2018-06-07T19:29:02 #rust-dev-tools <Manishearth> tromey: nrc mentioned something about LLVM removing language plugins -- how does that affect us?
2018-06-07T19:29:14 #rust-dev-tools <Manishearth> will we need to ship a separate lldb-rust plugin?
2018-06-07T19:29:23 #rust-dev-tools <Manishearth> (that is not part of the main lldb distribution?)
2018-06-07T19:29:29 #rust-dev-tools <tromey> it's lldb removing them (supposedly, I don't think it's happened yet)
2018-06-07T19:29:35 #rust-dev-tools <Manishearth> and if so, what's the workflow like for loading them
2018-06-07T19:29:36 #rust-dev-tools <tromey> it is not a big problem for us
2018-06-07T19:29:38 #rust-dev-tools <Manishearth> er, lldb, yeah
2018-06-07T19:29:41 #rust-dev-tools <Manishearth> tromey: why not?
2018-06-07T19:29:47 #rust-dev-tools <tromey> we will have to ship our own rust-lldb
2018-06-07T19:30:02 #rust-dev-tools <tromey> well, it's a problem, but not deadly
2018-06-07T19:30:19 #rust-dev-tools <tromey> you can still write a language plugin
2018-06-07T19:30:21 #rust-dev-tools <Manishearth> tromey: is this a specially built version of lldb, or is this a wrapper script that loads the plugin into lldb?
2018-06-07T19:30:25 #rust-dev-tools <tromey> they just are reluctant to accept them
2018-06-07T19:30:39 #rust-dev-tools <tromey> specially built lldb, because the lldb plugin system does not actually work for language plugins
2018-06-07T19:30:47 #rust-dev-tools <tromey> and they have said they are not going to allow that
2018-06-07T19:31:13 #rust-dev-tools <tromey> 1 sec
2018-06-07T19:31:28 #rust-dev-tools <tromey> relevant note http://lists.llvm.org/pipermail/lldb-dev/2018-January/013213.html
2018-06-07T19:31:39 #rust-dev-tools <tromey> there was some other discussion around then about these topics
2018-06-07T19:31:40 #rust-dev-tools <Manishearth> huh that seems kinda backward :(
2018-06-07T19:31:47 #rust-dev-tools <tromey> yes
2018-06-07T19:32:15 #rust-dev-tools <Manishearth> we can distribute a specially built lldb of course, it's just kinda annoying to have people have to use that
2018-06-07T19:32:22 #rust-dev-tools <tromey> yep
2018-06-07T19:32:38 #rust-dev-tools <Manishearth> anyway, good to know, thanks!
2018-06-07T19:32:44 #rust-dev-tools <tromey> you're welcome
2018-06-07T20:40:31 #rust-dev-tools <nrc> tromey: congrats on finishing the lldb stuff!
2018-06-07T20:40:44 #rust-dev-tools <nrc> Will try it out soon, maybe at the all-hands
2018-06-07T20:40:46 #rust-dev-tools <tromey> thanks :)
2018-06-07T20:40:49 #rust-dev-tools <tromey> that would be great
2018-06-07T20:40:55 #rust-dev-tools <tromey> I'm sure there will be problems
2018-06-07T20:41:08 #rust-dev-tools <tromey> I had a dream about a build failure :}
2018-06-07T20:41:36 #rust-dev-tools <tromey> next step is maybe getting it into rustup
2018-06-07T20:43:08 #rust-dev-tools <nrc> https://github.com/tromey/lldb/wiki#features seems to be out of date now?
2018-06-07T20:43:22 #rust-dev-tools <nrc> it would be great if we could make a binary available - is that possible?
2018-06-07T20:43:37 #rust-dev-tools <nrc> (Just to download from GH or something, not with Rustup)
2018-06-07T20:43:37 #rust-dev-tools <tromey> the wiki is up to date I think - what do you think is incorrect?
2018-06-07T20:44:01 #rust-dev-tools <tromey> I don't have a Mac yet so I guess me making a binary would not be too helpful yet
2018-06-07T20:44:23 #rust-dev-tools <nrc> The features section should mention expression execution rather than "the new plugin doesn't offer a lot beyond the status quo ante"
2018-06-07T20:45:12 #rust-dev-tools <nrc> Perhaps we could get a binary from Travis or something? I'm not really familiar with what is possible there
2018-06-07T20:45:39 #rust-dev-tools <tromey> me neither
2018-06-07T20:45:46 #rust-dev-tools <tromey> I will update the wiki a bit
2018-06-07T20:46:11 #rust-dev-tools <tromey> and look into the travis thing
2018-06-07T21:01:52 #rust-dev-tools <nrc> thanks!
2018-06-12T20:02:05 #rust-dev-tools <kbarros> Hi folks. RLS/VSCode seems to be working correctly when I navigate within my project. But when I jump to a crate dependency, navigation fails. In other words, it doesn't seem to be indexing crate dependencies. How can I diagnose this?
2018-06-12T20:09:59 #rust-dev-tools <kbarros> For example, if I write `let x = Some(1);` and then jump into the definition of `Some`, then I can not do any subsequent navigation within the `option.rs` file of the Rust standard library.
2018-06-12T20:36:59 #rust-dev-tools <nrc> kbarros: are you using nightly RLS?
2018-06-12T21:00:42 #rust-dev-tools <kbarros> @nrc: Pardon, but I'm not sure how to check that. I tried reinstalling components with ` rustup component add rls-preview --toolchain nightly`, etc., and I tried setting `rustup default nightly` but this does not change anything.
2018-06-12T21:28:34 #rust-dev-tools <nrc> kbarros: in VSCode set the `channel` setting to `nightly`
2018-06-12T21:29:21 #rust-dev-tools <nrc> you could also check that you have the source and analysis data components installed - `rustup component list` I think
2018-06-12T21:43:39 #rust-dev-tools <kbarros> I see. By default, `channel` tracks the current open project. But just to be safe, I added the VSCode setting: ` "rust-client.channel": "nightly"`. I also deleted the Cargo `target` directory. Still observing the same behavior. All three components are installed (rls-preview, analysis, and src).
2018-06-12T23:46:03 #rust-dev-tools <nrc> kbarros: hmm, that is weird. What version of RLS do you have?
2018-06-12T23:46:20 #rust-dev-tools <nrc> And can you jump into dependent crates from crates.io, rather than std?
2018-06-13T00:18:39 #rust-dev-tools <kbarros> nrc: The version is rls-preview 0.128.0-nightly (7d0bc55 2018-06-07) . Yes, I can jump into dependent crates from crates.io also. But these crates aren't getting indexed either.
2018-06-13T00:26:43 #rust-dev-tools <nrc> interesting
2018-06-13T00:26:59 #rust-dev-tools <nrc> kbarros: what platform are you on?
2018-06-13T00:27:04 #rust-dev-tools <nrc> That should all work
2018-06-13T00:27:27 #rust-dev-tools <kbarros> OS X, VSCode 1.24.0
2018-06-13T00:45:04 #rust-dev-tools <kbarros> nrc: I created a new user account on my machine, downloaded rustup, installed the VSCode plugin, and I'm getting the same behavior (i.e., RLS works in the main crate, but does not index stdlib). So I don't think it's a configuration issue?
2018-06-13T00:53:20 #rust-dev-tools <nrc> kbarros: Do you see any warnings or logs from VSCode?
2018-06-13T00:53:27 #rust-dev-tools <nrc> LIke "Startup error: ..."
2018-06-13T00:53:38 #rust-dev-tools <nrc> I think I know what is causing the problems...
2018-06-13T00:55:31 #rust-dev-tools <nrc> Hmm, but that shouldn't affect the VSCode distributable
2018-06-13T00:55:34 #rust-dev-tools <nrc> only master
2018-06-13T00:58:09 #rust-dev-tools <kbarros> Hmm, no. I even tried setting `export RUST_LOG=rls=debug` and I don't see any output (from https://github.com/rust-lang-nursery/rls/blob/master/debugging.md)
2018-06-13T01:02:43 #rust-dev-tools <kbarros> It works pretty well in the main crate. I'm pleasantly surprised. Thanks for your hard work!
2018-06-13T06:08:00 #rust-dev-tools <nrc> once I fix the other bug, I'll try and reproduce and fix this one :-)
2018-06-15T16:10:43 #rust-dev-tools <abhi> i am using VS Code for the first time to practice rust. I know how to build cargo projects. However, can i compile individual rust files using rustc?
2018-06-15T16:33:14 #rust-dev-tools <est31> yes, but it's not recommended
2018-06-15T16:33:19 #rust-dev-tools <est31> use cargo examples instead
2018-06-15T16:33:24 #rust-dev-tools <est31> or multiple binaries per project
2018-06-15T16:51:00 #rust-dev-tools <abhi> how can i make rustc run tests? i tried using `rustc myfile.rs --test` but doesn't run my tests
2018-06-15T16:56:53 #rust-dev-tools <abhi> ah got it. never mind.
2018-06-19T20:00:47 #rust-dev-tools <nrc> meeting time!
2018-06-19T20:01:10 #rust-dev-tools <japaric> will be there in a few mins
2018-06-19T20:05:36 #rust-dev-tools <nrc> steveklabnik, fitzgen, woboats: ping meeting
2018-06-19T20:05:47 #rust-dev-tools <fitzgen> woops one minute
2018-06-20T14:54:21 #rust-dev-tools <steveklabnik> nrc: gah, sorry, forgot about the meeting completely :(
2018-06-20T19:48:53 #rust-dev-tools <DJMcNab> @nrc my input for rust-lang-nursery/rls#914 is that I think it would be better for debugging purposes if we use the `expect!` macro wherever possible, which calls `panic!()` inline, allowing the problem line to be identified. For context a lot of the panics in the rls for me quote calling `Result::unwrap` on `Err` value, on a line in `libcore/result.rs`, where unwrap is implemented.
2018-06-20T19:49:41 #rust-dev-tools <DJMcNab> Unfortunately I do not have a lot of free time to implement this myself presently, but seems a relevant point.
2018-06-20T20:27:35 #rust-dev-tools <nrc> Most of the unwraps are on mutex locks where giving any detail is not helpful and distracting from the route cause, so I think unwrap is fine there. For other places it sounds like using expect! is a good call
2018-06-20T20:43:54 #rust-dev-tools <DJMcNab> Ok, fair enough. I suppose it's still possible that one mutex unwrap has a lot of errors, where it might be useful, but I have between very little and no experience with mutexes and co. 
2018-06-20T20:44:18 #rust-dev-tools <sfackler> mutex locks only fail if rls panicked while holding the mutex
2018-06-20T20:44:32 #rust-dev-tools <sfackler> nrc: you can switch over to poison-free mutexes to avoid those unwraps entirely
2018-06-20T20:48:05 #rust-dev-tools <nrc> sfackler: there are poison-free mutexes?!
2018-06-20T20:48:17 #rust-dev-tools <nrc> in std?
2018-06-20T20:48:36 #rust-dev-tools <sfackler> not in std, but the antidote crate wraps the std ones and de-poisons, and parking_lot's are poison-free
2018-06-20T20:49:53 #rust-dev-tools <nrc> ah, ok
2018-06-20T20:50:03 #rust-dev-tools <nrc> maybe we should switch to those
2018-06-20T20:51:23 #rust-dev-tools <nrc> DJMcNab: so the practical effect of the mutex poison thing is that there will be one panic which is the root cause and interesting to debug, and then a bunch of mutex lock panics which are just a distraction because they are caused by the first panic happening while we hold the lock
2018-06-20T20:53:59 #rust-dev-tools <DJMcNab> nrc: I think I kind of see. So if a thread panics, the `Mutex` lock is never released?
2018-06-20T20:54:37 #rust-dev-tools <sfackler> it is released, the mutex just tracks that something bad happened when it was locked
2018-06-20T20:56:47 #rust-dev-tools <DJMcNab> Just as a note, from my rls{numbers}.log file, it seems that the real error is `thread '<unnamed>' panicked at 'missing key in compiler_jobs'` for a lot of these
2018-06-20T21:03:48 #rust-dev-tools <nrc> DJMcNab: that is very relevant!
2018-06-20T21:04:15 #rust-dev-tools <nrc> Could you comment about that on a relevant issue with the project you are getting the errors with please?
2018-06-20T21:04:31 #rust-dev-tools <nrc> (The hardest thing for me is often being able to reproduce these things)
2018-06-20T21:04:44 #rust-dev-tools <nrc> And to check, are you on nightly rather than master?
2018-06-20T21:04:58 #rust-dev-tools <DJMcNab> It's all in `actix_web` for me. I think I'm on stable, but I'm not sure.
2018-06-20T21:05:19 #rust-dev-tools <nrc> (sorry, I meant rather than stable)
2018-06-20T21:05:37 #rust-dev-tools <nrc> Could you try with nightly and see if you still get the error please?
2018-06-20T21:06:04 #rust-dev-tools <DJMcNab> is override enough, or do I need to rustup default?
2018-06-20T21:06:27 #rust-dev-tools <nrc> You can set the channel in vscode
2018-06-20T21:06:43 #rust-dev-tools <nrc> an override is a bit didgy
2018-06-20T21:07:07 #rust-dev-tools <nrc> *dodgy
2018-06-20T21:07:10 #rust-dev-tools <DJMcNab> Ok, set in vscode, reloading
2018-06-20T21:07:47 #rust-dev-tools <DJMcNab> Interestingly, I've gotten a new error that it expected a type on line 6 of `bogofile`, which is just a semicolon
2018-06-20T21:08:03 #rust-dev-tools <nrc> that's a Racer thing and shouldn't cause any problems
2018-06-20T21:08:17 #rust-dev-tools <nrc> we recover from it
2018-06-20T21:08:36 #rust-dev-tools <DJMcNab> OK. It seems like the most unhelpful message ever :|.
2018-06-20T21:08:50 #rust-dev-tools <nrc> yeah, it's a log message, it shouldn't be user-facing
2018-06-20T21:09:04 #rust-dev-tools <DJMcNab> rls :spin: Updating...
2018-06-20T21:15:03 #rust-dev-tools <DJMcNab> Unfortunately I'm running out of time for today. I'll see if I can help anymore over the weekend. All I can say is that I'm getting a 'cannot access a scoped thread local variable without calling `set` first' error, with a funny path that doesn't exist: 'C:\Users\appveyor\.cargo\registry\src\github.com-1ecc6299db9ec823\scoped-tls-0.1.1\src\lib.rsC:\Users\appveyor\.cargo\registry\src\github.com-1ecc6299db9ec823\scoped-tls-0.1.1\src\lib.rs:C
2018-06-20T21:15:03 #rust-dev-tools <DJMcNab> :\Users\appveyor\.cargo\registry\src\github.com-1ecc6299db9ec823\scoped-tls-0.1.1\src\lib.rs::C:\Users\appveyor\.cargo\registry\src\github.com-1ecc6299db9ec823\scoped-tls-0.1.1\src\lib.rs:186186:9'
2018-06-20T21:21:18 #rust-dev-tools <nrc> That's interesting, thanks!
2018-06-20T21:21:27 #rust-dev-tools <nrc> I'll try playing with Actix...
2018-06-20T22:11:29 #rust-dev-tools <eijebong> Is there anything in rustfmt to transform an attribute value to a string ? By removing surrounding quotes and unescaping the ones in the string ?
2018-06-20T22:17:23 #rust-dev-tools <nrc> I don't think so
2018-06-21T00:34:01 #rust-dev-tools <nrc> DJMcNab: I can open actix-web and get good support with no errors. Could you let me know if you're doing any actions to see the errors?
2018-06-21T13:13:28 #rust-dev-tools <psebman> hey guys, sorry if it's been asked too many times before, but what are the recommended IDEs for Rust?
2018-06-21T13:13:55 #rust-dev-tools <psebman> what do you use?
2018-06-21T13:14:19 #rust-dev-tools <LordRyan> VS Code seems to be the most popular.
2018-06-21T13:14:22 #rust-dev-tools <psebman> Is RLS better than the intelliJ plugin?
2018-06-21T13:14:24 #rust-dev-tools <LordRyan> However, I use Vim.
2018-06-21T13:14:39 #rust-dev-tools <LordRyan> RLS is pretty useful IMO as it provides a consistent experience cross-editor
2018-06-21T13:15:16 #rust-dev-tools <LordRyan> and can be used to "transform" an editor into an IDE, as all the editor has to do is have the language server do the IDE stuffs.
2018-06-21T13:15:58 #rust-dev-tools <psebman> what about vim's support?
2018-06-21T13:16:03 #rust-dev-tools <psebman> is it RLS based?
2018-06-21T13:17:20 #rust-dev-tools <psebman> i'm not editor biased, I just want to know which IDE/editor will provide better language integration such that learning Rust can becomes easier
2018-06-21T13:18:36 #rust-dev-tools <psebman> my experience is that intellij's plugin worked best but that IDE is kind of heavy
2018-06-21T13:18:59 #rust-dev-tools <psebman> so far, i've only tried that and vscode
2018-06-21T13:19:43 #rust-dev-tools <psebman> where should I start if I wanted to set up vim to support rust dev?
2018-06-21T13:21:14 #rust-dev-tools <LordRyan> I use a plugin called LanguageClient-neovim
2018-06-21T13:21:25 #rust-dev-tools <LordRyan> despite the name it also works with Vim8 if you add on a few compatibility plugins
2018-06-21T13:21:47 #rust-dev-tools <LordRyan> There's also ALE which as of right now only supports the linting aspect of RLS.
2018-06-21T18:44:48 #rust-dev-tools <DJMcNab> nrc: I have run the rls with full debug stuff, here is all the info I could extract. https://gist.github.com/DJMcNab/650e37365a19f4ff4d19a882ff73381e. Note that it appears a transient dependency on the winapi crate seems to be causing a problem.
2018-06-21T18:45:48 #rust-dev-tools <WindowsBunny> I heard winapi
2018-06-21T18:46:46 #rust-dev-tools <DJMcNab> That being said, even in a minimal crate `cargo new --bin foo`, the RLS seems to crash on startup with the same thread '<unnamed>' panicked at 'cannot access a scoped thread local variable without calling `set` first', C:\Users\appveyor\.cargo\registry\src\github.com-1ecc6299db9ec823\scoped-tls-0.1.1\src\lib.rs:186:9. However, it then recovers when it is rerun?
2018-06-21T18:55:12 #rust-dev-tools <DJMcNab> As a note, I am not getting hover information, so maybe that's important?
2018-06-21T19:18:08 #rust-dev-tools <DJMcNab> I also appear to have a reliable panic when I ask for completions at `std::unwind::|HERE|`. I should be doing my other work, so I will leave now. Hope at least some of this helps :)
2018-06-22T14:09:33 #rust-dev-tools <LordRyan> http://termbin.com/viem <= my system crashed during the middle of `rustup update`, did that break things?
2018-06-22T15:45:39 #rust-dev-tools <fwiw> probably not, LordRyan 
2018-06-22T18:14:54 #rust-dev-tools <LordRyan> i'll nuke & pave in a bit then.
2018-06-22T18:14:56 #rust-dev-tools <LordRyan> !shrug
2018-06-22T18:14:56 #rust-dev-tools <rustbot> ¯\_(ツ)_/¯
2018-06-22T21:35:00 #rust-dev-tools <fwiw> LordRyan: https://github.com/rust-lang/rust/issues/51699
2018-06-23T15:55:48 #rust-dev-tools <LordRyan> so an update, it should work now
2018-06-23T16:17:08 #rust-dev-tools <LordRyan>    nightly-x86_64-unknown-linux-gnu updated - rustc 1.28.0-nightly (cbc4c8380 2018-06-22)
2018-06-26T18:53:55 #rust-dev-tools <batmanaod-M> Does anyone know why the `rust-lldb` script uses `--source-before-file` specifically? Do the commands *need* to be sourced before loading the debugging executable?
2018-06-26T18:54:01 #rust-dev-tools <batmanaod-M> I am looking for guidance regarding this issue: https://github.com/idanarye/vim-vebugger/issues/64
2018-06-26T18:54:27 #rust-dev-tools <batmanaod-M> ...more generally, does anyone know of any existing Vim8 or NeoVim debuggers that work with Rust?
2018-06-28T21:44:05 #rust-dev-tools <batmanaod-M> mw or tromey , could you please provide some insight on my question above about rust-lldb?
2018-06-28T21:44:36 #rust-dev-tools <tromey> I didn't see it
2018-07-03T16:51:39 #rust-dev-tools <fitzgen> steveklabnik: review ping on https://github.com/rust-lang-nursery/mdBook/pull/715 (or please redirect it to whoever would be a better reviewer!) :)
2018-07-03T16:51:50 #rust-dev-tools <steveklabnik> will check it out soon
2018-07-03T16:52:01 #rust-dev-tools <steveklabnik> appveyor is failing?
2018-07-03T16:52:42 #rust-dev-tools <fitzgen> steveklabnik: all the PRs from that time period had that failing
2018-07-03T16:52:49 #rust-dev-tools <fitzgen> steveklabnik: I believe it was when nightly rust was broken
2018-07-03T16:52:54 #rust-dev-tools <fitzgen> steveklabnik: because of URLs
2018-07-03T16:52:58 #rust-dev-tools <fitzgen> and rustup
2018-07-03T16:53:23 #rust-dev-tools <steveklabnik> ah
2018-07-03T16:53:26 #rust-dev-tools <steveklabnik> ill re-run it
2018-07-03T16:53:31 #rust-dev-tools <fitzgen> 👍
2018-07-03T16:53:35 #rust-dev-tools <fitzgen> thanks :)
2018-07-03T20:01:02 #rust-dev-tools <nrc> : dev tools meeting is now!
2018-07-03T20:02:15 #rust-dev-tools <nrc> steveklabnik, fitzgen, woboats ^
2018-07-03T20:02:40 #rust-dev-tools <steveklabnik> i have nothing to report and ashley has a meeting at the same time and it sucks to have two at the same time in our apartment :(
2018-07-03T20:02:48 #rust-dev-tools <nrc> fair enough
2018-07-04T05:31:10 #rust-dev-tools <llogiq> Hi folks!
2018-07-04T05:31:40 #rust-dev-tools <llogiq> I am currently looking into how to move mutagen off the quote_* APIs, but I haven't had coffee yet and am a bit lost.
2018-07-04T05:35:54 #rust-dev-tools <llogiq> It seems I'll have to include the syn (and possibly quote) crate, but that seems to change the API quite a bit.
2018-07-04T05:37:28 #rust-dev-tools <llogiq> Does someone have an example of a proc_macro_attribute using syn?
2018-07-04T05:41:38 #rust-dev-tools <dtolnay> here's one https://github.com/dtolnay/syn/tree/master/examples/trace-var
2018-07-04T13:04:22 #rust-dev-tools <mgaudet> quick Q: Is it possible to change where the RLS index gets generated, ideally out-of-tree (using the visual studio code extension?) 
2018-07-04T20:05:14 #rust-dev-tools <nrc> mgaudet: yes, there is a target directory setting which you can point wherever you like (you can't make the RLS data go outside of the target, but you can put the target wherever you like)
2018-07-04T20:08:16 #rust-dev-tools <mgaudet> nrc: Thanks. To be clear, is this a VSCode extension setting or an RLS setting? (or perhaps both -- veeeery new to this) 
2018-07-04T20:12:38 #rust-dev-tools <nrc> both
2018-07-04T20:12:49 #rust-dev-tools <nrc> you set it in vscode and then the extension passes it to the RLS
2018-07-04T20:14:15 #rust-dev-tools * mgaudet facepalms
2018-07-04T20:14:23 #rust-dev-tools <mgaudet> I must have scrolled right past it when I was looking for this
2018-07-04T20:14:27 #rust-dev-tools <mgaudet> Thanks :D 
2018-07-04T20:46:20 #rust-dev-tools <nrc> np
2018-07-06T13:50:58 #rust-dev-tools <mclosson> Greetings, short of changing the code I'm trying to parse is there any way to cause bindgen to ignore the case of the directory paths and filenames of the headers it is looking for when one header file refers to others for it to parse? (I'm trying to parse headers for a large C project developed on Windows with inconsistently typed cases)
2018-07-07T05:29:23 #rust-dev-tools <sfackler> woah! vscode has a run test button thing near rust tests now with the new nightly!
2018-07-07T05:29:25 #rust-dev-tools <sfackler> that's rad
2018-07-07T05:29:53 #rust-dev-tools <sfackler> hmm, it doesn't seem to do anything though...
2018-07-07T16:37:20 #rust-dev-tools <LordRyan> meanwhile, :autocmd BufWritePost *.rs AsyncRun cargo test
2018-07-07T16:37:22 #rust-dev-tools <LordRyan> :p
2018-07-07T16:38:29 #rust-dev-tools <eijebong> LordRyan: That would kill my computer :p I save my files every time I write a line...
2018-07-07T16:43:18 #rust-dev-tools <LordRyan> eijebong: great thing about asyncrun is that it only runs one instance at a time
2018-07-07T16:43:29 #rust-dev-tools <LordRyan> ... and also that you have to purposefully add that to your vimrc
2018-07-08T15:50:25 #rust-dev-tools <DJMcNab> Does anyone know how/if I can get the wrap_comments option of rustfmt to work for more doc comments? I have got wrap_comments=true in `rustfmt.toml`, as well as `comment_width=80` and `unstable_features=true`. In https://github.com/rust-lang-nursery/rustfmt/issues/627, it can be seen that doc comments are formatted. My text is taken from https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/versions/3.0.1.md, where the 
2018-07-08T15:50:25 #rust-dev-tools <DJMcNab> openapi property is described
2018-07-09T07:37:30 #rust-dev-tools <betterclever> Hey! I am currently working on an RLS client. I am having a strange behaviour from RLS in my client as opposed to VSCode about the "window/progress" messages.
2018-07-09T07:39:12 #rust-dev-tools <betterclever> When I open a project, RLS starts to build it. But in my case, it sends the "done" message too early even when the build of most crate has not been finished yet.
2018-07-09T07:39:48 #rust-dev-tools <betterclever> https://paste.rs/SCT
2018-07-09T07:40:40 #rust-dev-tools <betterclever> Like this, however, when I open the same project in VSCode. It continues to build and I can see the progress spinner much later till it actually finished building the project.
2018-07-09T07:41:46 #rust-dev-tools <betterclever> It is the same project in VSCode and my client. And I have tested by deleting the "target" folder in each client.
2018-07-09T20:13:39 #rust-dev-tools <nrc> sfackler: it should do something with the latest release of RLS and the extension
2018-07-11T18:16:28 #rust-dev-tools <GrayShade> hi, I noticed that there's a new clippy-preview component, but is it usable yet? I tried adding a rustup shim (cargo-clippy -> rustup), but the binary doesn't seem to be included in the component (there's only a clippy-driver)
2018-07-11T18:20:13 #rust-dev-tools <Manishearth> GrayShade: not usable yet
2018-07-11T18:20:19 #rust-dev-tools <Manishearth> GrayShade: wait there's only a clippy-driver
2018-07-11T18:20:21 #rust-dev-tools <phansch> GrayShade: There is a way, but it's probably easier to wait one or two days
2018-07-11T18:20:22 #rust-dev-tools <GrayShade> Manishearth: ah, okay :-)
2018-07-11T18:20:22 #rust-dev-tools <Manishearth> yeah 
2018-07-11T18:20:27 #rust-dev-tools <Manishearth> sorry
2018-07-11T18:20:32 #rust-dev-tools <Manishearth> so you *can* use it
2018-07-11T18:20:51 #rust-dev-tools <Manishearth> https://twitter.com/ManishEarth/status/1015820231552294913
2018-07-11T18:20:56 #rust-dev-tools <GrayShade> I don't know what to do with clippy-driver. it looks like a rustc?
2018-07-11T18:20:57 #rust-dev-tools <Manishearth> you just don't want to use it that way
2018-07-11T18:20:59 #rust-dev-tools <Manishearth> yeah it is
2018-07-11T18:21:05 #rust-dev-tools <Manishearth> but it expects to be called from cargo
2018-07-11T18:21:09 #rust-dev-tools <Manishearth> cargo-clippy at any rate
2018-07-11T18:21:27 #rust-dev-tools <Manishearth> we're working on shipping cargo-clippy, there's a pr i think
2018-07-11T18:24:01 #rust-dev-tools <GrayShade> I only found https://github.com/rust-lang/rust/pull/52172, but that's fair. not like I can't wait a couple of days :-)
2018-07-11T18:24:35 #rust-dev-tools <GrayShade> ah, another thing. I noticed that the rls rustfmt and rustfmt-preview are not always in sync. I suppose that's a known issue, isn't it?
2018-07-12T00:04:12 #rust-dev-tools <kennytm> RLS is broken https://github.com/rust-lang/rust/pull/52172#issuecomment-404346817
2018-07-13T23:37:18 #rust-dev-tools <eddyb> nrc: I just saw that the latest VSCode has a new "outline view " - are there plans to add support for that to RLS?
2018-07-13T23:38:15 #rust-dev-tools <eddyb> wait no I was just on the wrong file!
2018-07-13T23:38:44 #rust-dev-tools <eddyb> hmm and there was an extension in there that did a similar thing?
2018-07-13T23:39:08 #rust-dev-tools <eddyb> it's weird how you can observe "Rust file open but RLS hasn't kicked in"
2018-07-13T23:39:40 #rust-dev-tools <eddyb> okay without that extra extension I get nothing in a Rust file
2018-07-13T23:40:33 #rust-dev-tools <eddyb> the grid layout is nice
2018-07-13T23:41:48 #rust-dev-tools <sfackler> eddyb: do you know why these enums aren't 16 bytes? I thought the niche filling stuff would realize it can use the data pointer being 0 as the discriminant: https://play.rust-lang.org/?gist=28e57a4c17885d30ab0d7225a11bcd54&version=nightly&mode=debug&edition=2015
2018-07-13T23:42:01 #rust-dev-tools <eddyb> wrong channel?
2018-07-13T23:42:07 #rust-dev-tools <sfackler> oops yeah
2018-07-13T23:42:11 #rust-dev-tools <eddyb> sfackler: this is an existing issue
2018-07-13T23:44:47 #rust-dev-tools <eddyb> nrc: oooh new settings GUI
2018-07-15T20:42:12 #rust-dev-tools <nrc> oooh, I haven't seen the settings GUI
2018-07-15T20:42:52 #rust-dev-tools <nrc> there is support already for some outline stuff in other editors, though it's not great. It seems like something that people are interested on working on though
2018-07-16T20:37:38 #rust-dev-tools <imperio> nrc: hi, you're the one in charge of highfive right?
2018-07-16T20:37:58 #rust-dev-tools <nrc> kinda, yeah
2018-07-16T20:39:41 #rust-dev-tools <imperio> nrc: can you merge my PR then please? :) https://github.com/rust-lang-nursery/highfive/pull/163
2018-07-16T20:39:54 #rust-dev-tools <imperio> I had some conflicts with other members of rust-lang over this
2018-07-16T20:40:10 #rust-dev-tools <imperio> so as long as the current system is in place, I'd like to check that it's not "destroyed"
2018-07-16T20:40:41 #rust-dev-tools <imperio> I can find you the issue I'm referring to if you want?
2018-07-16T20:41:17 #rust-dev-tools <nrc> So, there is a problem at the moment
2018-07-16T20:41:55 #rust-dev-tools <imperio> is it a question or an affirmation?
2018-07-16T20:42:03 #rust-dev-tools <nrc> the current tip of master doesn't actually run, so I'll need to patch the older version we've got on the server.
2018-07-16T20:42:12 #rust-dev-tools <nrc> I can do that later today, probably
2018-07-16T20:42:14 #rust-dev-tools <imperio> ah
2018-07-16T20:42:22 #rust-dev-tools <imperio> if you need help, don't hesitate to ask me
2018-07-16T20:42:29 #rust-dev-tools <nrc> I'll merge now, but the change won't show up until later
2018-07-16T20:42:35 #rust-dev-tools <imperio> I can't run it at all but I can run code checks haha
2018-07-16T20:42:39 #rust-dev-tools <nrc> nah it's fine, it's not a big job
2018-07-16T20:42:52 #rust-dev-tools <imperio> cool thanks
2018-07-16T20:42:54 #rust-dev-tools <nrc> just got meetings, etc. this morning
2018-07-16T20:43:01 #rust-dev-tools <imperio> still looking for the issue meanwhile
2018-07-16T20:44:02 #rust-dev-tools <imperio> nrc: for reference, here's the discussion: https://github.com/rust-lang/rust/pull/51580#issuecomment-399671642
2018-07-16T20:46:18 #rust-dev-tools * nrc looks
2018-07-16T20:46:52 #rust-dev-tools <imperio> Manishearth took a look at it too but I don't know what his conclusion was (since he didn't comment :p)
2018-07-16T20:47:38 #rust-dev-tools <Manishearth> imperio: a look at what?
2018-07-16T20:47:41 #rust-dev-tools <Manishearth> the error code thing?
2018-07-16T20:47:47 #rust-dev-tools <imperio> yep
2018-07-16T20:47:55 #rust-dev-tools <Manishearth> I don't care if they're out of order, they should just be stable
2018-07-16T20:48:00 #rust-dev-tools <imperio> I think geal told you about it?
2018-07-16T20:48:03 #rust-dev-tools <Manishearth> yes
2018-07-16T20:48:08 #rust-dev-tools <Manishearth> there is no benefit to them being out of order
2018-07-16T20:48:12 #rust-dev-tools <Manishearth> er
2018-07-16T20:48:14 #rust-dev-tools <Manishearth> in order
2018-07-16T20:48:16 #rust-dev-tools <Manishearth> it's nicer, sure
2018-07-16T20:48:30 #rust-dev-tools <imperio> we have lints over this order :-/
2018-07-16T20:48:40 #rust-dev-tools <imperio> (made before I ever came in)
2018-07-16T20:48:51 #rust-dev-tools <Manishearth> yes
2018-07-16T20:49:00 #rust-dev-tools <imperio> and it's way simpler to keep track of them too if you can just check by adding one until you don't find one anymore
2018-07-16T20:49:03 #rust-dev-tools <Manishearth> that does not automatically make it a thing we *should* lint about
2018-07-16T20:49:17 #rust-dev-tools <imperio> I added my pov just after ;)
2018-07-16T20:49:24 #rust-dev-tools <Manishearth> why must they be monotonically added?
2018-07-16T20:49:29 #rust-dev-tools <Manishearth> pick any unused error code
2018-07-16T20:49:38 #rust-dev-tools <Manishearth> ideally ./x.py can tell you which one to use next
2018-07-16T20:49:44 #rust-dev-tools <Manishearth> it's a simple script to write
2018-07-16T20:49:46 #rust-dev-tools <imperio> it does already
2018-07-16T20:49:49 #rust-dev-tools <Manishearth> perfect
2018-07-16T20:49:51 #rust-dev-tools <Manishearth> use that
2018-07-16T20:49:54 #rust-dev-tools <imperio> it returns the biggest one
2018-07-16T20:49:57 #rust-dev-tools <Manishearth> that's also fine
2018-07-16T20:50:01 #rust-dev-tools <Manishearth> if there are gaps there are gaps
2018-07-16T20:50:14 #rust-dev-tools <imperio> ralala
2018-07-16T20:50:25 #rust-dev-tools <imperio> well, I don't agree but I understand your position
2018-07-16T20:50:28 #rust-dev-tools <Manishearth> like, this is a circular argument
2018-07-16T20:50:40 #rust-dev-tools <Manishearth> gaps make it hard to add new codes that fill in the gaps
2018-07-16T20:50:54 #rust-dev-tools <Manishearth> but we're discussing whether or not gaps are something we should care about at all
2018-07-16T20:51:09 #rust-dev-tools <Manishearth> imperio: you have not yet given an argument for why it is good to avoid gaps
2018-07-16T20:51:52 #rust-dev-tools <imperio> like I said, in my experience working with error codes, when he had to update the existing ones, we just had to write a script to get all the error codes and update them
2018-07-16T20:52:08 #rust-dev-tools <imperio> it'd make things a *tiny* bit more complicated on this behalf
2018-07-16T20:52:17 #rust-dev-tools <Manishearth> "when we had to update the existing ones"?
2018-07-16T20:52:25 #rust-dev-tools <imperio> even if in truth, we can just look at error codes in diagnostics.rs files
2018-07-16T20:52:35 #rust-dev-tools <Manishearth> I'm not clear on what you're talking about
2018-07-16T20:52:42 #rust-dev-tools <Manishearth> is this when we were adding all the error codes?
2018-07-16T20:52:43 #rust-dev-tools <imperio> when I added examples compilation/execution tests for instance
2018-07-16T20:52:46 #rust-dev-tools <Manishearth> ah
2018-07-16T20:52:47 #rust-dev-tools <Manishearth> sure
2018-07-16T20:52:58 #rust-dev-tools <Manishearth> i don't see how gaps affect this
2018-07-16T20:53:04 #rust-dev-tools <Manishearth> you would have to write a slightly different script. big deal
2018-07-16T20:53:13 #rust-dev-tools <imperio> that's what I said
2018-07-16T20:53:21 #rust-dev-tools <Manishearth> yeah
2018-07-16T20:53:27 #rust-dev-tools <imperio> but I think at this point, i just like things following
2018-07-16T20:53:35 #rust-dev-tools <imperio> so my point is therefore invalid
2018-07-16T20:53:43 #rust-dev-tools <Manishearth> right, that isn't an argument for it being in order :)
2018-07-16T20:53:52 #rust-dev-tools <imperio> good job, you changed my mind XD
2018-07-16T20:54:06 #rust-dev-tools <Manishearth> "looks nice" is great but if folks are having to put extra effort to make it look nice, then you need something slightly better :)
2018-07-16T20:55:43 #rust-dev-tools <imperio> well, in the given PR, it wasn't requiring any effort
2018-07-16T20:56:01 #rust-dev-tools <imperio> time where we added error codes everywhere and a lot at once is long gone
2018-07-16T20:56:06 #rust-dev-tools <Manishearth> uh, yeah it was https://github.com/rust-lang/rust/pull/51580#issuecomment-399695561
2018-07-16T20:56:34 #rust-dev-tools <Manishearth> sure, it should be preferred, but i think that's a weak preference and if taylor doesn't want to i don't think we should push them
2018-07-16T20:57:36 #rust-dev-tools <imperio> true
2018-07-16T20:57:40 #rust-dev-tools <imperio> I won't ask them to
2018-07-16T20:57:59 #rust-dev-tools <imperio> I'll just keep an eye over errors and add long error description
2018-07-16T20:58:19 #rust-dev-tools <imperio> a lot are missing and since there is no official no error system, we have to take care of the current one
2018-07-17T14:53:48 #rust-dev-tools <bbouvier> hi there
2018-07-17T14:54:27 #rust-dev-tools <bbouvier> it seems my rust langage server can't provide propositions for autocompletion, how can i debug more to confirm it's the case?
2018-07-17T14:54:29 #rust-dev-tools <bbouvier> is there a log somewhere?
2018-07-17T22:30:56 #rust-dev-tools <fitzgen> nrc: ^
2018-07-18T09:24:49 #rust-dev-tools <nrc> bbouvier: probably a Racer issue and tbh I don't know how to debug those so much
2018-07-18T09:25:01 #rust-dev-tools <nrc> maybe file an issue on the Racer repo and ask if someone can help you debug?
2018-07-18T09:25:30 #rust-dev-tools <bbouvier> thanks! finally got to have it working in vim, so that's good enough for me :)
2018-07-18T09:28:18 #rust-dev-tools <nrc> great!
2018-07-19T20:30:38 #rust-dev-tools <tromey> nrc: how would you suggest making it so that macOS nightly builds lldb but the other ones do not?  currently I'm looking at hacking bootstrap.py (to update the git submodule) and also lib.rs to make the same decision in parallel
2018-07-19T20:30:59 #rust-dev-tools <tromey> nrc: since afaik there isn't a special config.toml that's used by the various dist builders
2018-07-19T21:17:06 #rust-dev-tools <nrc> simulacrum: ^ do you know the best way to do this?
2018-07-19T21:17:14 #rust-dev-tools <simulacrum> we talked in #rust-infra 
2018-07-19T21:17:47 #rust-dev-tools <simulacrum> (yes)
2018-07-19T21:18:23 #rust-dev-tools <tromey> only 3 things left on this to-do list
2018-07-19T21:45:31 #rust-dev-tools <nrc> \o/
2018-07-19T21:45:38 #rust-dev-tools <nrc> thanks simulacrum!
2018-07-20T18:49:18 #rust-dev-tools <tromey> TIL lldb's build system doesn't respect all llvm build settings and so it won't build a static library
2018-07-20T18:49:24 #rust-dev-tools <tromey> getting closer though
2018-07-23T20:13:52 #rust-dev-tools <tromey> I finally can build lldb in-tree, "./x.py dist", unpack the resulting lldb .tar, and have it work
2018-07-23T20:13:56 #rust-dev-tools <tromey> whew that was a pain
2018-07-23T20:15:14 #rust-dev-tools <tromey> I've still punted on the code signing issue, not sure what to do there
2018-07-23T20:15:24 #rust-dev-tools <tromey> I wonder if rustup could warn people
2018-07-23T20:16:14 #rust-dev-tools <tromey> I looked at trying to reuse the xcode debugserver but that seems like maybe a bad idea
2018-07-23T20:25:12 #rust-dev-tools <nrc> \o/
2018-07-23T20:26:12 #rust-dev-tools <tromey> hi nrc.  what do you think about the code signing thing?
2018-07-23T20:26:28 #rust-dev-tools <tromey> also I wonder how else I should test this
2018-07-23T20:32:45 #rust-dev-tools <nrc> tromey: what's the status with code signing? Can the user use our lldb by using sudo?
2018-07-23T20:33:07 #rust-dev-tools <tromey> I will check
2018-07-23T20:33:35 #rust-dev-tools <nrc> if sudo works, then I think that will do for now. We could pretty easily make rustup warn about it
2018-07-23T20:35:19 #rust-dev-tools <nrc> are the changes to the build system landable now?
2018-07-23T20:37:24 #rust-dev-tools <tromey> something weird is happening
2018-07-23T20:37:32 #rust-dev-tools <tromey> that is, it works
2018-07-23T20:37:45 #rust-dev-tools <nrc> :-)
2018-07-23T20:37:47 #rust-dev-tools <tromey> oh - I bet the lldb build system is automatically signing with the key I installed earlier
2018-07-23T20:37:53 #rust-dev-tools <tromey> sigh
2018-07-23T20:38:42 #rust-dev-tools <tromey> you can see my commit here: https://github.com/tromey/rust/commit/2f33889ff9df61d503bf422e3e97139e3faf1b1b
2018-07-23T20:38:55 #rust-dev-tools <tromey> not quite ready since I have not yet moved the repositories to the nursery
2018-07-23T20:39:32 #rust-dev-tools <tromey> if you have any comments on it I'd appreciate it
2018-07-23T20:44:01 #rust-dev-tools <nrc> I'll have a look after my next meeting
2018-07-23T20:51:38 #rust-dev-tools <tromey> thanks, take your time, I'm nearly done for today
2018-07-23T20:51:59 #rust-dev-tools <tromey> I will move the repos soon, and also now while playing around I see another bug in the built lldb
2018-07-23T20:52:06 #rust-dev-tools <tromey> so a bit more to figure out
2018-07-24T16:42:48 #rust-dev-tools <tromey> aha, rustup seems to set LD_LIBRARY_PATH / DYLD_LIBRARY_PATH 
2018-07-24T16:42:57 #rust-dev-tools <tromey> I wish I had thought to look at this yesterday
2018-07-24T16:43:32 #rust-dev-tools <tromey> is there a simple way to test that my lldb will work properly when installed by rustup?
2018-07-24T16:44:26 #rust-dev-tools <tromey> like can I point it at a local .tar file made by "./x.py dist"?
2018-07-24T20:14:51 #rust-dev-tools <nrc> tromey: no, rustup is a pain to test like that, however, the 'unit' testing infrastructure is really good, so writing a test is a good way
2018-07-24T20:15:13 #rust-dev-tools <nrc> tromey: I looked the Rust patch, all looks good to me
2018-07-24T20:15:18 #rust-dev-tools <tromey> what I really want to do is make sure the lldb I'm distributing will work with rustup
2018-07-24T20:15:42 #rust-dev-tools <tromey> I think backing out the static linking will be the best, based on what I've seen, but it is hard to be certain
2018-07-25T18:07:31 #rust-dev-tools <tromey> while testing my dist changes I deleted build/tmp, thinking that would be ok; but it broke future attempts to "dist" and "./x.py build" didn't fix it up - so another full build was required
2018-07-25T18:07:42 #rust-dev-tools <tromey> well, or maybe something else but I don't know what
2018-07-25T18:10:28 #rust-dev-tools <tromey> anyway I feel like I am very close, like maybe just one buglet away
2018-07-25T19:50:47 #rust-dev-tools <tromey> nrc: you around?
2018-07-25T19:56:04 #rust-dev-tools <tromey> nrc: I wanted to know which groups should have access to the new clang and lldb repos, but I will just click wg-debugging and we can always change it later
2018-07-25T20:35:05 #rust-dev-tools <tromey> nrc: https://github.com/rust-lang/rust/pull/52716 in case you are interested
2018-07-26T16:13:06 #rust-dev-tools <tromey> well it almost works
2018-07-31T18:12:03 #rust-dev-tools <dsciarra> hi, not sure this is the right room for this question, anyhow: my current workflow to update pull requests does not feel right. I have added rust-lang/rust as a second remote so that I can rebase my changes before updating a pull request. But do I need to update submodule as well? And if yes....how do you usually do it?
2018-07-31T18:21:11 #rust-dev-tools <dsciarra> ok, fine I had to RTFM (F=fabulous): git submodule update --init --recursive --progress
2018-07-31T20:02:03 #rust-dev-tools <fitzgen> hey all, unfortunately I have to skip today's meeting
2018-07-31T20:06:55 #rust-dev-tools <nrc> np
2018-08-02T16:51:46 #rust-dev-tools <tromey> simulacrum: I don't know but maybe you need to r+ the lldb PR again,  now that it's been rebased?
2018-08-02T16:52:00 #rust-dev-tools <simulacrum> oh, yes
2018-08-02T16:52:12 #rust-dev-tools <tromey> https://github.com/rust-lang/rust/pull/52716
2018-08-02T16:52:23 #rust-dev-tools <tromey> in case you don't want to look it up
2018-08-02T16:52:29 #rust-dev-tools <tromey> thanks!
2018-08-02T16:52:30 #rust-dev-tools <simulacrum> I must
2018-08-02T16:52:53 #rust-dev-tools <simulacrum> 've missed the notification
2018-08-02T16:55:06 #rust-dev-tools <tromey> too many notifications, don't worry about it
2018-08-05T21:43:32 #rust-dev-tools <youssefhabri> Hi, does rls-vscode not support crate names autocomplete?
2018-08-05T21:46:42 #rust-dev-tools <nrc> it does not
2018-08-05T21:47:03 #rust-dev-tools <nrc> auto-complete can be limited at crate/module level
2018-08-05T21:49:41 #rust-dev-tools <nrc> although crate names do seem to work for me
2018-08-05T21:53:08 #rust-dev-tools <youssefhabri> ah, ok.  thanks
2018-08-06T20:53:48 #rust-dev-tools <Jonathansty> Hi, I´m trying to overload a Mul operator on a generic type and having some trouble, Why do we have to specify ¨impl<T: Mul<Output=T> >¨ and also ¨where T: Mul¨. Is it allowed to post pastebin links here?
2018-08-06T20:57:25 #rust-dev-tools <Jonathansty> oh...
2018-08-06T20:57:26 #rust-dev-tools <Jonathansty> nvm
2018-08-06T20:57:32 #rust-dev-tools <Jonathansty> I think I understand now
2018-08-06T20:57:52 #rust-dev-tools <Jonathansty> I was wondering why I had to specify that T was a Mul<Output=T> but realize now that I don´t...
2018-08-06T21:12:12 #rust-dev-tools <Jonathansty> I also realized I posted in the wrong channel...
2018-08-07T20:12:31 #rust-dev-tools <tromey> should I switch to doing PRs for lldb?
2018-08-07T20:12:40 #rust-dev-tools <tromey> until now I have just been pushing my patches directly
2018-08-07T20:13:00 #rust-dev-tools <tromey> but maybe since it is in rust-lang-nursery I ought to switch approaches
2018-08-07T20:13:12 #rust-dev-tools <tromey> or maybe nobody cares
2018-08-07T20:22:21 #rust-dev-tools <nrc> tromey: nah, do whatever works best
2018-08-07T20:22:29 #rust-dev-tools <tromey> alright, thanks
2018-08-07T20:22:36 #rust-dev-tools <tromey> got my first lldb bug report!
2018-08-07T20:22:37 #rust-dev-tools <tromey> so exciting
2018-08-07T20:22:50 #rust-dev-tools <nrc> I still commit directly to the RLS - I make a PR if it is something complex and there is someone good to review it
2018-08-07T20:22:56 #rust-dev-tools <nrc> nice!
2018-08-07T20:23:11 #rust-dev-tools <nrc> how is the distribution stuff going?
2018-08-07T20:23:23 #rust-dev-tools <tromey> slowly :)
2018-08-07T20:23:53 #rust-dev-tools <tromey> actually perhaps it is close, next I think I have to figure out how to get swig into the builder
2018-08-07T20:51:04 #rust-dev-tools <nrc> :-|
2018-08-07T20:51:13 #rust-dev-tools <tromey> haha yeah
2018-08-07T20:51:25 #rust-dev-tools <nrc> what is swig?
2018-08-07T20:51:30 #rust-dev-tools <tromey> these sorts of tasks are never fun but you just have to grind through them
2018-08-07T20:51:42 #rust-dev-tools <tromey> swig is something that generates scripting language boilerplate from C headers
2018-08-07T20:51:45 #rust-dev-tools <tromey> maybe C++ too
2018-08-07T20:51:54 #rust-dev-tools <LordRyan> yeah, c++
2018-08-07T20:51:59 #rust-dev-tools <tromey> its a cheap way to wire your library up to different scripting languages
2018-08-07T20:52:03 #rust-dev-tools <LordRyan> it's used in znc for python and other language support
2018-08-07T20:52:13 #rust-dev-tools <LordRyan> it's basically a bindings generator that works half the time
2018-08-07T20:52:20 #rust-dev-tools * tromey not a swig fan
2018-08-07T20:52:25 #rust-dev-tools <tromey> but it doesn't matter, lldb decided on it
2018-08-07T22:22:40 #rust-dev-tools <nrc> ok, thanks
2018-08-07T22:22:58 #rust-dev-tools <nrc> I'm sure it has all kinds of warts of its own for distribution :-(
2018-08-07T22:23:07 #rust-dev-tools <nrc> if only the whole world were as simple as Cargo
2018-08-09T18:44:49 #rust-dev-tools <tromey> my try build finally passed
2018-08-09T18:45:05 #rust-dev-tools <tromey> did it keep its "dist" artifacts around somewhere so I can take a look at them?
2018-08-09T20:15:38 #rust-dev-tools <nrc> \o/
2018-08-09T20:15:50 #rust-dev-tools <nrc> @simulacrum do you know about that ^^
2018-08-09T20:16:11 #rust-dev-tools <simulacrum> tromey: Yes, let me get the url for you...
2018-08-09T20:19:28 #rust-dev-tools <simulacrum> tromey: https://s3-us-west-1.amazonaws.com/rust-lang-ci2/rustc-builds/46aada4c0a1ffee5c9e60359909fb3cd39c6b6e0/lldb-nightly-i686-apple-darwin.tar.gz for example
2018-08-09T20:19:38 #rust-dev-tools <simulacrum> you can replace that last file with the other artifacts it produces
2018-08-09T20:22:11 #rust-dev-tools <tromey> thanks - how did you find that?
2018-08-09T20:23:11 #rust-dev-tools <tromey> looks ok at first glance
2018-08-09T20:23:17 #rust-dev-tools <tromey> will try on my mac tomorrow
2018-08-09T21:04:57 #rust-dev-tools <simulacrum> tromey: knowledge (well, sort of)
2018-08-09T21:05:15 #rust-dev-tools <tromey> alright - I'll just ask you if it comes up again :)
2018-08-09T21:05:20 #rust-dev-tools <simulacrum> I have access to the S3 UI so I can search by commit hash and then scroll through semi-nice dialogs when I need to :)
2018-08-09T21:06:38 #rust-dev-tools <tromey> cool
2018-08-09T21:06:41 #rust-dev-tools <tromey> got to run now, ttyl
2018-08-09T21:06:43 #rust-dev-tools <tromey> thank you again
2018-08-14T12:45:13 #rust-dev-tools <gorn> Hi, I am not sure if this is the right place to get some helpt with VS Code rust debuging
2018-08-14T12:45:19 #rust-dev-tools <gorn> I have problem to get the rust debuging working in VS Code
2018-08-14T12:45:26 #rust-dev-tools <gorn> I am getting:
2018-08-14T12:45:32 #rust-dev-tools <gorn> warning: Missing auto-load script at offset 0 in section .debug_gdb_scripts
2018-08-14T12:45:49 #rust-dev-tools <gorn> of file /home/gorn/nextcloud/viptrader/rust/target/debug/hello.
2018-08-14T12:45:50 #rust-dev-tools <gorn> Use `info auto-load python-scripts [REGEXP]' to list them.
2018-08-14T12:45:50 #rust-dev-tools <gorn> Running executable
2018-08-14T12:45:50 #rust-dev-tools <gorn> warning: Error disabling address space randomization: Operation not permitted
2018-08-14T12:45:50 #rust-dev-tools <gorn> Hello, world!
2018-08-14T12:45:50 #rust-dev-tools <gorn> Illegal process-id: [PID].
2018-08-14T12:46:58 #rust-dev-tools <gorn> I have read https://github.com/rust-lang-nursery/rls/blob/master/debugging.md and other resources, but I did not find any clue
2018-08-14T13:05:59 #rust-dev-tools <gorn> Any idea about this?
2018-08-15T08:17:20 #rust-dev-tools <ato> nrc: The installations instruction in https://www.ncameron.org/blog/rustfmt-1-rc/ doesn’t work for me.
2018-08-15T08:17:32 #rust-dev-tools <ato> % rustup install rustfmt-preview
2018-08-15T08:17:32 #rust-dev-tools <ato> error: invalid toolchain name: 'rustfmt-preview'
2018-08-15T08:20:49 #rust-dev-tools <phansch> ato: does a 'rustup self update' make it work?
2018-08-15T08:21:13 #rust-dev-tools <ato> Yes.
2018-08-15T08:21:25 #rust-dev-tools <ato> I did "rustup component add rustfmt-preview" from the README and that appears to work.
2018-08-21T08:06:40 #rust-dev-tools <phansch> hi there!
2018-08-21T14:10:02 #rust-dev-tools <misdreavus> is there a mibbit/etc link to this channel somewhere? seems oddly suceptible to bots/drive-by comments
2018-08-21T14:20:53 #rust-dev-tools <phansch> https://www.rust-lang.org/en-US/community.html includes this one and a bunch of others
2018-08-21T14:45:46 #rust-dev-tools <LordRyan> misdreavus: well this looks like an annoyingly targeted attack because they get out a line before being killed off
2018-08-21T14:47:00 #rust-dev-tools <LordRyan> probably just a general channel scraper which you could do without having a link to a channel
2018-08-21T14:47:22 #rust-dev-tools <misdreavus> yeah
2018-08-21T16:11:30 #rust-dev-tools <misdreavus> gone in two minutes
2018-08-22T10:50:34 #rust-dev-tools <WindowsBunny> do I have to regret being in this channel?
2018-08-22T10:51:23 #rust-dev-tools <eijebong> WindowsBunny: Why ?
2018-08-22T10:51:47 #rust-dev-tools <WindowsBunny> eijebong: Because of the spam bots
2018-08-22T10:52:02 #rust-dev-tools <eijebong> WindowsBunny: It's not this channel only unfortunately
2018-08-22T10:52:31 #rust-dev-tools <eijebong> But they don't HL me so I don't even see them usually
2018-08-22T10:52:53 #rust-dev-tools <WindowsBunny> eijebong: private messages don't ping you by default?
2018-08-22T10:53:04 #rust-dev-tools <eijebong> WindowsBunny: Oh
2018-08-22T10:53:14 #rust-dev-tools <eijebong> I got only two of those
2018-08-22T10:53:34 #rust-dev-tools <eijebong> WindowsBunny: Don't you want hot singles in your area ? :p
2018-08-22T10:53:45 #rust-dev-tools <WindowsBunny> eijebong: https://i.imgur.com/lccuAxT.png
2018-08-22T10:54:27 #rust-dev-tools <eijebong> Yup, got almost the same one from a different bot earlier ;)
2018-08-22T10:59:07 #rust-dev-tools <fwiw> WindowsBunny: +R
2018-08-22T20:55:53 #rust-dev-tools <talg> if those hot singles will come over and figure out why the borrow checker won't pass my code, I am in!
2018-08-24T14:19:09 #rust-dev-tools <misdreavus> beginning to think we should maybe make this "registered users only"? at least until this dies down?
2018-08-24T14:19:27 #rust-dev-tools <misdreavus> it's literally the only thing that's happened here for several days
2018-08-24T14:23:32 #rust-dev-tools <phansch> yeah, not much happening on IRC apart from #rustc and #rust afaict
2018-08-24T14:24:12 #rust-dev-tools <phansch> https://mozilla.logbot.info/rust-dev-tools/20180823 haha
2018-08-24T14:24:13 #rust-dev-tools <misdreavus> discussions also happen in #rust-internals and some off-topic channels
2018-08-24T14:24:34 #rust-dev-tools <phansch> oh, I see
2018-08-24T14:24:36 #rust-dev-tools <misdreavus> i also see things in #rust-docs periodically
2018-08-24T14:25:15 #rust-dev-tools <misdreavus> some channels still get used, but this one is mainly here because that's where this team started, and because links to it still exist
2018-08-24T14:25:45 #rust-dev-tools <misdreavus> people will come in here to ask for help with RLS, for example
2018-08-26T20:27:15 #rust-dev-tools <nrc> Yeah, I'm mostly ignoring this channel due to spam, but I check once about once per day
2018-08-26T20:27:25 #rust-dev-tools <nrc> Come to Discord, the water's great!
2018-08-29T16:41:00 #rust-dev-tools <fenster> Quick question: When does a new verison of the rls vscode plugin get released?
2018-08-30T04:37:20 #rust-dev-tools <nrc> test
2018-09-14T17:44:00 #rust-dev-tools <tromey> nrc: I noticed that highfive doesn't auto-assign rustup PRs, should I pick someone or just wait for someone to look at it?
2018-09-17T20:38:01 #rust-dev-tools <nrc> tromey: sorry, been away, if it still needs review then ping somebody (Alex, Diggsey, or I). In general, Rustup probably needs a reivew ping because it is not closely monitored
2018-09-17T20:38:11 #rust-dev-tools <tromey> thanks nrc
2018-09-17T20:38:28 #rust-dev-tools <tromey> I pinged you on the PR today but held myself back from pinging again on irc
2018-09-17T20:40:08 #rust-dev-tools <nrc> ah, cool, I'll take a look today
2018-09-17T20:40:17 #rust-dev-tools <nrc> just catching up on notifications
2018-09-17T20:40:28 #rust-dev-tools <nrc> (god there are a lot of them, I was only away for a few days)
2018-09-17T20:40:34 #rust-dev-tools <tromey> haha yeah
2018-09-17T20:40:53 #rust-dev-tools <tromey> thanks for doing that
2018-09-18T16:26:47 #rust-dev-tools <LordRyan> I noticed that when updating nightly rls, something changed. Running version: rls-preview 0.130.5-nightly (2b21611 2018-09-15)
2018-09-18T16:27:15 #rust-dev-tools <LordRyan> Change is that a multiline response is returned during syntax checking, which with w0rp's ALE Vim plugin, makes it look rather ugly
2018-09-18T16:27:27 #rust-dev-tools <LordRyan> Is there a reference to where the language client specification allows for this behavior?
2018-09-19T01:07:05 #rust-dev-tools <nrc> LordRyan: which response to syntax checking? I don't think anything has changed there. It could be something in the compiler
2018-09-19T01:09:32 #rust-dev-tools <LordRyan> nrc: I'm driving home in a few, will try to reproduce when there
2018-09-19T03:00:28 #rust-dev-tools <LordRyan> hm, nrc it might be tomorrow
2018-09-19T03:00:34 #rust-dev-tools <LordRyan> i'm having a few issues with Vim on my craptop
2018-09-19T03:00:36 #rust-dev-tools <LordRyan> zsh:1: command not found: cargo
2018-09-19T03:07:50 #rust-dev-tools <LordRyan> can't reproduce with HEAD from w0rp/ale and latest nightly on macOS
2018-09-19T03:07:54 #rust-dev-tools <LordRyan> on GalliumOS*
2018-09-19T03:08:02 #rust-dev-tools <LordRyan> will see if i can reproduce on the mac tomorrow
2018-09-19T03:24:12 #rust-dev-tools <nrc> thanks!
2018-09-19T13:13:54 #rust-dev-tools <LordRyan> nrc: Your branch is behind 'origin/master' by 408 commits, and can be fast-forwarded.
2018-09-19T13:13:56 #rust-dev-tools <LordRyan> whoops! D:
2018-09-19T16:03:21 #rust-dev-tools <LordRyan> nrc: been doing some more testing and i think i narrowed it down to a reproducible case
2018-09-19T16:03:36 #rust-dev-tools <LordRyan> if I open up Vim8 with a file, and change it *without saving*, it gives me a three-line output
2018-09-19T16:03:47 #rust-dev-tools <LordRyan> if I save it, then go back to that same spot, it gives me one line.
2018-09-19T16:03:55 #rust-dev-tools <LordRyan> I'm not sure whether this is an issue with ALE or with rls.
2018-09-19T16:56:51 #rust-dev-tools <LordRyan> it was an issue with my brain :(
2018-09-19T16:57:23 #rust-dev-tools <LordRyan> i completely forgot it runs `cargo` too
2018-09-19T16:57:31 #rust-dev-tools <LordRyan> `cargo` makes a one-line output, `rls` doesn't
2018-09-19T17:25:18 #rust-dev-tools <LordRyan> nrc: new question, is there a way to make rls do output similar to cargo so that it's only on one line?
2018-09-19T21:50:04 #rust-dev-tools <nrc> :-)
2018-09-19T21:50:25 #rust-dev-tools <nrc> LordRyan: I'm not sure what that means, sorry, could you give an example?
2018-09-20T13:06:08 #rust-dev-tools <LordRyan> nrc: i did a lot more looking into it and i think i found what happens
2018-09-20T13:06:26 #rust-dev-tools <LordRyan> ale#handlers#rust#HandleRustErrors is only called for `cargo`
2018-09-20T13:06:28 #rust-dev-tools <LordRyan> https://github.com/w0rp/ale/blob/master/autoload/ale/handlers/rust.vim#L56
2018-09-20T13:06:34 #rust-dev-tools <LordRyan> so that line doesn't actually work for anything else
2018-09-20T13:07:55 #rust-dev-tools <LordRyan> however, with `rls`, it seems to be put into one value
2018-09-20T13:08:08 #rust-dev-tools <LordRyan> so you end up with the `{label}\n\n{message}`
2018-09-20T20:49:43 #rust-dev-tools <nrc> tromey: ping
2018-09-20T20:49:55 #rust-dev-tools <tromey> nrc: hi 
2018-09-20T20:52:43 #rust-dev-tools <nrc> tromey: hey, hoping you can help with a really simple debugging issue I'm having - I'm trying to debug a test in lldb (I'm much more familiar with GDB, I don't really know what I'm doing here). I'm running `rust-lldb -- /Users/nick/version-controlled/rustup.rs/target/debug/deps/cli_self_upd-25d81899847b6f50 uninstall_self_delete_works`, then `b raw.rs:321`
2018-09-20T20:52:43 #rust-dev-tools <nrc> (and I can verify that the breakpoint looks to be in the right place), then `r`, but the breakpoint is not being hit. Do I need to do anything else to hit the breakpoint?
2018-09-20T20:53:18 #rust-dev-tools <tromey> I would think that should be enough.  I am not a super lldb wizard either, I'm afraid
2018-09-20T20:54:33 #rust-dev-tools <tromey> one guess would be if this file name matches what it actually sees
2018-09-20T20:54:53 #rust-dev-tools <nrc> listing the breakpoints, it looks like the right file
2018-09-20T20:55:22 #rust-dev-tools <nrc> oh I bet it's spawning a new process
2018-09-20T20:55:46 #rust-dev-tools <nrc> do you know if it's possible to make lldb debug a spawned process?
2018-09-20T20:56:13 #rust-dev-tools <est31> nrc: gdb can
2018-09-20T20:56:18 #rust-dev-tools <tromey> it is but I don't know the incantation
2018-09-20T20:56:31 #rust-dev-tools <tromey> gdb has multi-process support but it is still not really bulletproof enough to use IME
2018-09-20T20:56:33 #rust-dev-tools <est31> you can attach gdb to running processes... need to be root or something
2018-09-20T20:56:51 #rust-dev-tools <est31> oh you mean subprocesses
2018-09-20T20:56:59 #rust-dev-tools <est31> idk about those
2018-09-20T20:57:11 #rust-dev-tools <tromey> https://stackoverflow.com/questions/14746315/how-to-attach-to-child-process-in-lldb
2018-09-20T20:57:24 #rust-dev-tools <tromey> I guess there's no direct equivalent yet to what gdb does
2018-09-20T20:57:30 #rust-dev-tools <tromey> https://bugs.llvm.org/show_bug.cgi?id=17972
2018-09-20T20:59:56 #rust-dev-tools <nrc> thanks!
2018-09-22T08:15:12 #rust-dev-tools <justsomequestions> In VSCode RLS never stops bulding (the thing is rotating all the time). When I activate debug logging through export RUST_LOG=rls=debug I only get this https://pastebin.com/QrTdz2gG (no error messages whatsoever)
2018-09-22T08:15:48 #rust-dev-tools <justsomequestions> when I do jump to definition it says no defintion found and outputs nothing
2018-09-22T08:16:03 #rust-dev-tools <justsomequestions> but it shows me the short documentation on hovering
2018-09-22T08:16:08 #rust-dev-tools <justsomequestions> does anyone know what I am doing wrong?
2018-09-22T09:35:07 #rust-dev-tools <justsomequestions> nrc: the support page says I might ping you so I hope its ok that I do :D
2018-09-22T18:10:15 #rust-dev-tools <umanwizard> hi, is it possible to use Visual Studio to develop remotely over ssh? (the code, as well as the language server, all running on the remote box)
2018-09-22T18:10:51 #rust-dev-tools <umanwizard> I couldn't find anything about this in the rls-vscode readme on Github.
2018-09-22T19:50:34 #rust-dev-tools <umanwizard> I meant to say vscode, not Visual Studio
2018-10-09T04:53:54 #rust-dev-tools <letmutx> is there a channel for racer related discussion?
2018-10-10T17:38:07 #rust-dev-tools <LordRyan> For the purpose of linting support in an editor, I can use `cargo-clippy` and rely on the error output being the same as with `cargo build` and `cargo check`?
2018-10-10T17:57:40 #rust-dev-tools <oli_obk> well kind of. as long as `cargo-clippy` exists at all, yes
2018-10-10T17:57:53 #rust-dev-tools <oli_obk> but it's not clear whether we're going to support it forever
2018-10-10T17:58:23 #rust-dev-tools <oli_obk> but yes, the entire output mirrors that of `cargo check`, just with more errors
2018-10-10T18:02:44 #rust-dev-tools <LordRyan> So what would be the end goal? Moving stuff to `rls` instead?
2018-10-10T18:38:45 #rust-dev-tools <est31> there is also a proposal I think of putting all of clippy into rustc
2018-10-10T19:27:59 #rust-dev-tools <LordRyan> well that would solve the problem of relying on compiler internals
2018-10-10T20:35:39 #rust-dev-tools <oli_obk> est31: huh?
2018-10-10T20:35:48 #rust-dev-tools * oli_obk is not aware of such thoughts
2018-10-10T20:49:38 #rust-dev-tools <est31> oli_obk: or at least parts
2018-10-10T20:49:57 #rust-dev-tools <oli_obk> oh right
2018-10-10T20:50:30 #rust-dev-tools <oli_obk> we have a great suggestion builder and other convenience things that rustc lints can benefit from
2018-10-10T21:07:26 #rust-dev-tools <misdreavus> i was under the impression that the *opposite* was suggested - moving most lints into clippy
2018-10-10T21:07:44 #rust-dev-tools <misdreavus> but i may be out of the loop
2018-10-10T21:08:07 #rust-dev-tools <LordRyan> clippy is already nightly only, no?
2018-10-10T21:08:18 #rust-dev-tools <LordRyan> unless the intent is to make clippy stable i'm not sure why you'd want a linter to be nightly only
2018-10-10T21:08:29 #rust-dev-tools <misdreavus> i think that was part of it
2018-10-10T21:19:46 #rust-dev-tools <est31> oli_obk was the person to file the issue :p https://github.com/rust-lang/rust/issues/53224
2018-10-10T21:21:48 #rust-dev-tools <misdreavus> aha
2018-10-16T02:41:23 #rust-dev-tools <LordRyan> that's upsetting
2018-10-16T02:41:33 #rust-dev-tools <LordRyan> shouldn't require to register an account to get dev tools support
2018-10-16T02:41:55 #rust-dev-tools <LordRyan> more importantly the fact that you're moving to an unreliable service for it, is even worse
2018-10-16T02:55:04 #rust-dev-tools <LordRyan> Why Discord and not Matrix? That way, IRC can still be supported for us crusty farts who don't see the need to register an account for open-source tools.
2018-10-16T06:33:41 #rust-dev-tools <drager> LordRyan: Yeah, I prefer IRC as well. However, you could try out bitlbee and https://github.com/sm00th/bitlbee-discord (Have'nt tried it myself yet though)
2018-10-16T06:34:10 #rust-dev-tools <LordRyan> That still both requires registering, and relies on Discord not going down.
2018-10-16T06:34:21 #rust-dev-tools <LordRyan> Matrix and IRC are much more reliable than Discord.
2018-10-16T06:34:26 #rust-dev-tools <drager> Yeah sure
2018-10-16T06:35:20 #rust-dev-tools <LordRyan> I should be able to join somewhere *without registering* and get support.
2018-10-16T06:37:52 #rust-dev-tools <drager> Yeah
2018-10-16T06:38:41 #rust-dev-tools <drager> You can ask questions in #rust and #rust-beginners though
2018-10-16T06:38:55 #rust-dev-tools <LordRyan> If I could get responses from those channels I wouldn't be in this one.
2018-10-16T06:39:06 #rust-dev-tools <LordRyan> But perhaps now I have an excuse to not be sent here.
2018-10-16T11:58:32 #rust-dev-tools <letmutx> is there a channel for discussion about racer?
2018-10-16T20:14:21 #rust-dev-tools <steveeJ> after running `cargo +nightly install rustfmt-nightly --force`, rustfmt still tells me it's version *rustfmt 0.99.1-stable (da17b68 2018-08-04)*. is that expected?
2018-10-16T20:15:05 #rust-dev-tools <steveeJ> I'm trying to install the nightly rustfmt in my PATH because the stable one has some oddities
2018-10-17T06:50:34 #rust-dev-tools <drager> steveeJ: Isn't it called rustfmt-preview?
2018-10-17T06:51:43 #rust-dev-tools <drager> $ rustup component list | grep rustfmt
2018-10-17T06:51:46 #rust-dev-tools <drager> rustup component list | grep rustfm
2018-10-17T06:51:59 #rust-dev-tools <drager> rustfmt-preview-x86_64-unknown-linux-gnu (installed)
2018-10-17T06:53:45 #rust-dev-tools <steveeJ> drager: many names seem to exist for the tool
2018-10-17T06:55:18 #rust-dev-tools <drager> steveeJ: Alright, try to install rustfmt-preview and see if you get a newer one
2018-10-17T07:38:30 #rust-dev-tools <steveeJ> drager: according to my shell history I tried that already. where would I find that executable?
2018-10-17T07:39:33 #rust-dev-tools <steveeJ> `rustup run nightly rustfmt --version` looks like a nightly version :-)
2018-10-17T07:46:39 #rust-dev-tools <drager> If I run `rustfmt --version` in a folder where I use rust nightly I get `rustfmt 0.99.5-nightly (90692a5 2018-09-26)`
2018-10-17T07:59:17 #rust-dev-tools <steveeJ> drager: I'd like to just use rustfmt from nightly with a stable compiler. might be a special case
2018-10-17T08:03:58 #rust-dev-tools <drager> steveeJ: Then you can do: `rustfmt +nightly --version `
2018-10-25T15:37:12 #rust-dev-tools <LordRyan> I'm helping out with https://github.com/w0rp/ale and noticed that, when trying to make an improved handler for secondary spans, that there's a case where an `is_primary` span *does not* have a label
2018-10-25T15:37:20 #rust-dev-tools <LordRyan> is this intentional, and should I work around this?
2018-10-25T15:37:29 #rust-dev-tools <LordRyan> the secondary span *does* have a label
2018-10-25T15:38:06 #rust-dev-tools <LordRyan> updating latest nightly, actually. should've tested that first
2018-10-25T15:38:44 #rust-dev-tools <LordRyan> nope, is_primary: true, label: null
2018-10-25T17:17:34 #rust-dev-tools <LordRyan> Someone else working on the stuff created https://github.com/rust-lang/rust/issues/55350
2018-10-27T22:15:03 #rust-dev-tools <steveeJ> I'm desperately trying to get the vscode rust plugin to use the rustfmt from nightly, despite using stable for the compilation
2018-10-27T22:15:38 #rust-dev-tools <steveeJ> I've built a wrapper which runs rustfmt from nightly and set the following:     "rust.rustfmt_path": "/home/steveej/.local/bin/rustfmt-nightly",
2018-10-27T22:15:51 #rust-dev-tools <steveeJ> it doesn't work though
2018-10-27T22:30:14 #rust-dev-tools <steveeJ> ah, someone else was there too https://github.com/rust-lang-nursery/rls-vscode/issues/438
2018-10-30T20:17:06 #rust-dev-tools <mtan> could anyone possibly link to a project that has releases built by travis using https://github.com/japaric/trust ?
2018-11-13T16:54:29 #rust-dev-tools <tromey> nrc: I'm considering putting gdb into rustup and I am wondering if I need any special approval to put a gdb clone into rust-lang-nursery.  I already have sufficient permissions to do this but I feel uncomfortable acting unilaterally
2018-11-26T11:42:58 #rust-dev-tools <nox> Hello, I can't seem to be able to make vscode open the problems pane when I run the build task, it only ever shows the terminal by default, any way to change that?
